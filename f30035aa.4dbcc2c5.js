(window.webpackJsonp=window.webpackJsonp||[]).push([[236],{1e3:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/audioUnitScopes_2x-11043ca22732e793c12d0e89ee4b3276.png"},1001:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/AudioProcessingGraphBeforeEQ_2x-8acd55494667e68d49e3df0ff79f303f.png"},1002:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/AudioProcessingGraphWithEQ_2x-8176416355dc7732cb9e2c7a0d6fa96a.png"},1003:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/pull_model_2x-5f61abb52f3491dda9b31fc8d9cc5871.png"},1004:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/ioDataBuffers_2x-647f5345479e4bda63135f72f8f02fef.png"},1005:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/IOWithoutRenderCallback_2x-9eca9b2c6d20ac1d3b75c7b99eef2396.png"},1006:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/IOPassThrough_2x-d2931e117d8b9548f67f9c47d2ceb7c4.png"},1007:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/IOWithoutRenderCallback_2x-1375043-9eca9b2c6d20ac1d3b75c7b99eef2396.png"},1008:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/IOWithRenderCallback_2x-bc85de3586681d29eb9e572ed7450ed6.png"},1009:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/OutputOnlyWithRenderCallback_2x-6f167429b43f441a972f7f09e6ba7650.png"},1010:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/OutputOnlyWithRenderCallbackExtended_2x-c2507a0470067ed79d85d31dd00071cb.png"},1011:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/image-20210123223500263-64684ba53e13d8ff2880a8e59f80b594.png"},308:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return u})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return l}));var a=n(3),i=n(7),o=(n(0),n(329)),r=["components"],u={},s={unversionedId:"\u97f3\u89c6\u9891/\u5b66\u4e60\u8d44\u6599/\u6559\u7a0b/Audio-Unit-Hosting-Guide-for-iOS",id:"\u97f3\u89c6\u9891/\u5b66\u4e60\u8d44\u6599/\u6559\u7a0b/Audio-Unit-Hosting-Guide-for-iOS",isDocsHomePage:!1,title:"Audio-Unit-Hosting-Guide-for-iOS",description:"Audio Unit Hosting Guide for iOS",source:"@site/docs/\u97f3\u89c6\u9891/\u5b66\u4e60\u8d44\u6599/\u6559\u7a0b/Audio-Unit-Hosting-Guide-for-iOS.md",slug:"/\u97f3\u89c6\u9891/\u5b66\u4e60\u8d44\u6599/\u6559\u7a0b/Audio-Unit-Hosting-Guide-for-iOS",permalink:"/docs/\u97f3\u89c6\u9891/\u5b66\u4e60\u8d44\u6599/\u6559\u7a0b/Audio-Unit-Hosting-Guide-for-iOS",editUrl:"dys-typora-open://mine/survival/docs/\u97f3\u89c6\u9891/\u5b66\u4e60\u8d44\u6599/\u6559\u7a0b/Audio-Unit-Hosting-Guide-for-iOS.md",version:"current"},c=[{value:"Audio Unit Hosting Fundamentals",id:"audio-unit-hosting-fundamentals",children:[{value:"Audio Units Provide Fast, Modular Audio Processing",id:"audio-units-provide-fast-modular-audio-processing",children:[]},{value:"Audio Processing Graphs Manage Audio Units",id:"audio-processing-graphs-manage-audio-units",children:[]},{value:"Render Callback Functions Feed Audio to Audio Units",id:"render-callback-functions-feed-audio-to-audio-units",children:[]},{value:"Audio Stream Formats Enable Data Flow",id:"audio-stream-formats-enable-data-flow",children:[]}]},{value:"Constructing Audio Unit Apps",id:"constructing-audio-unit-apps",children:[{value:"Start by Choosing a Design Pattern",id:"start-by-choosing-a-design-pattern",children:[]},{value:"Constructing Your App",id:"constructing-your-app",children:[]},{value:"Troubleshooting Tips",id:"troubleshooting-tips",children:[]}]},{value:"Using Specific Audio Units",id:"using-specific-audio-units",children:[{value:"Using I/O Units",id:"using-io-units",children:[]},{value:"Using Mixer Units",id:"using-mixer-units",children:[]},{value:"Using Effect Units",id:"using-effect-units",children:[]},{value:"Identifier Keys for Audio Units",id:"identifier-keys-for-audio-units",children:[]}]},{value:"reference",id:"reference",children:[{value:"document",id:"document",children:[]},{value:"sample code",id:"sample-code",children:[]}]}],p={toc:c};function l(e){var t=e.components,u=Object(i.a)(e,r);return Object(o.b)("wrapper",Object(a.a)({},p,u,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"audio-unit-hosting-guide-for-ios"},"Audio Unit Hosting Guide for iOS"),Object(o.b)("p",null,"[toc]"),Object(o.b)("h2",{id:"audio-unit-hosting-fundamentals"},"Audio Unit Hosting Fundamentals"),Object(o.b)("p",null,"Direct use of audio units in your project is the correct choice only when you need the very highest degree of control, performance, or flexibility, or when you need a specific feature (such as acoustic echo cancelation) available only by using an audio unit directly."),Object(o.b)("p",null,"\u4ec5\u5f53\u60a8\u9700\u8981\u6700\u9ad8\u7a0b\u5ea6\u7684\u63a7\u5236\uff0c\u6027\u80fd\u6216\u7075\u6d3b\u6027\uff0c\u6216\u8005\u9700\u8981\u76f4\u63a5\u4f7f\u7528\u97f3\u9891\u5355\u5143\u624d\u80fd\u4f7f\u7528\u7684\u7279\u5b9a\u529f\u80fd\uff08\u4f8b\u5982\u56de\u58f0\u6d88\u9664\uff09\u65f6\uff0c\u624d\u53ef\u4ee5\u5728\u9879\u76ee\u4e2d\u76f4\u63a5\u4f7f\u7528\u97f3\u9891\u5355\u5143\u662f\u6b63\u786e\u7684\u9009\u62e9 \u3002"),Object(o.b)("p",null,"For an overview of iOS audio APIs, and guidance on when to use each one, refer to ",Object(o.b)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/AudioVideo/Conceptual/MultimediaPG/Introduction/Introduction.html#//apple_ref/doc/uid/TP40009767"},Object(o.b)("em",{parentName:"a"},"Multimedia Programming Guide")),"."),Object(o.b)("p",null,"\u6709\u5173iOS\u97f3\u9891API\u7684\u6982\u8ff0\u4ee5\u53ca\u4f55\u65f6\u4f7f\u7528\u6bcf\u79cdAPI\u7684\u6307\u5357\uff0c\u8bf7\u53c2\u9605\u300a\u591a\u5a92\u4f53\u7f16\u7a0b\u6307\u5357\u300b\u3002"),Object(o.b)("h3",{id:"audio-units-provide-fast-modular-audio-processing"},"Audio Units Provide Fast, Modular Audio Processing"),Object(o.b)("p",null,"\u97f3\u9891\u5355\u5143\u63d0\u4f9b\u5feb\u901f\u7684\u6a21\u5757\u5316\u97f3\u9891\u5904\u7406"),Object(o.b)("p",null,"modules"),Object(o.b)("p",null,"Use audio units directly, rather than by way of higher-level APIs, when you require one of the following:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Simultaneous audio I/O (input and output) with low latency, such as for a VoIP (Voice over Internet Protocol) application")),Object(o.b)("p",null,"\u4f4e\u5ef6\u8fdf\u7684\u540c\u65f6\u97f3\u9891I / O\uff08\u8f93\u5165\u548c\u8f93\u51fa\uff09\uff0c\u4f8b\u5982VoIP\uff08\u4e92\u8054\u7f51\u534f\u8bae\u8bed\u97f3\uff09\u5e94\u7528"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Responsive playback of synthesized sounds, such as for musical games or synthesized musical instruments")),Object(o.b)("p",null,"\u54cd\u5e94\u6027\u64ad\u653e\u5408\u6210\u58f0\u97f3\uff0c\u4f8b\u5982\u97f3\u4e50\u6e38\u620f\u6216\u5408\u6210\u4e50\u5668 (synthesized: \u5408\u6210 \uff0c synchronization\uff1a\u540c\u6b65)"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Use of a specific audio unit feature such as acoustic echo cancelation, mixing, or tonal equalization")),Object(o.b)("p",null,"\u4f7f\u7528\u7279\u5b9a\u7684\u97f3\u9891\u5355\u5143\u529f\u80fd\uff0c\u4f8b\u5982\u56de\u58f0\u6d88\u9664\uff0c\u6df7\u97f3\u6216\u97f3\u8c03\u5747\u8861"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"A processing-chain architecture that lets you assemble audio processing modules into flexible networks. This is the only audio API in iOS offering this capability.")),Object(o.b)("p",null,"\u4e00\u79cd\u5904\u7406\u94fe\u4f53\u7cfb\u7ed3\u6784\uff0c\u53ef\u8ba9\u60a8\u5c06\u97f3\u9891\u5904\u7406\u6a21\u5757\u7ec4\u88c5\u5230\u7075\u6d3b\u7684\u7f51\u7edc\u4e2d\u3002 \u8fd9\u662fiOS\u4e2d\u552f\u4e00\u63d0\u4f9b\u6b64\u529f\u80fd\u7684\u97f3\u9891API\u3002"),Object(o.b)("h4",{id:"audio-units-in-ios"},"Audio Units in iOS"),Object(o.b)("p",null,"iOS provides seven audio units arranged into four categories by purpose, as shown in Table 1-1."),Object(o.b)("p",null,"iOS\u63d0\u4f9b\u4e86\u4e03\u4e2a\u97f3\u9891\u5355\u5143\uff0c\u6309\u76ee\u7684\u5c06\u97f3\u9891\u5355\u5143\u5206\u4e3a\u56db\u4e2a\u7c7b\u522b\uff0c\u5982\u88681-1\u6240\u793a\u3002\uff08arranged\uff1a \u5b89\u6392\uff0c\u6574\u7406\uff09"),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",{parentName:"tr",align:null},Object(o.b)("strong",{parentName:"th"},"Purpose")),Object(o.b)("th",{parentName:"tr",align:null},Object(o.b)("strong",{parentName:"th"},"Audio units")))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("em",{parentName:"td"},"Effect")),Object(o.b)("td",{parentName:"tr",align:null},"iPod Equalizer")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("em",{parentName:"td"},"Mixing")),Object(o.b)("td",{parentName:"tr",align:null},"3D Mixer Multichannel Mixer")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("em",{parentName:"td"},"I/O")),Object(o.b)("td",{parentName:"tr",align:null},"Remote I/OVoice-Processing I/OGeneric Output")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("em",{parentName:"td"},"Format conversion")),Object(o.b)("td",{parentName:"tr",align:null},"Format Converter")))),Object(o.b)("p",null,"iPod  Equalizer\uff1aiPod \u5747\u8861\u5668"),Object(o.b)("p",null,"note: The iOS dynamic plug-in architecture does not support third-party audio units. That is, the only audio units available for dynamic loading are those provided by the operating system."),Object(o.b)("p",null,"iOS\u52a8\u6001\u63d2\u4ef6\u4f53\u7cfb\u7ed3\u6784\u4e0d\u652f\u6301\u7b2c\u4e09\u65b9\u97f3\u9891\u5355\u5143\u3002 \u5373\uff0c\u552f\u4e00\u53ef\u7528\u4e8e\u52a8\u6001\u52a0\u8f7d\u7684\u97f3\u9891\u5355\u5143\u662f\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u7684\u90a3\u4e9b\u97f3\u9891\u5355\u5143\u3002 (dynamic plug-in architecture)"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Effect Unit")),Object(o.b)("p",null,"iOS 4 provides one effect unit, the ",Object(o.b)("em",{parentName:"p"},"iPod Equalizer"),", the same equalizer used by the built-in iPod app. To view the iPod app\u2019s user interface for this audio unit, go to Settings > iPod > EQ. When using this audio unit, you must provide your own UI. This audio unit offers a set of preset equalization curves such as Bass Booster, Pop, and Spoken Word."),Object(o.b)("p",null,"\u8be5\u97f3\u9891\u5355\u5143\u63d0\u4f9b\u4e86\u4e00\u7ec4\u9884\u8bbe\u7684\u5747\u8861\u66f2\u7ebf\uff0c\u4f8b\u5982\u4f4e\u97f3\u52a9\u63a8\u5668\uff0c\u6d41\u884c\u97f3\u4e50\u548c\u53e3\u8bed\u5355\u8bcd\u3002"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Mixer Units")),Object(o.b)("p",null,"iOS provides two mixer units. The ",Object(o.b)("em",{parentName:"p"},"3D Mixer unit")," is the foundation upon which OpenAL is built. In most cases, if you need the features of the 3D Mixer unit, your best option is to use OpenAL which provides a higher level API that is well suited for game apps. For sample code that shows how to use OpenAL, see the sample code project ",Object(o.b)("em",{parentName:"p"},"oalTouch"),"."),Object(o.b)("p",null,"iOS\u63d0\u4f9b\u4e86\u4e24\u4e2a\u6df7\u97f3\u5668\u5355\u5143\u3002 3D\u6df7\u5408\u5668\u5355\u5143\u662f\u6784\u5efaOpenAL\u7684\u57fa\u7840\u3002 \u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u60a8\u9700\u89813D\u6df7\u5408\u5668\u5355\u5143\u7684\u529f\u80fd\uff0c\u6700\u597d\u7684\u9009\u62e9\u662f\u4f7f\u7528OpenAL\uff0c\u5b83\u63d0\u4f9b\u4e86\u66f4\u9002\u5408\u6e38\u620f\u5e94\u7528\u7a0b\u5e8f\u7684\u66f4\u9ad8\u7ea7\u522b\u7684API\u3002 \u6709\u5173\u663e\u793a\u5982\u4f55\u4f7f\u7528OpenAL\u7684\u793a\u4f8b\u4ee3\u7801\uff0c\u8bf7\u53c2\u89c1\u793a\u4f8b\u4ee3\u7801\u9879\u76eeoalTouch\u3002"),Object(o.b)("p",null,"is the foundation upon which OpenAL is built."),Object(o.b)("p",null,"is well suited for game apps"),Object(o.b)("p",null,"The ",Object(o.b)("em",{parentName:"p"},"Multichannel Mixer unit")," provides mixing for any number of mono or stereo streams, with a stereo output. You can turn each input on or off, set its input gain, and set its stereo panning position. For a demonstration of how to use this audio unit, see the sample code project ",Object(o.b)("em",{parentName:"p"},"Audio Mixer (MixerHost)"),"."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"\u591a\u58f0\u9053\u6df7\u97f3\u5668\u5355\u5143\u53ef\u4e3a\u4efb\u610f\u6570\u91cf\u7684\u5355\u58f0\u9053\u6216\u7acb\u4f53\u58f0\u6d41\u63d0\u4f9b\u6df7\u97f3\uff0c\u5e76\u5e26\u6709\u7acb\u4f53\u58f0\u8f93\u51fa\u3002 \u60a8\u53ef\u4ee5\u6253\u5f00\u6216\u5173\u95ed\u6bcf\u4e2a\u8f93\u5165\uff0c\u8bbe\u7f6e\u5176\u8f93\u5165\u589e\u76ca\uff0c\u5e76\u8bbe\u7f6e\u5176\u7acb\u4f53\u58f0\u58f0\u50cf\u4f4d\u7f6e\u3002 \u6709\u5173\u5982\u4f55\u4f7f\u7528\u6b64\u97f3\u9891\u5355\u5143\u7684\u6f14\u793a\uff0c\u8bf7\u53c2\u89c1\u793a\u4f8b\u4ee3\u7801\u9879\u76eeAudio Mixer\uff08MixerHost\uff09\u3002"),Object(o.b)("p",{parentName:"blockquote"},"mono: \u5355\u58f0\u9053"),Object(o.b)("p",{parentName:"blockquote"},"stereo\uff1a\u7acb\u4f53\u58f0"),Object(o.b)("p",{parentName:"blockquote"},"gain\uff1a\u589e\u76ca")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"I/O Units")),Object(o.b)("p",null,"iOS provides three I/O units. The ",Object(o.b)("em",{parentName:"p"},"Remote I/O unit")," is the most commonly used. It connects to input and output audio hardware and gives you low\u2013latency access to individual incoming and outgoing audio sample values. It provides format conversion between the hardware audio formats and your application audio format, doing so by way of an included Format Converter unit. For sample code that shows how to use the Remote I/O unit, see the sample code project ",Object(o.b)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/samplecode/aurioTouch/Introduction/Intro.html#//apple_ref/doc/uid/DTS40007770"},Object(o.b)("em",{parentName:"a"},"aurioTouch")),"."),Object(o.b)("p",null,"The ",Object(o.b)("em",{parentName:"p"},"Voice-Processing I/O unit")," extends the Remote I/O unit by adding acoustic echo cancelation for use in a VoIP or voice-chat application. It also provides automatic gain correction, adjustment of voice-processing quality, and muting."),Object(o.b)("p",null,"The ",Object(o.b)("em",{parentName:"p"},"Generic Output unit")," does not connect to audio hardware but rather provides a mechanism for sending the output of a processing chain to your application. You would typically use the Generic Output unit for offline audio processing."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"individual incoming and outgoing audio sample values. \u5404\u4e2a\u4f20\u5165\u548c\u4f20\u51fa\u7684\u97f3\u9891\u6837\u672c\u503c\u3002"),Object(o.b)("p",{parentName:"blockquote"},"an included Format Converter unit. \u9644\u5e26\u7684\u683c\u5f0f\u8f6c\u6362\u5355\u5143"),Object(o.b)("p",{parentName:"blockquote"},"acoustic echo cancellation\uff1a\u58f0\u5b66\u7684\u56de\u58f0\u6d88\u9664"),Object(o.b)("p",{parentName:"blockquote"},"automatic gain correction: \u81ea\u52a8\u4fee\u6b63\u589e\u76ca"),Object(o.b)("p",{parentName:"blockquote"},"adjustment of voice-processing quality, muting: \u8bed\u97f3\u5904\u7406\u8d28\u91cf\u8c03\u6574\u548c\u9759\u97f3"),Object(o.b)("p",{parentName:"blockquote"},"offline audio processing\uff1a \u8131\u673a\u97f3\u9891\u5904\u7406"),Object(o.b)("p",{parentName:"blockquote"},"a mechanism for sending the output of a processing chaning ti you application : \u4e00\u79cd\u5c06\u5904\u7406\u94fe\u7684\u8f93\u51fa\u53d1\u9001\u5230\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u673a\u5236")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Format Converter Unit")),Object(o.b)("p",null,"iOS 4 provides one ",Object(o.b)("em",{parentName:"p"},"Format Converter unit"),", which is typically used indirectly by way of an I/O unit."),Object(o.b)("p",null,"iOS 4\u63d0\u4f9b\u4e86\u4e00\u4e2a\u683c\u5f0f\u8f6c\u6362\u5668\u5355\u5143\uff0c\u8be5\u5355\u5143\u901a\u5e38\u901a\u8fc7I / O\u5355\u5143\u95f4\u63a5\u4f7f\u7528\u3002"),Object(o.b)("p",null,"typically: \u901a\u5e38"),Object(o.b)("p",null,"by way of\uff1a \u901a\u8fc7\u7ecf\u7531\u3002"),Object(o.b)("h4",{id:"use-the-two-audio-unit-apis-in-concert"},"Use the Two Audio Unit APIs in Concert"),Object(o.b)("p",null,"iOS has one API for working with audio units directly and another for manipulating audio processing graphs. When you host audio units in your app, you use both APIs in concert."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"iOS\u6709\u4e00\u4e2aAPI\u53ef\u76f4\u63a5\u4f7f\u7528\u97f3\u9891\u5355\u5143\uff0c\u800c\u53e6\u4e00\u4e2aAPI\u53ef\u7528\u4e8e\u5904\u7406\u97f3\u9891\u5904\u7406\u56fe\u3002 \u5728\u5e94\u7528\u4e2d\u6258\u7ba1\u97f3\u9891\u5355\u5143\u65f6\uff0c\u60a8\u4f1a\u540c\u65f6\u4f7f\u7528\u4e24\u4e2aAPI\u3002"),Object(o.b)("p",{parentName:"blockquote"},"manipulating\uff1a\u64cd\u7eb5"),Object(o.b)("p",{parentName:"blockquote"},"Concert\uff1a\u97f3\u4e50\u4f1a\uff1b\u5408\u594f")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"To work with audio units directly\u2014configuring and controlling them\u2014use the functions described in ",Object(o.b)("em",{parentName:"li"},Object(o.b)("a",{parentName:"em",href:"https://developer.apple.com/documentation/audiounit/audio_unit_component_services"},"Audio Unit Component Services Reference")),"."),Object(o.b)("li",{parentName:"ul"},"To create and configure an audio processing graph (a processing chain of audio units) use the functions described in ",Object(o.b)("em",{parentName:"li"},Object(o.b)("a",{parentName:"em",href:"https://developer.apple.com/documentation/audiotoolbox/audio_unit_processing_graph_services"},"Audio Unit Processing Graph Services Reference")))),Object(o.b)("p",null,"There is some overlap between the two APIs and you are free to mix and match according to your programming style. The audio unit API and audio processing graph API each provide functions for:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Obtaining references to the dynamically-linkable libraries that define audio units"),Object(o.b)("li",{parentName:"ul"},"Instantiating audio units"),Object(o.b)("li",{parentName:"ul"},"Interconnecting audio units and attaching render callback functions"),Object(o.b)("li",{parentName:"ul"},"Starting and stopping audio flow")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"overlap\uff1a\u91cd\u53e0"),Object(o.b)("p",{parentName:"blockquote"},"you are free to mix and match\uff1a\u4f60\u53ef\u4ee5\u81ea\u7531\u7684\u6df7\u5408\u548c\u5339\u914d"),Object(o.b)("p",{parentName:"blockquote"},"Instantiating audio units\uff1a\u5b9e\u4f8b\u5316\u97f3\u9891\u5355\u5143 \uff08instantiate\uff09"),Object(o.b)("p",{parentName:"blockquote"},"Interconnecting audio units and attaching render callback functions\uff1a\u4e92\u8fde\u97f3\u9891\u5355\u5143\u5e76\u9644\u52a0\u6e32\u67d3\u56de\u8c03\u51fd\u6570")),Object(o.b)("p",null,"This document provides code examples for using both APIs but focuses on the audio processing graph API. Where there is a choice between the two APIs in your code, use the processing graph API unless you have a specific reason not to. Your code will be more compact, easier to read, and more amenable to supporting dynamic reconfiguration (see ",Object(o.b)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/AudioUnitHostingFundamentals/AudioUnitHostingFundamentals.html#//apple_ref/doc/uid/TP40009492-CH3-SW5"},"Audio Processing Graphs Provide Thread Safety"),")."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Your code will be more compact, easier to read, and more amenable to supporting dynamic reconfiguration"),Object(o.b)("p",{parentName:"blockquote"},"\u60a8\u7684\u4ee3\u7801\u5c06\u66f4\u7d27\u51d1\uff0c\u66f4\u6613\u4e8e\u9605\u8bfb\uff0c\u5e76\u4e14\u66f4\u9002\u5408\u652f\u6301\u52a8\u6001\u91cd\u65b0\u914d\u7f6e")),Object(o.b)("h4",{id:"use-identifiers-to-specify-and-obtain-audio-units"},"Use Identifiers to Specify and Obtain Audio Units"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"\u4f7f\u7528\u6807\u8bc6\u7b26\uff08Identifiers\uff09\u6765\u6307\u5b9a\uff08Specify\uff09\u548c\u83b7\u53d6\uff08Obtain\uff09\u97f3\u9891\u5355\u5143")),Object(o.b)("p",null,"To find an audio unit at runtime, start by specifying its type, subtype, and manufacturer keys in an audio component description data structure. You do this whether using the audio unit or audio processing graph API. Listing 1-1 shows how."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"To find an audio unit at runtime, start by specifying its type, subtype, and manufacturer keys in an audio component description data structure."),Object(o.b)("p",{parentName:"blockquote"},"\u8981\u5728\u8fd0\u884c\u65f6\u67e5\u627e\u97f3\u9891\u5355\u5143\uff0c\u8bf7\u5148\u5728\u97f3\u9891\u7ec4\u4ef6\u63cf\u8ff0\u6570\u636e\u7ed3\u6784\u4e2d\u6307\u5b9a\u5176\u7c7b\u578b\uff0c\u5b50\u7c7b\u578b\u548c\u5236\u9020\u5546\u5bc6\u94a5\u3002")),Object(o.b)("p",null,"Listing 1-1  Creating an audio component description to identify an audio unit"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"AudioComponentDescription ioUnitDescription;\n \nioUnitDescription.componentType          = kAudioUnitType_Output;\nioUnitDescription.componentSubType       = kAudioUnitSubType_RemoteIO;\nioUnitDescription.componentManufacturer  = kAudioUnitManufacturer_Apple;\nioUnitDescription.componentFlags         = 0;\nioUnitDescription.componentFlagsMask     = 0;\n")),Object(o.b)("p",null,"This description specifies exactly one audio unit\u2014the Remote I/O unit. The keys for this and other iOS audio units are listed in ",Object(o.b)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/UsingSpecificAudioUnits/UsingSpecificAudioUnits.html#//apple_ref/doc/uid/TP40009492-CH17-SW14"},"Identifier Keys for Audio Units"),". Note that all iOS audio units use the ",Object(o.b)("inlineCode",{parentName:"p"},"kAudioUnitManufacturer_Apple")," key for the ",Object(o.b)("inlineCode",{parentName:"p"},"componentManufacturer")," field."),Object(o.b)("p",null,"To create a wildcard description, set one or more of the type/subtype fields to 0. For example, to match all the I/O units, change Listing 1-1 to use a value of 0 for the ",Object(o.b)("inlineCode",{parentName:"p"},"componentSubType")," field."),Object(o.b)("p",null,"With a description in hand, you obtain a reference to the library for the specified audio unit (or set of audio units) using either of two APIs. The audio unit API is shown in Listing 1-2."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"With a description in hand, you obtain a reference to the library for the specified audio unit (or set of audio units) using either of two APIs."),Object(o.b)("p",{parentName:"blockquote"},"\u6709\u4e86\u63cf\u8ff0\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4e24\u4e2aAPI\u4e4b\u4e00\u83b7\u53d6\u5bf9\u6307\u5b9a\u97f3\u9891\u5355\u5143\uff08\u6216\u4e00\u7ec4\u97f3\u9891\u5355\u5143\uff09\u7684\u5e93\u7684\u5f15\u7528\u3002")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"Listing 1-2  Obtaining an audio unit instance using the audio unit API\n\nAudioComponent foundIoUnitReference = AudioComponentFindNext (\n                                          NULL,\n                                          &ioUnitDescription\n                                      );\nAudioUnit ioUnitInstance;\nAudioComponentInstanceNew (\n    foundIoUnitReference,\n    &ioUnitInstance\n);\n")),Object(o.b)("p",null,"Passing ",Object(o.b)("inlineCode",{parentName:"p"},"NULL")," to the first parameter of ",Object(o.b)("inlineCode",{parentName:"p"},"AudioComponentFindNext")," tells this function to find the first system audio unit matching the description, using a system-defined ordering. If you instead pass a previously found audio unit reference in this parameter, the function locates the next audio unit matching the description. This usage lets you, for example, obtain references to all of the I/O units by repeatedly calling ",Object(o.b)("inlineCode",{parentName:"p"},"AudioComponentFindNext"),"."),Object(o.b)("p",null,"The second parameter to the ",Object(o.b)("inlineCode",{parentName:"p"},"AudioComponentFindNext")," call refers to the audio unit description defined in ",Object(o.b)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/AudioUnitHostingFundamentals/AudioUnitHostingFundamentals.html#//apple_ref/doc/uid/TP40009492-CH3-SW4"},"Listing 1-1"),"."),Object(o.b)("p",null,"The result of the ",Object(o.b)("inlineCode",{parentName:"p"},"AudioComponentFindNext")," function is a reference to the dynamically-linkable library that defines the audio unit. Pass the reference to the ",Object(o.b)("inlineCode",{parentName:"p"},"AudioComponentInstanceNew")," function to instantiate the audio unit, as shown in ",Object(o.b)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/AudioUnitHostingFundamentals/AudioUnitHostingFundamentals.html#//apple_ref/doc/uid/TP40009492-CH3-SW9"},"Listing 1-2"),"."),Object(o.b)("p",null,"You can instead use the audio processing graph API to instantiate an audio unit. Listing 1-3 shows how."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"Listing 1-3  Obtaining an audio unit instance using the audio processing graph API\n\n// Declare and instantiate an audio processing graph\nAUGraph processingGraph;\nNewAUGraph (&processingGraph);\n \n// Add an audio unit node to the graph, then instantiate the audio unit\nAUNode ioNode;\nAUGraphAddNode (\n    processingGraph,\n    &ioUnitDescription,\n    &ioNode\n);\nAUGraphOpen (processingGraph); // indirectly performs audio unit instantiation\n \n// Obtain a reference to the newly-instantiated I/O unit\nAudioUnit ioUnit;\nAUGraphNodeInfo (\n    processingGraph,\n    ioNode,\n    NULL,\n    &ioUnit\n);\n\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"indirectly performs audio unit instantiation"),Object(o.b)("p",{parentName:"blockquote"},"\u95f4\u63a5\u6267\u884c\u97f3\u9891\u5355\u5143\u5b9e\u4f8b\u5316")),Object(o.b)("p",null,"This code listing introduces ",Object(o.b)("inlineCode",{parentName:"p"},"AUNode"),", an opaque type that represents an audio unit in the context of an audio processing graph. You receive a reference to the new audio unit instance, in the ",Object(o.b)("em",{parentName:"p"},"ioUnit")," parameter, on output of the ",Object(o.b)("inlineCode",{parentName:"p"},"AUGraphNodeInfo")," function call."),Object(o.b)("p",null,"The second parameter to the ",Object(o.b)("inlineCode",{parentName:"p"},"AUGraphAddNode")," call refers to the audio unit description defined in ",Object(o.b)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/AudioUnitHostingFundamentals/AudioUnitHostingFundamentals.html#//apple_ref/doc/uid/TP40009492-CH3-SW4"},"Listing 1-1"),"."),Object(o.b)("p",null,"Having obtained an audio unit instance, you can configure it. To do so, you need to learn about two audio unit characteristics, ",Object(o.b)("em",{parentName:"p"},"scopes")," and ",Object(o.b)("em",{parentName:"p"},"elements"),"."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"introduces : \u4ecb\u7ecd\uff1b\u5f15\u7528"),Object(o.b)("p",{parentName:"blockquote"},"an opaque type \uff1a\u4e00\u79cd\u4e0d\u900f\u660e\u7684\u7c7b\u578b"),Object(o.b)("p",{parentName:"blockquote"},"To do so, you need to learn about two audio unit characteristics, ",Object(o.b)("em",{parentName:"p"},"scopes")," and ",Object(o.b)("em",{parentName:"p"},"elements"),"."),Object(o.b)("p",{parentName:"blockquote"},"\u4e3a\u6b64\uff0c\u60a8\u9700\u8981\u4e86\u89e3\u4e24\u4e2a\u97f3\u9891\u5355\u5143\u7279\u6027\uff0c\u8303\u56f4\u548c\u5143\u7d20\u3002")),Object(o.b)("h4",{id:"use-scopes-and-elements-to-specify-parts-of-audio-units"},"Use Scopes and Elements to Specify Parts of Audio Units"),Object(o.b)("p",null,"The parts of an audio unit are organized into scopes and elements, as shown in Figure 1-2. When invoking a function to configure or control an audio unit, you specify the scope and element to identify the specific target of the function."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"are organized into scopes and elements: \u5b89\u88c5\u4f5c\u7528\u57df\u548c\u5143\u7d20\u8fdb\u884c\u7ec4\u7ec7"),Object(o.b)("p",{parentName:"blockquote"},"you specify the scope and element to identify the specific target of the function: \u4f60\u9700\u8981\u6307\u5b9a\u4f5c\u7528\u57df\u548c\u5143\u7d20\u4ee5\u6807\u8bc6\u529f\u80fd\u7684\u7279\u5b9a\u76ee\u6807")),Object(o.b)("p",null,Object(o.b)("img",{alt:"img",src:n(1e3).default})),Object(o.b)("p",null,"A ",Object(o.b)("em",{parentName:"p"},"scope")," is a programmatic context within an audio unit. Although the name ",Object(o.b)("em",{parentName:"p"},"global scope")," might suggest otherwise, these contexts are never nested. You specify the scope you are targeting by using a constant from the ",Object(o.b)("inlineCode",{parentName:"p"},"Audio Unit Scopes")," enumeration."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Although the name ",Object(o.b)("em",{parentName:"p"},"global scope")," might suggest otherwise\uff1a \u5c3d\u7ba1\u201c",Object(o.b)("em",{parentName:"p"},"global scope")," \u201d\u53ef\u80fd\u6697\u793a\u5176\u4ed6\u542b\u4e49"),Object(o.b)("p",{parentName:"blockquote"},"these contexts are never nested\uff1a \u8fd9\u4e9b\u4e0a\u4e0b\u6587\u73af\u5883\u4ece\u4e0d\u4f1a\u5d4c\u5957")),Object(o.b)("p",null,"An ",Object(o.b)("em",{parentName:"p"},"element")," is a programmatic context nested within an audio unit scope. When an element is part of an input or output scope, it is analogous to a signal bus in a physical audio device\u2014and for that reason is sometimes called a bus. These two terms\u2014",Object(o.b)("em",{parentName:"p"},"element")," and ",Object(o.b)("em",{parentName:"p"},"bus"),"\u2014refer to exactly the same thing in audio unit programming. This document uses \u201cbus\u201d when emphasizing signal flow and uses \u201celement\u201d when emphasizing a specific functional aspect of an audio unit, such the input and output elements of an I/O unit (see ",Object(o.b)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/AudioUnitHostingFundamentals/AudioUnitHostingFundamentals.html#//apple_ref/doc/uid/TP40009492-CH3-SW43"},"Essential Characteristics of I/O Units"),")."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"it is analogous to a signal bus in a physical audio device\uff1a \u4ed6\u7c7b\u4f3c\u4e8e\u7269\u7406\u97f3\u9891\u8bbe\u5907\u4e2d\u7684\u4fe1\u53f7\u603b\u7ebf"),Object(o.b)("p",{parentName:"blockquote"},"These two terms\u2014",Object(o.b)("em",{parentName:"p"},"element")," and ",Object(o.b)("em",{parentName:"p"},"bus"),"\u2014refer to exactly the same thing in audio unit programming. \uff1a \u8fd9\u4e24\u4e2a\u672f\u8bed\u5728audio unit \u7f16\u7a0b\u91cc\u9762\u6307\u7684\u662f\u5b8c\u5168\u76f8\u540c\u7684\u4e8b\u7269"),Object(o.b)("p",{parentName:"blockquote"},"when emphasizing signal flow \uff1a\u5f53\u5f3a\u8c03\u4fe1\u53f7\u6d41\u5b9a\u7684\u65f6\u5019"),Object(o.b)("p",{parentName:"blockquote"},"when emphasizing a specific functional aspect of an audio unit\uff1a\u5f53\u5f3a\u8c03audio unit \u7684\u7279\u5b9a\u529f\u80fd\u65b9\u4fbf\u3002")),Object(o.b)("p",null,"You specify an element (or bus) by its zero-indexed integer value. If setting a property or parameter that applies to a scope as a whole, specify an element value of 0."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"applies to a scope as a whole\uff1a \u5e94\u7528\u4e8e\u6574\u4e2a\u8303\u56f4"),Object(o.b)("p",{parentName:"blockquote"},"specify an element value of 0.\uff1a \u6307\u5b9aelement\u7684\u503c\u4e3a0")),Object(o.b)("p",null,"Figure 1-2 illustrates one common architecture for an audio unit, in which the numbers of elements on input and output are the same. However, various audio units use various architectures. A mixer unit, for example, might have several input elements but a single output element. You can extend what you learn here about scopes and elements to any audio unit, despite these variations in architecture."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"illustrates\uff1a\u9610\u8ff0\u4e86"),Object(o.b)("p",{parentName:"blockquote"},"despite these variations in architecture. \u5c3d\u7ba1\u67b6\u6784\u4e0a\u6709\u53d8\u5316")),Object(o.b)("p",null,"The global scope, shown at the bottom of Figure 1-2, applies to the audio unit as a whole and is not associated with any particular audio stream. It has exactly one element, namely element 0. Some properties, such as maximum frames per slice (kAudioUnitProperty_MaximumFramesPerSlice), apply only to the global scope."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"applies to the audio unit as a whole\uff1a \u5168\u5c40\u8303\u56f4\u9002\u7528\u4e8e\u6574\u4e2a\u97f3\u9891\u5355\u5143"),Object(o.b)("p",{parentName:"blockquote"},"is not associated with any particular audio stream\uff1a\u4e0d\u548c\u4efb\u4f55\u7279\u5b9a\u7684\u97f3\u9891\u6d41\u76f8\u5173\u8054"),Object(o.b)("p",{parentName:"blockquote"},"apply only to the global scope.\uff1a\u4ec5\u4ec5\u9002\u7528\u4e8e\u5168\u5c40\u4f5c\u7528\u57df"),Object(o.b)("p",{parentName:"blockquote"},"action scope\uff1a",Object(o.b)("strong",{parentName:"p"},"\u4f5c\u7528\u57df"))),Object(o.b)("p",null,"The input and output scopes participate directly in moving one or more audio streams through the audio unit. As you\u2019d expect, audio enters at the input scope and leaves at the output scope. A property or parameter may apply to an input or output scope as a whole, as is the case for the element count property (",Object(o.b)("inlineCode",{parentName:"p"},"kAudioUnitProperty_ElementCount"),"), for example. Other properties and parameters, such as the enable I/O property (",Object(o.b)("inlineCode",{parentName:"p"},"kAudioOutputUnitProperty_EnableIO"),") or the volume parameter (",Object(o.b)("inlineCode",{parentName:"p"},"kMultiChannelMixerParam_Volume"),"), apply to a specific element within a scope."),Object(o.b)("h4",{id:"use-properties-to-configure-audio-units"},"Use Properties to Configure Audio Units"),Object(o.b)("p",null,"An audio unit property is a key-value pair you can use to configure an audio unit. The key for a property is a unique integer with an associated mnemonic identifier, such as kAudioUnitProperty_MaximumFramesPerSlice = 14. Apple reserves property keys from 0 through 63999. In Mac OS X, third-party audio units make use of keys above this range."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"an associated mnemonic identifier,\uff1a \u4e00\u4e2a\u5173\u8054\u7684\u52a9\u8bb0\u6807\u8bc6\u7b26"),Object(o.b)("p",{parentName:"blockquote"},"keys above this range.\uff1a\u6b64\u8303\u56f4\u7684\u952e\u503c")),Object(o.b)("p",null,"The value for each property is of a designated data type and has a designated read/write access, as described in Audio Unit Properties Reference. To set any property on any audio unit, you use one flexible function: AudioUnitSetProperty. Listing 1-4 shows a typical use of this function, with comments highlighting how to specify the scope and element as well as indicating the key and value for the property."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"a designated data type\uff1a \u6307\u5b9a\u7684\u6570\u636e\u7c7b\u578b"),Object(o.b)("p",{parentName:"blockquote"},"a designated read/write access\uff1a\u6307\u5b9a\u7684\u8bfb\u5199\u8bbf\u95ee\u8bbf\u95ee\u6743\u9650"),Object(o.b)("p",{parentName:"blockquote"},"as well as indicating the key and value for the property.\uff1a\u4ee5\u53ca\u6307\u5b9a\u8fd9\u4e2a\u5c5e\u6027\u7684\u952e\u503c"),Object(o.b)("p",{parentName:"blockquote"},"with comments highlighting \uff1a\u6ce8\u91ca\u7740\u91cd\u8bf4\u660e\u4e86")),Object(o.b)("p",null,"listing 1-4  Using scope and element when setting a property"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"UInt32 busCount = 2;\n \nOSStatus result = AudioUnitSetProperty (\n    mixerUnit,\n    kAudioUnitProperty_ElementCount,   // the property key\n    kAudioUnitScope_Input,             // the scope to set the property on\n    0,                                 // the element to set the property on\n    &busCount,                         // the property value\n    sizeof (busCount)\n);\n")),Object(o.b)("p",null,"Here are a few properties you\u2019ll use frequently in audio unit development. Become familiar with each of these by reading its reference documentation and by exploring Apple\u2019s audio unit sample code projects such as ",Object(o.b)("em",{parentName:"p"},"Audio Mixer (MixerHost)"),":"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"kAudioOutputUnitProperty_EnableIO"),", for enabling or disabling input or output on an I/O unit. By default, output is enabled but input is disabled."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"kAudioUnitProperty_ElementCount"),", for configuring the number of input elements on a mixer unit, for example."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"kAudioUnitProperty_MaximumFramesPerSlice"),", for specifying the maximum number of frames of audio data an audio unit should be prepared to produce in response to a render call. For most audio units, in most scenarios, you must set this property as described in the reference documentation. If you don\u2019t, your audio will stop when the screen locks."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"kAudioUnitProperty_StreamFormat"),", for specifying the audio stream data format for a particular audio unit input or output bus.")),Object(o.b)("p",null,"Most property values can be set only when an audio unit is uninitialized. Such properties are not intended to be changed by the user. Some, though, such as the ",Object(o.b)("inlineCode",{parentName:"p"},"kAudioUnitProperty_PresentPreset")," property of the iPod EQ unit, and the ",Object(o.b)("inlineCode",{parentName:"p"},"kAUVoiceIOProperty_MuteOutput")," property of the Voice-Processing I/O unit, ",Object(o.b)("em",{parentName:"p"},"are")," intended to be changed while playing audio."),Object(o.b)("p",null,"To discover a property\u2019s availability, access its value, and monitor changes to its value, use the following functions:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"AudioUnitGetPropertyInfo"),"\u2014To discover whether a property is available; if it is, you are given the data size for its value and whether or not you can change the value"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"AudioUnitGetProperty"),", ",Object(o.b)("inlineCode",{parentName:"li"},"AudioUnitSetProperty"),"\u2014To get or set the value of a property"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"AudioUnitAddPropertyListener"),", ",Object(o.b)("inlineCode",{parentName:"li"},"AudioUnitRemovePropertyListenerWithUserData"),"\u2014To install or remove a callback function for monitoring changes to a property\u2019s value")),Object(o.b)("h4",{id:"use-parameters-and-uikit-to-give-users-control"},"Use Parameters and UIKit to Give Users Control"),Object(o.b)("p",null,"An ",Object(o.b)("em",{parentName:"p"},"audio unit parameter")," is a user-adjustable setting that can change while an audio unit is producing audio. Indeed, the intention of most parameters (such as volume or stereo panning position) is real-time adjustment of the processing that an audio unit is performing."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"user-adjustable setting: \u7528\u6237\u53ef\u8c03\u6574\u7684\u8bbe\u7f6e"),Object(o.b)("p",{parentName:"blockquote"},"Indeed, the intention of most parameters \uff1a\u4e8b\u5b9e\u4e0a\uff0c\u5927\u591a\u6570\u53c2\u6570\u7684\u610f\u56fe"),Object(o.b)("p",{parentName:"blockquote"},"stereo panning position\uff1a\u7acb\u4f53\u58f0\u58f0\u50cf\u4f4d\u7f6e/\u7acb\u4f53\u58f0\u5e73\u79fb")),Object(o.b)("p",null,"Like an audio unit property, an audio unit parameter is a key-value pair. The key is defined by the audio unit it applies to. It is always an enumeration constant, such as ",Object(o.b)("inlineCode",{parentName:"p"},"kMultiChannelMixerParam_Pan = 2"),", that is unique to the audio unit but not globally unique."),Object(o.b)("p",null,"Unlike property values, every parameter value is of the same type: 32-bit floating point. The permissible range for a value, and the unit of measure that it represents, are determined by the audio unit\u2019s implementation of the parameter. These and other aspects of the parameters in iOS audio units are described in ",Object(o.b)("em",{parentName:"p"},Object(o.b)("a",{parentName:"em",href:"https://developer.apple.com/documentation/audiounit/audio_unit_parameters"},"Audio Unit Parameters Reference")),"."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"32-bit floating point :32\u4f4d\u6d6e\u70b9\u578b"),Object(o.b)("p",{parentName:"blockquote"},"The permissible range for a value\uff1a\u503c\u7684\u5141\u8bb8\u8303\u56f4"),Object(o.b)("p",{parentName:"blockquote"},"the unit of measure that it represents\uff1a \u5176\u8868\u793a\u7684\u5ea6\u91cf\u5355\u4f4d"),Object(o.b)("p",{parentName:"blockquote"},"determined by the audio unit\u2019s implementation of the parameter\uff1a \u51b3\u5b9a\u4e8eaudio unit\u5bf9\u4e8e\u8fd9\u4e9b\u53c2\u6570\u7684\u5b9e\u73b0")),Object(o.b)("p",null,"To get or set a parameter value, use one of the following functions, which are fully described in ",Object(o.b)("em",{parentName:"p"},Object(o.b)("a",{parentName:"em",href:"https://developer.apple.com/documentation/audiounit/audio_unit_component_services"},"Audio Unit Component Services Reference")),":"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"AudioUnitGetParameter")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"AudioUnitSetParameter"))),Object(o.b)("p",null,"To allow users to control an audio unit, give them access to its parameters by way of a user interface. Start by choosing an appropriate class from UIKit framework to represent the parameter. For example, for an on/off feature, such as the Multichannel Mixer unit\u2019s kMultiChannelMixerParam_Enable parameter, you could use a UISwitch object. For a continuously varying feature, such as stereo panning position as provided by the kMultiChannelMixerParam_Pan parameter, you could use a UISlider object."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"an appropriate class\uff1a\u4e00\u4e2a\u5408\u9002\u7684\u7c7b"),Object(o.b)("p",{parentName:"blockquote"},"For a continuously varying feature: \u5bf9\u4e8e\u4e00\u4e2a\u6301\u7eed\u53d8\u5316\u7684\u529f\u80fd")),Object(o.b)("p",null,"Convey the value of the UIKit object\u2019s current configuration\u2014such as the position of the slider thumb for a ",Object(o.b)("inlineCode",{parentName:"p"},"UISlider"),"\u2014to the audio unit. Do so by wrapping the ",Object(o.b)("inlineCode",{parentName:"p"},"AudioUnitSetParameter")," function in an ",Object(o.b)("inlineCode",{parentName:"p"},"IBAction")," method and establishing the required connection in Interface Builder. For sample code illustrating how to do this, see the sample code project ",Object(o.b)("em",{parentName:"p"},"Audio Mixer (MixerHost)"),"."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"the slider thumb for a ",Object(o.b)("inlineCode",{parentName:"p"},"UISlider"),"\uff1a ",Object(o.b)("inlineCode",{parentName:"p"},"UISlider"),"\u7684\u6ed1\u5757"),Object(o.b)("p",{parentName:"blockquote"},"wrap\uff1a\u5c01\u88c5\uff0c\u5305\u88c5"),Object(o.b)("p",{parentName:"blockquote"},"establishing the required connection in Interface Builder\uff1a\u5efa\u7acb\u9700\u8981\u7684\u8fde\u63a5"),Object(o.b)("p",{parentName:"blockquote"},"illustrating how to do this\uff1a\u5c55\u793a\u600e\u4e48\u53bb\u7528\u8fd9\u4e2a")),Object(o.b)("h4",{id:"essential-characteristics-of-io-units"},"Essential Characteristics of I/O Units"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"I / O\u5355\u5143\u7684\u57fa\u672c\u7279\u5f81")),Object(o.b)("p",null,"I/O units are the one type of audio unit used in every audio unit app and are unusual in several ways. For both these reasons, you must become acquainted with the essential characteristics of I/O units to gain facility in audio unit programming."),Object(o.b)("p",null,"An I/O unit contains exactly two elements, as you see in Figure 1-3."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"become acquainted with\uff1a\u719f\u7ec3\u7684"),Object(o.b)("p",{parentName:"blockquote"},"gain facility in audio unit programming.\uff1a\u5728audio unit \u7f16\u7a0b\u4e2d\u83b7\u5f97\u4fbf\u5229")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Figure 1-3")," The architecture of an I/O unit"),Object(o.b)("p",null,Object(o.b)("img",{parentName:"p",src:"https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/Art/IO_unit_2x.png",alt:"img"})),Object(o.b)("p",null,"Although these two elements are parts of one audio unit, your app treats them largely as independent entities. For example, you employ the enable I/O property (",Object(o.b)("inlineCode",{parentName:"p"},"kAudioOutputUnitProperty_EnableIO"),") to enable or disable each element independently, according to the needs of your app."),Object(o.b)("p",null,"Element 1 of an I/O unit connects directly to the audio input hardware on a device, represented in the figure by a microphone. This hardware connection\u2014at the input scope of element 1\u2014is opaque to you. Your first access to audio data entering from the input hardware is at the output scope of element 1."),Object(o.b)("p",null,"Similarly, element 0 of an I/O unit connects directly the audio output hardware on a device, represented in Figure 1-3 by the loudspeaker. You can convey audio to the input scope of element 0, but its output scope is opaque."),Object(o.b)("p",null,"Working with audio units, you\u2019ll often hear the two elements of an I/O unit described not by their numbers but by name:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"The ",Object(o.b)("em",{parentName:"li"},"input element")," is element 1 (mnemonic device: the letter \u201cI\u201d of the word \u201cInput\u201d has an appearance similar to the number 1)"),Object(o.b)("li",{parentName:"ul"},"The ",Object(o.b)("em",{parentName:"li"},"output element")," is element 0 (mnemonic device: the letter \u201cO\u201d of the word \u201cOutput\u201d has an appearance similar to the number 0)")),Object(o.b)("p",null,"As you see in ",Object(o.b)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/AudioUnitHostingFundamentals/AudioUnitHostingFundamentals.html#//apple_ref/doc/uid/TP40009492-CH3-SW35"},"Figure 1-3"),", each element itself has an input scope and an output scope. For this reason, describing these parts of an I/O unit may get a bit confusing. For example, you would say that in a simultaneous I/O app, you receive audio from the output scope of the input element and send audio to the input scope of the output element. When you need to, return to this figure."),Object(o.b)("p",null,"Finally, I/O units are the only audio units capable of starting and stopping the flow of audio in an audio processing graph. In this way, the I/O unit is in charge of the audio flow in your audio unit app."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"the I/O unit is in charge of the audio flow in your audio unit app\uff1a I/O\u5355\u5143\u8d1f\u8d23\u4f60\u7684audio unit APP\u7684\u97f3\u9891\u6d41 audio flow")),Object(o.b)("h3",{id:"audio-processing-graphs-manage-audio-units"},"Audio Processing Graphs Manage Audio Units"),Object(o.b)("p",null,"An ",Object(o.b)("em",{parentName:"p"},"audio processing graph")," is a Core Foundation\u2013style opaque type, ",Object(o.b)("inlineCode",{parentName:"p"},"AUGraph"),", that you use to construct and manage an audio unit processing chain. A graph can leverage the capabilities of multiple audio units and multiple render callback functions, allowing you to create nearly any audio processing solution you can imagine."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"leverage the capabilities of multiple audio units and multiple render callback functions: \u5229\u7528 \u201cmultiple audio units and multiple render callback functions\u201d\u7684\u80fd\u529b")),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"AUGraph")," type adds thread safety to the audio unit story: It enables you to reconfigure a processing chain on the fly. For example, you could safely insert an equalizer, or even swap in a different render callback function for a mixer input, while audio is playing. In fact, the ",Object(o.b)("inlineCode",{parentName:"p"},"AUGraph")," type provides the only API in iOS for performing this sort of dynamic reconfiguration in an audio app."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"on the fly\uff1a \u52a8\u6001\u7684\uff08\u98de\u884c\u4e2d\uff09")),Object(o.b)("p",null,"The audio processing graph API uses another opaque type, AUNode, to represent an individual audio unit within the context of a graph. When using a graph, you usually interact with nodes as proxies for their contained audio units rather than interacting with the audio units directly."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"as proxies for their contained audio units\uff1a\u4f5c\u4e3a\u4ed6\u4eec\u5305\u542b\u7684audio unit \u7684proxy\uff0c\u4ee3\u7406")),Object(o.b)("p",null,"When putting a graph together, however, you must configure each audio unit, and to do that you must interact directly with the audio units by way of the audio unit API. Audio unit nodes, per se, are not configurable. In this way, constructing a graph requires you to use the both APIs, as explained in Use the Two Audio Unit APIs in Concert."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Audio unit nodes per se, are not configurable.\uff1a Audio unit nodes \uff08per se\uff09\u672c\u8eab\u662f\u4e0d\u53ef\u914d\u7f6e\u7684")),Object(o.b)("p",null,"You can also use an ",Object(o.b)("inlineCode",{parentName:"p"},"AUNode")," instance as an element in a complex graph by defining the node to represent a complete audio processing subgraph. In this case, the I/O unit at the end of the subgraph must be a Generic Output unit\u2014the one type of I/O unit that does not connect to device hardware."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"an element in a complex graph\uff1a \u590d\u6742\u56fe\u7684\u5143\u7d20")),Object(o.b)("p",null,"In broad strokes, constructing an audio processing graph entails three tasks:"),Object(o.b)("p",null,"Adding nodes to a graph\nDirectly configuring the audio units represented by the nodes\nInterconnecting the nodes"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"In broad strokes : \u5e7f\u4e49\u8303\u56f4\u5185\uff0c\u6982\u62ec\u7684\u8bf4"),Object(o.b)("p",{parentName:"blockquote"},"entails three tasks: \u9700\u89813\u4e2a\u4efb\u52a1")),Object(o.b)("p",null,"For details on these tasks and on the rest of the audio processing graph life cycle, refer to ",Object(o.b)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/ConstructingAudioUnitApps/ConstructingAudioUnitApps.html#//apple_ref/doc/uid/TP40009492-CH16-SW1"},"Constructing Audio Unit Apps"),". For a complete description of this rich API, see ",Object(o.b)("em",{parentName:"p"},Object(o.b)("a",{parentName:"em",href:"https://developer.apple.com/documentation/audiotoolbox/audio_unit_processing_graph_services"},"Audio Unit Processing Graph Services Reference")),"."),Object(o.b)("h4",{id:"an-audio-processing-graph-has-exactly-one-io-unit"},"An Audio Processing Graph Has Exactly One I/O Unit"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"\u97f3\u9891\u5904\u7406\u56fe\u53ea\u6709\u4e00\u4e2aI / O\u5355\u5143")),Object(o.b)("p",null,"Every audio processing graph has one I/O unit, whether you are doing recording, playback, or simultaneous I/O. The I/O unit can be any one of those available in iOS, depending on the needs of your app. For details on how I/O units fit into the architecture of an audio processing graph in various usage scenarios, see ",Object(o.b)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/ConstructingAudioUnitApps/ConstructingAudioUnitApps.html#//apple_ref/doc/uid/TP40009492-CH16-SW2"},"Start by Choosing a Design Pattern"),"."),Object(o.b)("p",null,"Graphs let you start and stop the flow of audio by way of the ",Object(o.b)("inlineCode",{parentName:"p"},"AUGraphStart")," and ",Object(o.b)("inlineCode",{parentName:"p"},"AUGraphStop")," functions. These functions, in turn, convey the start or stop message to the I/O unit by invoking its ",Object(o.b)("inlineCode",{parentName:"p"},"AudioOutputUnitStart")," or ",Object(o.b)("inlineCode",{parentName:"p"},"AudioOutputUnitStop")," function. In this way, a graph\u2019s I/O unit is in charge of the audio flow in the graph."),Object(o.b)("h4",{id:"audio-processing-graphs-provide-thread-safety"},"Audio Processing Graphs Provide Thread Safety"),Object(o.b)("p",null,"The audio processing graph API employs a \u201cto-do list\u201d metaphor to provide thread safety. Certain functions in this API add a unit of work to a list of changes to execute later. After you specify a complete set of changes, you then ask the graph to implement them."),Object(o.b)("p",null,"Here are some common reconfigurations supported by the audio processing graph API, along with their associated functions:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Adding or removing audio unit nodes (",Object(o.b)("inlineCode",{parentName:"li"},"AUGraphAddNode"),", ",Object(o.b)("inlineCode",{parentName:"li"},"AUGraphRemoveNode"),")"),Object(o.b)("li",{parentName:"ul"},"Adding or removing connections between nodes (",Object(o.b)("inlineCode",{parentName:"li"},"AUGraphConnectNodeInput"),", ",Object(o.b)("inlineCode",{parentName:"li"},"AUGraphDisconnectNodeInput"),")"),Object(o.b)("li",{parentName:"ul"},"Connecting a render callback function to an input bus of an audio unit (",Object(o.b)("inlineCode",{parentName:"li"},"AUGraphSetNodeInputCallback"),")")),Object(o.b)("p",null,"Let\u2019s look at an example of reconfiguring a running audio processing graph. Say, for example, you\u2019ve built a graph that includes a Multichannel Mixer unit and a Remote I/O unit, for mixed playback of two synthesized sounds. You feed the sounds to two input buses of the mixer. The mixer output goes to the output element of the I/O unit and on to the output audio hardware. Figure 1-4 depicts this architecture."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Figure 1-4")," A simple audio processing graph for playback",Object(o.b)("img",{alt:"img",src:n(1001).default})),Object(o.b)("p",null,"Now, say the user wants to insert an equalizer into one of the two audio streams. To do that, add an iPod EQ unit between the feed of one of the sounds and the mixer input that it goes to, as shown in Figure 1-5."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Figure 1-5")," The same graph after inserting an equalizer",Object(o.b)("img",{alt:"img",src:n(1002).default})),Object(o.b)("p",null,"The steps to accomplish this live reconfiguration are as follows:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Disconnect the \u201cbeats sound\u201d callback from input 1 of the mixer unit by calling ",Object(o.b)("inlineCode",{parentName:"li"},"AUGraphDisconnectNodeInput"),"."),Object(o.b)("li",{parentName:"ol"},"Add an audio unit node containing the iPod EQ unit to the graph. Do this by specifying the iPod EQ unit with an ",Object(o.b)("inlineCode",{parentName:"li"},"AudioComponentDescription")," structure, then calling ",Object(o.b)("inlineCode",{parentName:"li"},"AUGraphAddNode"),". At this point, the iPod EQ unit is instantiated but not initialized. It is owned by the graph but is not yet participating in the audio flow."),Object(o.b)("li",{parentName:"ol"},"Configure and initialize the iPod EQ unit. In this example, this entails a few things:",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"Call the ",Object(o.b)("inlineCode",{parentName:"li"},"AudioUnitGetProperty")," function to retrieve the stream format (",Object(o.b)("inlineCode",{parentName:"li"},"kAudioUnitProperty_StreamFormat"),") from the mixer input."),Object(o.b)("li",{parentName:"ul"},"Call the ",Object(o.b)("inlineCode",{parentName:"li"},"AudioUnitSetProperty")," function twice, once to set that stream format on the iPod EQ unit\u2019s input and a second time to set it on the output. (For a complete description of how to configure an iPod EQ unit, see ",Object(o.b)("a",{parentName:"li",href:"https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/UsingSpecificAudioUnits/UsingSpecificAudioUnits.html#//apple_ref/doc/uid/TP40009492-CH17-SW4"},"Using Effect Units"),".)"),Object(o.b)("li",{parentName:"ul"},"Call the ",Object(o.b)("inlineCode",{parentName:"li"},"AudioUnitInitialize")," function to allocate resources for the iPod EQ unit and prepare it to process audio. This function call is not thread-safe, but you can (and must) perform it at this point in the sequence, when the iPod EQ unit is not yet participating actively in the audio processing graph because you have not yet called the ",Object(o.b)("inlineCode",{parentName:"li"},"AUGraphUpdate")," function."))),Object(o.b)("li",{parentName:"ol"},"Attach the \u201cbeats sound\u201d callback function to the input of the iPod EQ by calling ",Object(o.b)("inlineCode",{parentName:"li"},"AUGraphSetNodeInputCallback"),".")),Object(o.b)("p",null,"In the preceding list, steps 1, 2, and 4\u2014all of them ",Object(o.b)("inlineCode",{parentName:"p"},"AUGraph*")," function calls\u2014were added to the graph\u2019s \u201cto-do\u201d list. Call ",Object(o.b)("inlineCode",{parentName:"p"},"AUGraphUpdate")," to execute these pending tasks. On successful return of the ",Object(o.b)("inlineCode",{parentName:"p"},"AUGraphUpdate")," function, the graph has been dynamically reconfigured and the iPod EQ is in place and processing audio."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"In the preceding list: \u5728\u524d\u9762\u7684\u5217\u8868"),Object(o.b)("p",{parentName:"blockquote"},"these pending tasks\uff1a \u8fd9\u4e9b\u6302\u8d77\u7684\u4efb\u52a1")),Object(o.b)("h4",{id:"audio-flows-through-a-graph-using-pull"},"Audio Flows Through a Graph Using \u201cPull\u201d"),Object(o.b)("p",null,"In an audio processing graph, the consumer calls the provider when it needs more audio data. There is a flow of requests for audio data, and this flow proceeds in a direction opposite to that of the flow of audio. Figure 1-6 illustrates this mechanism."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"There is a flow of requests for audio data\uff1a\u6709\u4e00\u4e2a\u97f3\u9891\u6570\u636e\u7684\u8bf7\u6c42\u6d41"),Object(o.b)("p",{parentName:"blockquote"},"illustrates this mechanism.: \u8bf4\u660e\u4e86\u8fd9\u4e2a\u673a\u5236"),Object(o.b)("p",{parentName:"blockquote"},"this flow proceeds in a direction opposite to that of the flow of audio.\uff1a\u8fd9\u4e2a\u6d41\u671d\u7740\u97f3\u9891\u6d41\u76f8\u8fd4\u7684\u65b9\u5411\u8fdb\u884c")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Figure 1-6")," The pull mechanism of audio data flow",Object(o.b)("img",{alt:"img",src:n(1003).default})),Object(o.b)("p",null,"Each request for a set of data is known as a ",Object(o.b)("em",{parentName:"p"},"render call")," or, informally, as a ",Object(o.b)("em",{parentName:"p"},"pull"),". The figure represents render calls as gray \u201ccontrol flow\u201d arrows. The data requested by a render call is more properly known as a set of ",Object(o.b)("em",{parentName:"p"},"audio sample frames")," (see ",Object(o.b)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/MusicAudio/Reference/CoreAudioGlossary/Glossary/core_audio_glossary.html#//apple_ref/doc/uid/TP40004453-CH210-CHDHCAJI"},"frame"),")."),Object(o.b)("p",null,"In turn, a set of audio sample frames provided in response to a render call is known as a ",Object(o.b)("em",{parentName:"p"},"slice"),". (See ",Object(o.b)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/MusicAudio/Reference/CoreAudioGlossary/Glossary/core_audio_glossary.html#//apple_ref/doc/uid/TP40004453-CH210-SW165"},"slice"),".) The code that provides the slice is known as a ",Object(o.b)("em",{parentName:"p"},"render callback function"),", described in ",Object(o.b)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/AudioUnitHostingFundamentals/AudioUnitHostingFundamentals.html#//apple_ref/doc/uid/TP40009492-CH3-SW27"},"Render Callback Functions Feed Audio to Audio Units"),"."),Object(o.b)("p",null,"Here is how the pull proceeds in Figure 1-6:"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"render call\uff1a\u6e32\u67d3\u56de\u8c03"),Object(o.b)("p",{parentName:"blockquote"},"more properly known as a set of ",Object(o.b)("em",{parentName:"p"},"audio sample frames"),"\uff1a \u66f4\u5408\u9002\u7684\u88ab\u79f0\u4e3a\u97f3\u9891\u91c7\u6837\u5e27"),Object(o.b)("p",{parentName:"blockquote"},"In turn\uff1a\u4f9d\u6b21"),Object(o.b)("p",{parentName:"blockquote"},"pull proceeds\uff1a\u62c9\u52a8\u8fc7\u7a0b")),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"After you call the ",Object(o.b)("inlineCode",{parentName:"li"},"AUGraphStart")," function, the virtual output device invokes the render callback of the Remote I/O unit\u2019s output element. This invocation asks for one slice of processed audio data frames."),Object(o.b)("li",{parentName:"ol"},"The render callback function of the Remote I/O unit looks in its input buffers for audio data to process, to satisfy the render call. If there is data waiting to be processed, the Remote I/O unit uses it. Otherwise, and as shown in the figure, it instead invokes the render callback of whatever your app has connected to its input. In this example, the Remote I/O unit\u2019s input is connected to an effect unit\u2019s output. So, the I/O unit pulls on the effect unit, asking for a slice of audio frames."),Object(o.b)("li",{parentName:"ol"},"The effect unit behaves just as the Remote I/O unit did. When it needs audio data, it gets it from its input connection. In this example, the effect unit pulls on your app\u2019s render callback function."),Object(o.b)("li",{parentName:"ol"},"Your app\u2019s render callback function is the final recipient of the pull. It supplies the requested frames to the effect unit."),Object(o.b)("li",{parentName:"ol"},"The effect unit processes the slice supplied by your app\u2019s render callback. The effect unit then supplies the processed data that were previously requested (in step 2) to the Remote I/O unit."),Object(o.b)("li",{parentName:"ol"},"The Remote I/O unit processes the slice provided by the effect unit. The Remote I/O unit then supplies the processed slice originally requested (in step 1) to the virtual output device. This completes one cycle of pull.")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"This invocation asks for one slice of processed audio data frames.\uff1a\u8fd9\u4e2a\u8c03\u7528\u8bf7\u6c42\u4e00\u4e2a\u5df2\u7ecf\u5904\u7406\u8fc7\u7684\u97f3\u9891\u6570\u636e\u5e27"),Object(o.b)("p",{parentName:"blockquote"},"looks in its input buffers for audio data to process\uff1a\u5728\u8f93\u5165\u7f13\u51b2\u533a\u4e2d\u67e5\u627e\u8981\u5904\u7406\u7684\u97f3\u9891\u6570\u636e"),Object(o.b)("p",{parentName:"blockquote"},"The effect unit behaves just as the Remote I/O unit did. :effect unit \u548cremoteI/O Unit\u7684\u8868\u73b0\u76f8\u540c\u3002\uff08\u884c\u4e3a/\u8868\u73b0\u548cremoteIO\u76f8\u540c\uff09"),Object(o.b)("p",{parentName:"blockquote"},"the final recipient of the pull\uff1a \u62c9\u53d6\u7684\u6700\u7ec8\u63a5\u6536\u8005"),Object(o.b)("p",{parentName:"blockquote"},"The effect unit processes the slice supplied by your app\u2019s render callback.\uff1a effect unit \u5c06\u5904\u7406\u4f60\u6253\u7684app call back\u7684\u6570\u636e\u3002"),Object(o.b)("p",{parentName:"blockquote"},"This completes one cycle of pull.\uff1a\u5b8c\u6210\u4e86\u4e00\u4e2a\u62c9\u52a8\u5468\u671f/\u5faa\u73af")),Object(o.b)("h3",{id:"render-callback-functions-feed-audio-to-audio-units"},"Render Callback Functions Feed Audio to Audio Units"),Object(o.b)("p",null,"To provide audio from disk or memory to an audio unit input bus, convey it using a render callback function that conforms to the AURenderCallback prototype. The audio unit input invokes your callback when it needs another slice of sample frames, as described in Audio Flows Through a Graph Using Pull."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"convey it\uff1a\u4f20\u8f93"),Object(o.b)("p",{parentName:"blockquote"},"conforms to the AURenderCallback prototype.\uff1a\u7b26\u5408 \u201cAURenderCallback\u201d \u539f\u578b")),Object(o.b)("p",null,"The process of writing a render callback function is perhaps the most creative aspect of designing and building an audio unit application. It\u2019s your opportunity to generate or alter sound in any way you can imagine and code."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"The process of writing a render callback function\uff1a \u7f16\u5199\u56de\u8c03\u51fd\u6570\u7684\u8fc7\u7a0b process\uff1a\u8fc7\u7a0b\uff0c\u5904\u7406"),Object(o.b)("p",{parentName:"blockquote"},"the most creative aspect of designing and building an audio unit application\uff1adesigning and building an audio unit application \u4e2d\u6700\u5177\u521b\u610f\u7684\u65b9\u9762"),Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"generate or alter sound in any way you can imagine and code\uff1a\u7528\u4f60\u60f3\u8c61\u548c\u7f16\u7801\u7684\u4efb\u4f55\u65b9\u5f0f\u53bb\u751f\u4ea7\u548c\u6539\u53d8\u58f0\u97f3\u3002alter\u3002"))),Object(o.b)("p",null,"At the same time, render callbacks have a strict performance requirement that you must adhere to. A render callback lives on a real-time priority thread on which subsequent render calls arrive asynchronously. The work you do in the body of a render callback takes place in this time-constrained environment. If your callback is still producing sample frames in response to the previous render call when the next render call arrives, you get a gap in the sound. For this reason you must not take locks, allocate memory, access the file system or a network connection, or otherwise perform time-consuming tasks in the body of a render callback function."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"strict performance requirement that you must adhere to.\uff1a \u4e25\u683c\u7684\u6027\u80fd\u8981\u6c42\u4f60\u5fc5\u987b\u9075\u5b88"),Object(o.b)("p",{parentName:"blockquote"},"lives on a real-time priority thread\uff1a\u9a7b\u5b88\u5728\u4e00\u4e2a\u5b9e\u65f6\u4f18\u5148\u7ea7\u7684\u7ebf\u7a0b\u4e0a"),Object(o.b)("p",{parentName:"blockquote"},"subsequent render calls arrive asynchronously. \u540e\u7eed\u6e32\u67d3\u56de\u8c03\u4f1a\u5f02\u6b65\u5230\u8fbe"),Object(o.b)("p",{parentName:"blockquote"},"takes place in this time-constrained environment.\uff1a\u53d1\u751f\u5728\u8fd9\u79cd\u65f6\u95f4\u53d7\u9650\u7684\u73af\u5883\u4e2d"),Object(o.b)("p",{parentName:"blockquote"},"otherwise perform time-consuming tasks\uff1a \u5176\u4ed6\u65b9\u5f0f\u6267\u884c\u8017\u65f6\u4efb\u52a1")),Object(o.b)("h4",{id:"understanding-the-audio-unit-render-callback-function"},"Understanding the Audio Unit Render Callback Function"),Object(o.b)("p",null,"Listing 1-5 shows the header of a render callback function that conforms to the ",Object(o.b)("inlineCode",{parentName:"p"},"AURenderCallback")," prototype. This section describes the purpose of each of its parameters in turn and explains how to use each one."),Object(o.b)("p",null,"Listing 1-5  A render callback function header"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"static OSStatus MyAURenderCallback (\n    void                        *inRefCon,\n    AudioUnitRenderActionFlags  *ioActionFlags,\n    const AudioTimeStamp        *inTimeStamp,\n    UInt32                      inBusNumber,\n    UInt32                      inNumberFrames,\n    AudioBufferList             *ioData\n) { /* callback body */ }\n")),Object(o.b)("p",null,"The ",Object(o.b)("em",{parentName:"p"},"inRefCon")," parameter points to a programmatic context you specify when attaching the callback to an audio unit input (see ",Object(o.b)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/ConstructingAudioUnitApps/ConstructingAudioUnitApps.html#//apple_ref/doc/uid/TP40009492-CH16-SW13"},"Write and Attach Render Callback Functions"),"). The purpose of this context is to provide the callback function with any audio input data or state information it needs to calculate the output audio for a given render call."),Object(o.b)("p",null,"The ",Object(o.b)("em",{parentName:"p"},"ioActionFlags")," parameter lets a callback provide a hint to the audio unit that there is no audio to process. Do this, for example, if your app is a synthetic guitar and the user is not currently playing a note. During a callback invocation for which you want to output silence, use a statement like the following in the body of the callback:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"*ioActionFlags |= kAudioUnitRenderAction_OutputIsSilence;\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"provide a hint to the audio unit that there is no audio to process.\u63d0\u4f9b\u4e00\u4e2a\u63d0\u793a\u7ed9audio unit\uff0c\u8fd9\u91cc\u6ca1\u6709audio\u9700\u8981\u5904\u7406"),Object(o.b)("p",{parentName:"blockquote"},"synthetic guitar\uff1a\u5408\u6210\u5409\u4ed6"),Object(o.b)("p",{parentName:"blockquote"},"the user is not currently playing a note.\u7528\u6237\u672a\u5728\u6f14\u594f\u97f3\u7b26"),Object(o.b)("p",{parentName:"blockquote"},"output silence\u9759\u9ed8\u8f93\u51fa")),Object(o.b)("p",null,"When you want to produce silence, you must also explicitly set the buffers pointed at by the ",Object(o.b)("em",{parentName:"p"},"ioData")," parameter to 0. There\u2019s more about this in the description for that parameter."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"the buffers pointed at by the ",Object(o.b)("em",{parentName:"p"},"ioData")," parameter ",Object(o.b)("em",{parentName:"p"},"ioData"),"\u53c2\u6570\u6307\u5411\u7684\u7f13\u51b2\u533a")),Object(o.b)("p",null,"The inTimeStamp parameter represents the time at which the callback was invoked. It contains an AudioTimeStamp structure, whose mSampleTime field is a sample-frame counter. On each invocation of the callback, the value of the mSampleTime field increments by the number in the inNumberFrames parameter. If your app is a sequencer or a drum machine, for example, you can use the mSampleTime value for scheduling sounds."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"scheduling sounds \u5b89\u6392\u58f0\u97f3")),Object(o.b)("p",null,"The inBusNumber parameter indicates the audio unit bus that invoked the callback, allowing you to branch within the callback depending on this value. In addition, when attaching a callback to an audio unit, you can specify a different context (inRefCon) for each bus."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"when attaching a callback to an audio unit \u5f53\u628a\u56de\u8c03\u6dfb\u52a0\u5230\u97f3\u9891\u5355\u5143\u65f6"),Object(o.b)("p",{parentName:"blockquote"},"you can specify a different context (inRefCon) for each bus.\u4f60\u53ef\u4ee5\u4e3a\u4e0d\u540c\u7684\u603b\u7ebf\u6307\u5b9a\u4e0d\u540c\u7684\u4e0a\u4e0b\u6587")),Object(o.b)("p",null,"The ",Object(o.b)("em",{parentName:"p"},"inNumberFrames")," parameter indicates the number of audio sample frames that the callback is being asked to provide on the current invocation. You provide those frames to the buffers in the ",Object(o.b)("em",{parentName:"p"},"ioData")," parameter."),Object(o.b)("p",null,"The ",Object(o.b)("em",{parentName:"p"},"ioData")," parameter points to the audio data buffers that the callback must fill when it is invoked. The audio you place into these buffers must conform to the audio stream format of the bus that invoked the callback."),Object(o.b)("p",null,"If you are playing silence for a particular invocation of the callback, explicitly set these buffers to 0, such as by using the ",Object(o.b)("inlineCode",{parentName:"p"},"memset")," function."),Object(o.b)("p",null,"Figure 1-7 depicts a pair of noninterleaved stereo buffers in an ",Object(o.b)("em",{parentName:"p"},"ioData")," parameter. Use the elements of the figure to visualize the details of ",Object(o.b)("em",{parentName:"p"},"ioData")," buffers that your callback needs to fill."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Figure 1-7")," The ",Object(o.b)("inlineCode",{parentName:"p"},"ioData")," buffers for a stereo render callback function",Object(o.b)("img",{alt:"img",src:n(1004).default})),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"depicts a pair of noninterleaved stereo buffers in an ",Object(o.b)("em",{parentName:"p"},"ioData")," parameter. \u5728",Object(o.b)("em",{parentName:"p"},"ioData"),"\u53c2\u6570\u63cf\u8ff0\u4e86\u4e00\u5bf9\u975e\u4ea4\u9519\u7acb\u4f53\u58f0\u7f13\u51b2\u533a")),Object(o.b)("h3",{id:"audio-stream-formats-enable-data-flow"},"Audio Stream Formats Enable Data Flow"),Object(o.b)("p",null,"When working with audio data at the individual sample level, as you are when using audio units, it\u2019s not enough to specify the correct data type to represent the audio. The layout of the bits in a single audio sample value has meaning, so a data type like Float32 or UInt16 is not expressive enough. In this section you learn about Core Audio\u2019s solution to this problem."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"The layout of the bits \u4f4d\u5e03\u5c40"),Object(o.b)("p",{parentName:"blockquote"},"not expressive enough.\u8868\u73b0\u529b\u4e0d\u591f")),Object(o.b)("h4",{id:"working-with-the-audiostreambasicdescription-structure"},"Working with the AudioStreamBasicDescription structure"),Object(o.b)("p",null,"The currency for moving audio values around in your app, and between your app and audio hardware, is the ",Object(o.b)("inlineCode",{parentName:"p"},"AudioStreamBasicDescription")," structure, shown in Listing 1-6 and described fully in ",Object(o.b)("em",{parentName:"p"},Object(o.b)("a",{parentName:"em",href:"https://developer.apple.com/documentation/coreaudio/core_audio_data_types"},"Core Audio Data Types Reference")),"."),Object(o.b)("p",null,"Listing 1-6  The AudioStreamBasicDescription structure"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-c"},"struct AudioStreamBasicDescription {\n    Float64 mSampleRate;\n    UInt32  mFormatID;\n    UInt32  mFormatFlags;\n    UInt32  mBytesPerPacket;\n    UInt32  mFramesPerPacket;\n    UInt32  mBytesPerFrame;\n    UInt32  mChannelsPerFrame;\n    UInt32  mBitsPerChannel;\n    UInt32  mReserved;\n};\ntypedef struct AudioStreamBasicDescription  AudioStreamBasicDescription;\n")),Object(o.b)("p",null,"Because the name ",Object(o.b)("inlineCode",{parentName:"p"},"AudioStreamBasicDescription")," is long, it\u2019s often abbreviated in conversation and documentation as ",Object(o.b)("em",{parentName:"p"},"ASBD"),". To define values for the fields of an ASBD, write code similar to that shown in Listing 1-7."),Object(o.b)("p",null,"Listing 1-7  Defining an ASBD for a stereo stream"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-c"},"size_t bytesPerSample = sizeof (AudioUnitSampleType);\nAudioStreamBasicDescription stereoStreamFormat = {0};\n \nstereoStreamFormat.mFormatID          = kAudioFormatLinearPCM;\nstereoStreamFormat.mFormatFlags       = kAudioFormatFlagsAudioUnitCanonical;\nstereoStreamFormat.mBytesPerPacket    = bytesPerSample;\nstereoStreamFormat.mBytesPerFrame     = bytesPerSample;\nstereoStreamFormat.mFramesPerPacket   = 1;\nstereoStreamFormat.mBitsPerChannel    = 8 * bytesPerSample;\nstereoStreamFormat.mChannelsPerFrame  = 2;           // 2 indicates stereo\nstereoStreamFormat.mSampleRate        = graphSampleRate;\n")),Object(o.b)("p",null,"To start, determine the data type to represent one audio sample value. This example uses the ",Object(o.b)("inlineCode",{parentName:"p"},"AudioUnitSampleType")," defined type, the recommended data type for most audio units. In iOS, ",Object(o.b)("inlineCode",{parentName:"p"},"AudioUnitSampleType")," is defined to be an 8.24 fixed-point integer. The first line in Listing 1-7 calculates the number of bytes in the type; that number is required when defining some of the field values of an ASBD, as you can see in the listing."),Object(o.b)("p",null,"Next, still referring to Listing 1-7, declare a variable of type ",Object(o.b)("inlineCode",{parentName:"p"},"AudioStreamBasicDescription")," and initialize its fields to 0 to ensure that no fields contain garbage data. Do not skip this zeroing step; if you do, you are certain to run into trouble later."),Object(o.b)("p",null,"Now define the ASBD field values. Specify ",Object(o.b)("inlineCode",{parentName:"p"},"kAudioFormatLinearPCM")," for the ",Object(o.b)("em",{parentName:"p"},"mFormatID")," field. Audio units use uncompressed audio data, so this is the correct format identifier to use whenever you work with audio units."),Object(o.b)("p",null,"Next, for most audio units, specify the ",Object(o.b)("inlineCode",{parentName:"p"},"kAudioFormatFlagsAudioUnitCanonical")," metaflag for the ",Object(o.b)("em",{parentName:"p"},"mFormatFlags")," field. This flag is defined in ",Object(o.b)("inlineCode",{parentName:"p"},"CoreAudio.framework/CoreAudioTypes.h")," as follows:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-c"},"kAudioFormatFlagsAudioUnitCanonical = kAudioFormatFlagIsFloat |\n                                kAudioFormatFlagsNativeEndian |\n                                     kAudioFormatFlagIsPacked |\n                             kAudioFormatFlagIsNonInterleaved\n")),Object(o.b)("p",null,"This metaflag takes care of specifying all of the layout details for the bits in a linear PCM sample value of type ",Object(o.b)("inlineCode",{parentName:"p"},"AudioUnitSampleType"),"."),Object(o.b)("p",null,"Certain audio units employ an atypical audio data format, requiring a different data type for samples and a different set of flags for the ",Object(o.b)("em",{parentName:"p"},"mFormatFlags")," field. For example, the 3D Mixer unit requires the ",Object(o.b)("inlineCode",{parentName:"p"},"UInt16")," data type for its audio sample values and requires the ASBD\u2019s ",Object(o.b)("em",{parentName:"p"},"mFormatFlags")," field to be set to ",Object(o.b)("inlineCode",{parentName:"p"},"kAudioFormatFlagsCanonical"),". When working with a particular audio unit, be careful to use the correct data format and the correct format flags. (See ",Object(o.b)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/UsingSpecificAudioUnits/UsingSpecificAudioUnits.html#//apple_ref/doc/uid/TP40009492-CH17-SW1"},"Using Specific Audio Units"),".)"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"be careful to use the correct data format and the correct format flags.\u5c0f\u5fc3\u4f7f\u7528\u6b63\u786e\u7684\u6570\u636e\u683c\u5f0f\u548c\u6b63\u786e\u7684\u683c\u5f0f\u6807\u8bc6"),Object(o.b)("p",{parentName:"blockquote"},"Certain audio units employ an atypical audio data format, \u7279\u5b9a\u7684audiounit \u9700\u8981\u91c7\u7528\u7279\u5b9a\u7684\u97f3\u9891\u6570\u636e\u683c\u5f0f")),Object(o.b)("p",null,"Continuing through ",Object(o.b)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/AudioUnitHostingFundamentals/AudioUnitHostingFundamentals.html#//apple_ref/doc/uid/TP40009492-CH3-SW32"},"Listing 1-7"),", the next four fields further specify the organization and meaning of the bits in a sample frame. Set these fields\u2014",Object(o.b)("em",{parentName:"p"},"mBytesPerPacket"),", ",Object(o.b)("em",{parentName:"p"},"mBytesPerFrame"),", ",Object(o.b)("em",{parentName:"p"},"mFramesPerPacket"),", and ",Object(o.b)("em",{parentName:"p"},"mBitsPerChannel")," fields\u2014according to the nature of the audio stream you are using. To learn the meaning of each of these fields, refer to the documentation for the ",Object(o.b)("inlineCode",{parentName:"p"},"AudioStreamBasicDescription")," structure. You can see an example of filled-out ASBDs in the sample code project ",Object(o.b)("em",{parentName:"p"},"Audio Mixer (MixerHost)"),"."),Object(o.b)("p",null,"Set the ASBD\u2019s ",Object(o.b)("em",{parentName:"p"},"mChannelsPerFrame")," field according to the number of channels in the stream\u20141 for mono audio, 2 for stereo, and so on."),Object(o.b)("p",null,"Finally, set the ",Object(o.b)("em",{parentName:"p"},"mSampleRate")," field according to the sample rate that you are using throughout your app. ",Object(o.b)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/AudioUnitHostingFundamentals/AudioUnitHostingFundamentals.html#//apple_ref/doc/uid/TP40009492-CH3-SW34"},"Understanding Where and How to Set Stream Formats")," explains the importance of avoiding sample rate conversions. ",Object(o.b)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/ConstructingAudioUnitApps/ConstructingAudioUnitApps.html#//apple_ref/doc/uid/TP40009492-CH16-SW9"},"Configure Your Audio Session")," explains how to ensure that your application\u2019s sample rate matches the audio hardware sample rate."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"avoiding sample rate conversions \u907f\u514d\u91c7\u6837\u7387\u8f6c\u6362")),Object(o.b)("p",null,"Rather than specify an ASBD field by field as you\u2019ve seen here, you can use the C++ utility methods provided in the ",Object(o.b)("inlineCode",{parentName:"p"},"CAStreamBasicDescription.h")," file (",Object(o.b)("inlineCode",{parentName:"p"},"/Developer/Extras/CoreAudio/PublicUtility/"),"). In particular, view the ",Object(o.b)("inlineCode",{parentName:"p"},"SetAUCanonical")," and ",Object(o.b)("inlineCode",{parentName:"p"},"SetCanonical")," C++ methods. These specify the correct way to derive ASBD field values given three factors:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Whether the stream is for I/O (",Object(o.b)("inlineCode",{parentName:"li"},"SetCanonical"),") or for audio processing (",Object(o.b)("inlineCode",{parentName:"li"},"SetAUCanonical"),")"),Object(o.b)("li",{parentName:"ul"},"How many channels you want the stream format to represent"),Object(o.b)("li",{parentName:"ul"},"Whether you want the stream format interleaved or noninterleaved")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Rather than ... you can \u4f60\u53ef\u4ee5...\u800c\u4e0d\u5fc5"),Object(o.b)("p",{parentName:"blockquote"},"Whether you want the stream format interleaved or noninterleaved \u60a8\u662f\u8981\u6d41\u683c\u5f0f\u662f\u4ea4\u9519\u8fd8\u662f\u975e\u4ea4\u9519")),Object(o.b)("p",null,"Whether or not you include the ",Object(o.b)("inlineCode",{parentName:"p"},"CAStreamBasicDescription.h")," file in your project to use its methods directly, Apple recommends that you study that file to learn the correct way to work with an ",Object(o.b)("inlineCode",{parentName:"p"},"AudioStreamBasicDescription")," structure."),Object(o.b)("p",null,"See ",Object(o.b)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/ConstructingAudioUnitApps/ConstructingAudioUnitApps.html#//apple_ref/doc/uid/TP40009492-CH16-SW29"},"Troubleshooting Tips")," for ideas on how to fix problems related to audio data stream formats."),Object(o.b)("p",null,"\u5173\u4e8eASBD\u7684\u7406\u89e3\u53ef\u4ee5\u53c2\u8003\uff1a",Object(o.b)("a",{parentName:"p",href:"https://www.cnblogs.com/huahuahu/p/iOS-yin-pin-kai-fa-zhiAudioStreamBasicDescription.html"},"https://www.cnblogs.com/huahuahu/p/iOS-yin-pin-kai-fa-zhiAudioStreamBasicDescription.html")),Object(o.b)("p",null,"\u9996\u5148\uff0c\u97f3\u9891\u6587\u4ef6\u7684\u4ea7\u751f\u662f\u6a21\u62df\u4fe1\u53f7->PCM\u4ee5\u540e\u7684\u6570\u5b57\u4fe1\u53f7->\u538b\u7f29\u3001\u7f16\u7801\u4ee5\u540e\u7684\u97f3\u9891\u6587\u4ef6\u3002\nPCM\u65f6\u91c7\u6837\u9891\u7387\u53eb\u505asample rate\u3002\n\u6bcf\u4e00\u6b21\u91c7\u6837\u53ef\u4ee5\u5f97\u5230\u82e5\u5e72\u91c7\u6837\u6570\u636e\uff0c\u5bf9\u5e94\u591a\u4e2achannel\u3002\n\u6bcf\u4e00\u4e2a\u91c7\u6837\u70b9\u5f97\u5230\u7684\u82e5\u5e72\u91c7\u6837\u6570\u636e\u7ec4\u5408\u8d77\u6765\uff0c\u53eb\u505a\u4e00\u4e2aframe\u3002\n\u82e5\u5e72frame\u7ec4\u5408\u8d77\u6765\u53eb\u505a\u4e00\u4e2apacket\u3002\n",Object(o.b)("inlineCode",{parentName:"p"},"mSampleRate"),"\uff0c\u5c31\u662f\u91c7\u7528\u9891\u7387\n",Object(o.b)("inlineCode",{parentName:"p"},"mBitsPerChannel"),"\uff0c\u5c31\u662f\u6bcf\u4e2a\u91c7\u6837\u6570\u636e\u7684\u4f4d\u6570\n",Object(o.b)("inlineCode",{parentName:"p"},"mChannelsPerFrame"),",\u53ef\u4ee5\u7406\u89e3\u4e3a\u58f0\u9053\u6570\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2a\u91c7\u6837\u65f6\u523b\u4ea7\u751f\u51e0\u4e2a\u91c7\u6837\u6570\u636e\u3002\n",Object(o.b)("inlineCode",{parentName:"p"},"mFramesPerPacket"),"\uff0c\u5c31\u662f\u6bcf\u4e2apacket\u7684\u4e2dframe\u7684\u4e2a\u6570\uff0c\u7b49\u4e8e\u8fd9\u4e2apacket\u4e2d\u7ecf\u5386\u4e86\u51e0\u6b21\u91c7\u6837\u95f4\u9694\u3002\n",Object(o.b)("inlineCode",{parentName:"p"},"mBytesPerPacket"),"\uff0c\u6bcf\u4e2apacket\u4e2d\u6570\u636e\u7684\u5b57\u8282\u6570\u3002\n",Object(o.b)("inlineCode",{parentName:"p"},"mBytesPerFrame"),"\uff0c\u6bcf\u4e2aframe\u4e2d\u6570\u636e\u7684\u5b57\u8282\u6570"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"\u8ba1\u7b97\u516c\u5f0f")),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"\u8ba1\u7b97\u6bcf\u4e2apacket\u7684\u6301\u7eed\u65f6\u95f4"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre"},"duration = (1 / mSampleRate) * mFramesPerPacket\n"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"\u8ba1\u7b97",Object(o.b)("inlineCode",{parentName:"p"},"mBitsPerChannel"),"\n\u5bf9\u4e8e",Object(o.b)("inlineCode",{parentName:"p"},"kAudioFormatFlagsCanonical"),"\u7684PCM\u6570\u636e\uff0c\u6709\u4ee5\u4e0b\u516c\u5f0f\u3002\u5927\u6982\u6bcf\u4e2a\u91c7\u6837\u6570\u636e\u7684\u5b57\u8282\u6570\u7528",Object(o.b)("inlineCode",{parentName:"p"},"AudioSampleType"),"\u63cf\u8ff0\u3002"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre"},"mBitsPerChannel = 8 * sizeof (AudioSampleType);\n"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"\u8ba1\u7b97",Object(o.b)("inlineCode",{parentName:"p"},"mBytesPerFrame")),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre"},"mBytesPerFrame = n * sizeof (AudioSampleType);\n")),Object(o.b)("p",{parentName:"li"},"\u5176\u4e2dn\u662f\u58f0\u9053\u6570\u76ee"))),Object(o.b)("h4",{id:"understanding-where-and-how-to-set-stream-formats"},"Understanding Where and How to Set Stream Formats"),Object(o.b)("p",null,"You must set the audio data stream format at critical points in an audio processing graph. At other points, the system sets the format. At still other points, audio unit connections propagate a stream format from one audio unit to another."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"at critical points \u5173\u952e\u70b9"),Object(o.b)("p",{parentName:"blockquote"},"connections propagate \u8fde\u63a5\u4f20\u64ad")),Object(o.b)("p",null,"The audio input and output hardware on an iOS device have system-determined audio stream formats. These formats are always uncompressed, in linear PCM format, and interleaved. The system imposes these formats on the outward-facing sides of the I/O unit in an audio processing graph, as depicted in Figure 1-8."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"imposes these formats on the outward-facing sides of the I/O unit \u5c06\u8fd9\u4e9b\u683c\u5f0f\u5f3a\u52a0\u5230I/OUnit\u7684\u5916\u4fa7\u9762")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Figure 1-8")," Where to set audio data stream formats",Object(o.b)("img",{alt:"img",src:n(1005).default})),Object(o.b)("p",null,"In the figure, the microphone represents the input audio hardware. The system determines the input hardware\u2019s audio stream format and imposes it onto the input scope of the Remote I/O unit\u2019s input element."),Object(o.b)("p",null,"Similarly, the loudspeakers in the figure represent the output audio hardware. The system determines the output hardware\u2019s stream format and imposes it onto the output scope of the Remote I/O unit\u2019s output element."),Object(o.b)("p",null,"Your application is responsible for establishing the audio stream formats on the inward-facing sides of the I/O unit\u2019s elements. The I/O unit performs any necessary conversion between your application formats and the hardware formats. Your application is also responsible for setting stream formats wherever else they are required in a graph. In some cases, such as at the output of the Multichannel Mixer unit in Figure 1-8, you need to set only a portion of the format\u2014specifically, the sample rate. ",Object(o.b)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/ConstructingAudioUnitApps/ConstructingAudioUnitApps.html#//apple_ref/doc/uid/TP40009492-CH16-SW2"},"Start by Choosing a Design Pattern")," shows you where to set stream formats for various types of audio unit apps. ",Object(o.b)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/UsingSpecificAudioUnits/UsingSpecificAudioUnits.html#//apple_ref/doc/uid/TP40009492-CH17-SW1"},"Using Specific Audio Units")," lists the stream format requirements for each iOS audio unit."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"is responsible for \u8d1f\u8d23"),Object(o.b)("p",{parentName:"blockquote"},"the inward-facing sides of the I/O unit\u2019s elements.  \u5185\u5411\u4fa7\u9762")),Object(o.b)("p",null,"A key feature of an audio unit connection, as shown in Figure 1-8, is that the connection propagates the audio data stream format from the output of its source audio unit to the input of its destination audio unit. This is a critical point so it bears emphasizing: Stream format propagation takes place by way of an audio unit connection and in one direction only\u2014from the output of a source audio unit to an input of a destination audio unit."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"A key feature \u4e00\u4e2a\u5173\u952e\u529f\u80fd"),Object(o.b)("p",{parentName:"blockquote"},"This is a critical point \u8fd9\u662f\u4e00\u4e2a\u5173\u952e\u70b9"),Object(o.b)("p",{parentName:"blockquote"},"so it bears emphasizing \u56e0\u6b64\u9700\u8981\u5f3a\u8c03"),Object(o.b)("p",{parentName:"blockquote"},"Stream format propagation takes place by way of an audio unit connection\uff1a\u6d41\u683c\u5f0f\u4f20\u64ad\u662f\u901a\u8fc7audiounit \u8fde\u63a5\u8fdb\u884c\u7684")),Object(o.b)("p",null,"\bTake advantage of format propagation. It can significantly reduce the amount of code you need to write. For example, when connecting the output of a Multichannel Mixer unit to the Remote I/O unit for playback, you do not need to set the stream format for the I/O unit. It is set appropriately by the connection between the audio units, based on the output stream format of the mixer (see Figure 1-8)."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"format propagation \u683c\u5f0f\u4f20\u64ad")),Object(o.b)("p",null,"Stream format propagation takes place at one particular point in an audio processing graph\u2019s life cycle\u2014namely, upon initialization. See Initialize and Start the Audio Processing Graph."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Stream format propagation \u6d41\u683c\u5f0f\u4f20\u64ad"),Object(o.b)("p",{parentName:"blockquote"},"namely, upon initialization.\u5373 \u521d\u59cb\u5316\u65f6")),Object(o.b)("p",null,"You have great flexibility in defining your application audio stream formats. However, whenever possible, use the sample rate that the hardware is using. When you do, the I/O unit need not perform sample rate conversion. This minimizes energy usage\u2014an important consideration in a mobile device\u2014and maximizes audio quality. To learn about working with the hardware sample rate, see Configure Your Audio Session."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"maximizes audio quality \u97f3\u9891\u8d28\u91cf\u6700\u5927\u5316")),Object(o.b)("h2",{id:"constructing-audio-unit-apps"},"Constructing Audio Unit Apps"),Object(o.b)("p",null,"Now that you understand how audio unit hosting works, as explained in ",Object(o.b)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/AudioUnitHostingFundamentals/AudioUnitHostingFundamentals.html#//apple_ref/doc/uid/TP40009492-CH3-SW11"},"Audio Unit Hosting Fundamentals"),", you are well prepared to build the audio unit portion of your app. The main steps are choosing a design pattern and then writing the code to implement that pattern."),Object(o.b)("h3",{id:"start-by-choosing-a-design-pattern"},"Start by Choosing a Design Pattern"),Object(o.b)("p",null,"There are a half dozen basic design patterns for hosting audio units in an iOS app. Begin by picking the one that most closely represents what you want your app to do with audio. As you learn each pattern, notice the common features. Every pattern:"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"a half dozen \uff1a 6\u4e2a\uff08 \u4e00\u6253\uff08dozen\uff09\u7684\u4e00\u534a\uff09")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Has exactly one I/O unit."),Object(o.b)("li",{parentName:"ul"},"Uses a single audio stream format throughout the audio processing graph\u2014although there can be variations on that format, such as mono and stereo streams feeding a mixer unit."),Object(o.b)("li",{parentName:"ul"},"Requires that you set the stream format, or portions of the stream format, at specific locations.")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"at specific locations\uff1a \u5728\u7279\u5b9a\u7684\u4f4d\u7f6e")),Object(o.b)("p",null,"Setting stream formats correctly is essential to establishing audio data flow. Most of these patterns rely on automatic propagation of audio stream formats from source to destination, as provided by an audio unit connection. Take advantage of this propagation when you can because it reduces the amount of code to write and maintain. At the same time, be sure that you understand where it is required for you to set stream formats. For example, you must set the full stream format on the input ",Object(o.b)("em",{parentName:"p"},"and")," output of an iPod EQ unit. Refer to the usage tables in ",Object(o.b)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/UsingSpecificAudioUnits/UsingSpecificAudioUnits.html#//apple_ref/doc/uid/TP40009492-CH17-SW1"},"Using Specific Audio Units")," for all iOS audio unit stream format requirements."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"is essential to \u57fa\u672c\u7684\u81f3\u5173\u91cd\u8981\u7684"),Object(o.b)("p",{parentName:"blockquote"},"automatic propagation\uff1a\u81ea\u52a8\u4f20\u64ad"),Object(o.b)("p",{parentName:"blockquote"},"the full stream format\uff1a\u5b8c\u6574\u6d41\u683c\u5f0f"),Object(o.b)("p",{parentName:"blockquote"},"the usage tables \uff1a\u7528\u6cd5\u8868")),Object(o.b)("p",null,"In most cases, the design patterns in this chapter employ an audio processing graph (of type AUGraph). You could implement any one of these patterns without using a graph, but using one simplifies the code and supports dynamic reconfiguration, as described in Audio Processing Graphs Manage Audio Units."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"employ an audio processing graph \u4f7f\u7528audio unit \u56fe"),Object(o.b)("p",{parentName:"blockquote"},"using one simplifies the code and supports dynamic reconfiguration, \u4f7f\u7528\u4e00\u79cd\u7b80\u5316\u4ee3\u7801\u548c\u652f\u6301\u52a8\u6001\u914d\u7f6e")),Object(o.b)("h4",{id:"io-pass-through"},"I/O Pass Through"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"I/O\u76f4\u901a")),Object(o.b)("p",null,"The I/O pass-through pattern sends incoming audio directly to the output hardware, with no option to work with the audio data. Although this isn\u2019t of much practical value, building an audio unit hosting app based on this pattern is a good way to verify and cement your understanding of audio unit concepts. Figure 2-1 illustrates this pattern."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"verify and cement your understanding of audio unit concepts: \u9a8c\u8bc1\u548c\u5de9\u56fa\u60a8\u5bf9audio unit \u7684\u7406\u89e3")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Figure 2-1")," Simultaneous I/O pass through",Object(o.b)("img",{alt:"img",src:n(1006).default})),Object(o.b)("p",null,"As you can see in the figure, the audio input hardware imposes its stream format on the outward-facing side of the Remote I/O unit\u2019s input element. You, in turn, specify the format that you want to use on the inward-facing side of this element. The audio unit performs format conversion as needed. To avoid unnecessary sample rate conversion, be sure to use the audio hardware sample rate when defining your stream format."),Object(o.b)("p",null,"The input element is disabled by default, so be sure to enable it; otherwise, audio cannot flow."),Object(o.b)("p",null,"The pattern shown in Figure 2-1 takes advantage of the audio unit connection between the two Remote I/O elements. Specifically, you do not set a stream format on the input scope of the audio unit\u2019s output element. The connection propagates the format you specified for the input element."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"The connection propagates the format you specified for the input element. \u8fde\u63a5\u4f20\u64ad\uff08\u60a8\u4e3a\u8f93\u5165\u5143\u7d20\u6307\u5b9a\u7684\uff09\u683c\u5f0f")),Object(o.b)("p",null,"The outward-facing side of the output element takes on the audio output hardware\u2019s stream format, and the output element performs format conversion for the outgoing audio as needed."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"as needed. \u6839\u636e\u9700\u8981")),Object(o.b)("p",null,"Using this pattern, you need not configure any audio data buffers."),Object(o.b)("h4",{id:"io-without-a-render-callback-function"},"I/O Without a Render Callback Function"),Object(o.b)("p",null,"Adding one or more other audio units between the Remote I/O unit\u2019s elements lets you construct a more interesting app. For example, you could use a Multichannel Mixer unit to position the incoming microphone audio in a stereo field or to provide output volume control. In this design pattern, there is still no callback function in play, as shown in Figure 2-2. This simplifies the pattern but limits its utility. Without a render callback function you don\u2019t have a means to manipulate the audio directly."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"position the incoming microphone audio \u653e\u7f6e\u9ea6\u514b\u98ce\u7684\u8f93\u5165\u97f3\u9891"),Object(o.b)("p",{parentName:"blockquote"},"This simplifies the pattern \u8fd9\u7b80\u5316\u4e86\u6a21\u5f0f"),Object(o.b)("p",{parentName:"blockquote"},"limits its utility \u9650\u5236\u4e86\u529f\u80fd")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Figure 2-2")," Simultaneous I/O without a render callback function",Object(o.b)("img",{alt:"img",src:n(1007).default})),Object(o.b)("p",null,"In this pattern, you configure both elements of the Remote I/O unit just as you do in the pass-through pattern. To set up the Multichannel Mixer unit, you must set the sample rate of your stream format on the mixer output, as indicated in Figure 2-2."),Object(o.b)("p",null,"The mixer\u2019s input stream format is established automatically by propagation from the output of the Remote I/O unit\u2019s input element, by way of the audio unit connection. Similarly, the stream format for the input scope of the Remote I/O unit\u2019s output element is established by the audio unit connection, thanks to propagation from the mixer unit output."),Object(o.b)("p",null,"In any instance of this pattern\u2014indeed, whenever you use other audio units in addition to an I/O unit\u2014you must set the ",Object(o.b)("inlineCode",{parentName:"p"},"kAudioUnitProperty_MaximumFramesPerSlice")," property as described in ",Object(o.b)("em",{parentName:"p"},Object(o.b)("a",{parentName:"em",href:"https://developer.apple.com/documentation/audiounit/audio_unit_properties"},"Audio Unit Properties Reference")),"."),Object(o.b)("p",null,"As with the pass-through pattern, you need not configure any audio data buffers."),Object(o.b)("p",null,"\u7406\u89e3\uff1a\u8fde\u63a5\u8f93\u5165\u6e90(\u8fd9\u91cc\u662f\u9ea6\u514b\u98ce) Remote I/O unit \u7684Element \u662f Input Element \u8fde\u63a5\u8f93\u51fa\u7684 Element \u662foutput Element\u3002 \u6bcf\u4e2aelement \u6709\u5206\u4e3ainput scope \u548c output scope\u3002"),Object(o.b)("h4",{id:"io-with-a-render-callback-function"},"I/O with a Render Callback Function"),Object(o.b)("p",null,"By placing a render callback function between the input and output elements of a Remote I/O unit, you can manipulate incoming audio before it reaches the output hardware. In a very simple case, you could use the render callback function to adjust output volume. However, you could add tremolo, ring-modulation, echo, or other effects. By making use of the Fourier transforms and convolution functions available in the Accelerate framework (see ",Object(o.b)("em",{parentName:"p"},Object(o.b)("a",{parentName:"em",href:"https://developer.apple.com/documentation/accelerate"},"Accelerate Framework Reference")),"), your possibilities are endless. This pattern is depicted in Figure 2-3."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"However, you could add tremolo, ring-modulation, echo, or other effects. \u4f60\u53ef\u4ee5\u6dfb\u52a0\u98a4\u97f3\uff0c\u632f\u94c3\u8c03\u5236\uff0c\u56de\u58f0\u548c\u5176\u4ed6\u6548\u679c"),Object(o.b)("p",{parentName:"blockquote"},"By making use of the Fourier transforms and convolution functions available in the Accelerate framework (see ",Object(o.b)("em",{parentName:"p"},Object(o.b)("a",{parentName:"em",href:"https://developer.apple.com/documentation/accelerate"},"Accelerate Framework Reference")),"), your possibilities are endless.  \u901a\u8fc7\u5229\u7528\uff08Accelerate\u6846\u67b6\u4e2d\u53ef\u7528\u7684\uff09Fourier\u53d8\u6362\u548c\u5377\u79ef\u51fd\u6570\uff08\u8bf7\u53c2\u9605Accelerate Framework Reference\uff09\uff0c\u60a8\u7684\u53ef\u80fd\u6027\u662f\u65e0\u9650\u7684\u3002")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Figure 2-3")," Simultaneous I/O with a render callback function",Object(o.b)("img",{alt:"img",src:n(1008).default})),Object(o.b)("p",null,"As you can see in the figure, this pattern uses both elements of the Remote I/O unit, as in the previous patterns in this chapter. Attach your render callback function to the input scope of the output element. When that element needs another set of audio sample values, it invokes your callback. Your callback, in turn, obtains fresh samples by invoking the render callback function of the Remote I/O unit\u2019s input element."),Object(o.b)("p",null,"Just as for the other I/O patterns, you must explicitly enable input on the Remote I/O unit, because input is disabled by default. And, as for the other I/O patterns, you need not configure any audio data buffers."),Object(o.b)("p",null,"Notice that when you establish an audio path from one audio unit to another using a render callback function, as in this pattern, the callback takes the place of an audio unit connection."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"the callback takes the place of an audio unit connection. \u56de\u8c03\u5c06\u53d6\u4ee3\u97f3\u9891\u8fde\u63a5")),Object(o.b)("h4",{id:"output-only-with-a-render-callback-function"},"Output-Only with a Render Callback Function"),Object(o.b)("p",null,"Choose this pattern for musical games and synthesizers\u2014apps for which you are generating sounds and need maximum responsiveness. At its simplest, this pattern involves one render callback function connected directly to the input scope of a Remote I/O unit\u2019s output element, as shown in Figure 2-4."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"musical games and synthesizers \u58f0\u97f3\u6e38\u620f\u548c\u5408\u6210\u5668"),Object(o.b)("p",{parentName:"blockquote"},"need maximum responsiveness \u9700\u8981\u6700\u5927\u54cd\u5e94\u5ea6")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Figure 2-4")," Output-only with a render callback function",Object(o.b)("img",{alt:"img",src:n(1009).default})),Object(o.b)("p",null,"You can use this same pattern to build an app with a more complex audio structure. For example, you might want to generate several sounds, mix them together, and then play them through the device\u2019s output hardware. Figure 2-5 shows such a case. Here, the pattern employs an audio processing graph and two additional audio units, a Multichannel Mixer and an iPod EQ."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Figure 2-5")," A more complex example of output-only with a render callback function",Object(o.b)("img",{alt:"img",src:n(1010).default})),Object(o.b)("p",null,"In the figure, notice that the iPod EQ requires you to set your full stream format on both input and output. The Multichannel Mixer, on the other hand, needs only the correct sample rate to be set on its output. The full stream format is then propagated by the audio unit connection from the mixer\u2019s output to the input scope of the Remote I/O unit\u2019s output element. These usage details, and other specifics of using the various iOS audio units, are described in ",Object(o.b)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/UsingSpecificAudioUnits/UsingSpecificAudioUnits.html#//apple_ref/doc/uid/TP40009492-CH17-SW1"},"Using Specific Audio Units"),"."),Object(o.b)("p",null,"For each of the Multichannel Mixer unit inputs, as you see in Figure 2-5, the full stream format is set. For input 0, you set it explicitly. For input 1, the format is propagated by the audio unit connection from the output of the iPod EQ unit. In general, you must account for the stream-format needs of each audio unit individually."),Object(o.b)("h4",{id:"other-audio-unit-hosting-design-patterns"},"Other Audio Unit Hosting Design Patterns"),Object(o.b)("p",null,"There are two other main design patterns for audio units hosting. To record or analyze audio, create an input-only app with a render callback function. The callback function is invoked by your application, and it in turn invokes the render method of the Remote I/O unit\u2019s input element. However, in most cases, a better choice for an app like this is to use an input audio queue object (of type ",Object(o.b)("inlineCode",{parentName:"p"},"AudioQueueRef")," instantiated using the ",Object(o.b)("inlineCode",{parentName:"p"},"AudioQueueNewInput")," function), as explained in ",Object(o.b)("em",{parentName:"p"},Object(o.b)("a",{parentName:"em",href:"https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioQueueProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40005343"},"Audio Queue Services Programming Guide")),". Using an audio queue object provides a great deal more flexibility because its render callback function is not on a realtime thread."),Object(o.b)("p",null,"To perform offline audio processing, use a Generic Output unit. Unlike the Remote I/O unit, this audio unit does not connect to the device\u2019s audio hardware. When you use it to send audio to your application, it depends on your application to invoke its render method."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"\u97f3\u9891\u5355\u5143\u6258\u7ba1\u8fd8\u6709\u5176\u4ed6\u4e24\u79cd\u4e3b\u8981\u8bbe\u8ba1\u6a21\u5f0f\u3002 \u8981\u5f55\u5236\u6216\u5206\u6790\u97f3\u9891\uff0c\u8bf7\u521b\u5efa\u5177\u6709\u6e32\u67d3\u56de\u8c03\u529f\u80fd\u7684\u4ec5\u8f93\u5165\u5e94\u7528\u7a0b\u5e8f\u3002 \u56de\u8c03\u51fd\u6570\u7531\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u8c03\u7528\uff0c\u5e76\u4f9d\u6b21\u8c03\u7528\u8fdc\u7a0bI / O\u5355\u5143\u7684input\u5143\u7d20\u7684render\u65b9\u6cd5\u3002 \u4f46\u662f\uff0c\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u5bf9\u4e8e\u50cf\u8fd9\u6837\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u66f4\u597d\u7684\u9009\u62e9\u662f\u4f7f\u7528\u8f93\u5165\u97f3\u9891\u961f\u5217\u5bf9\u8c61\uff08\u4f7f\u7528AudioQueueNewInput\u51fd\u6570\u5b9e\u4f8b\u5316\u7684AudioQueueRef\u7c7b\u578b\uff09\uff0c\u5982\u300a\u97f3\u9891\u961f\u5217\u670d\u52a1\u7f16\u7a0b\u6307\u5357\u300b\u4e2d\u6240\u8ff0\u3002 \u4f7f\u7528\u97f3\u9891\u961f\u5217\u5bf9\u8c61\u53ef\u63d0\u4f9b\u66f4\u5927\u7684\u7075\u6d3b\u6027\uff0c\u56e0\u4e3a\u5176\u6e32\u67d3\u56de\u8c03\u51fd\u6570\u4e0d\u5728\u5b9e\u65f6\u7ebf\u7a0b\u4e0a\u3002"),Object(o.b)("p",{parentName:"blockquote"},"\u8981\u6267\u884c\u79bb\u7ebf\u97f3\u9891\u5904\u7406\uff0c\u8bf7\u4f7f\u7528\u901a\u7528\u8f93\u51fa\u5355\u5143\u3002 \u4e0e\u8fdc\u7a0bI / O\u5355\u5143\u4e0d\u540c\uff0c\u6b64\u97f3\u9891\u5355\u5143\u672a\u8fde\u63a5\u5230\u8bbe\u5907\u7684\u97f3\u9891\u786c\u4ef6\u3002 \u5f53\u60a8\u4f7f\u7528\u5b83\u5411\u5e94\u7528\u7a0b\u5e8f\u53d1\u9001\u97f3\u9891\u65f6\uff0c\u5b83\u53d6\u51b3\u4e8e\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u8c03\u7528\u5176render\u65b9\u6cd5\u3002")),Object(o.b)("h3",{id:"constructing-your-app"},"Constructing Your App"),Object(o.b)("p",null,"No matter which design pattern you choose, the steps for constructing an audio unit hosting app are basically the same:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Configure your audio session."),Object(o.b)("li",{parentName:"ol"},"Specify audio units."),Object(o.b)("li",{parentName:"ol"},"Create an audio processing graph, then obtain the audio units."),Object(o.b)("li",{parentName:"ol"},"Configure the audio units."),Object(o.b)("li",{parentName:"ol"},"Connect the audio unit nodes."),Object(o.b)("li",{parentName:"ol"},"Provide a user interface."),Object(o.b)("li",{parentName:"ol"},"Initialize and then start the audio processing graph.")),Object(o.b)("h4",{id:"configure-your-audio-session"},"Configure Your Audio Session"),Object(o.b)("p",null,"The first step in building an audio unit application is the same step as for any iOS audio application: You configure the audio session. The characteristics of the audio session largely determine your app\u2019s audio capabilities as well as its interactivity with the rest of the system. Start by specifying the sample rate you want to use in your application, as shown here:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"self.graphSampleRate = 44100.0; // Hertz\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"The characteristics of the audio session\u3002 audio session\u7684\u7279\u6027")),Object(o.b)("p",null,"Next, employ the audio session object to request that the system use your preferred sample rate as the device hardware sample rate, as shown in Listing 2-1. The intent here is to avoid sample rate conversion between the hardware and your app. This maximizes CPU performance and sound quality, and minimizes battery drain."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"The intent here is \u8fd9\u4e2a\u7684\u76ee\u7684\u5c31\u662f"),Object(o.b)("p",{parentName:"blockquote"},"maximizes CPU performance and sound quality:\u6700\u5927\u5316CPU\u6027\u80fd\uff0c\u548c\u58f0\u97f3\u8d28\u91cf"),Object(o.b)("p",{parentName:"blockquote"},"minimizes battery drain \u6700\u5c0f\u5316\u7535\u6c60\u635f\u8017")),Object(o.b)("p",null,"Listing 2-1  Configuring an audio session"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"NSError *audioSessionError = nil;\nAVAudioSession *mySession = [AVAudioSession sharedInstance];     // 1\n[mySession setPreferredHardwareSampleRate: graphSampleRate       // 2\n                                    error: &audioSessionError];\n[mySession setCategory: AVAudioSessionCategoryPlayAndRecord      // 3\n                                    error: &audioSessionError];\n[mySession setActive: YES                                        // 4\n               error: &audioSessionError];\nself.graphSampleRate = [mySession currentHardwareSampleRate];    // 5\n")),Object(o.b)("p",null,"The preceding lines do the following:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Obtain a reference to the singleton audio session object for your application."),Object(o.b)("li",{parentName:"ol"},"Request a hardware sample rate. The system may or may not be able to grant the request, depending on other audio activity on the device."),Object(o.b)("li",{parentName:"ol"},"Request the audio session category you want. The \u201cplay and record\u201d category, specified here, supports audio input and output."),Object(o.b)("li",{parentName:"ol"},"Request activation of your audio session."),Object(o.b)("li",{parentName:"ol"},"After audio session activation, update your own sample rate variable according to the actual sample rate provided by the system.")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"The system may or may not be able to grant the request \u7cfb\u7edf\u53ef\u80fd\u4e0d\u4f1a\u6279\u51c6\u60a8\u7684\u8bf7\u6c42")),Object(o.b)("p",null,"There\u2019s one other hardware characteristic you may want to configure: audio hardware I/O buffer duration. The default duration is about 23 ms at a 44.1 kHz sample rate, equivalent to a slice size of 1,024 samples. If I/O latency is critical in your app, you can request a smaller duration, down to about 0.005 ms (equivalent to 256 samples), as shown here:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"self.ioBufferDuration = 0.005;\n[mySession setPreferredIOBufferDuration: ioBufferDuration\n                                  error: &audioSessionError];\n")),Object(o.b)("p",null,"For a complete explanation of how to configure and use the audio session object, see ",Object(o.b)("em",{parentName:"p"},Object(o.b)("a",{parentName:"em",href:"https://developer.apple.com/library/archive/documentation/Audio/Conceptual/AudioSessionProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40007875"},"Audio Session Programming Guide")),"."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"equivalent to : \u76f8\u5f53\u4e8e"),Object(o.b)("p",{parentName:"blockquote"},"If I/O latency is critical in your app\uff1a \u5982\u679cIO\u5ef6\u8fdf\u5728\u4f60APP\u4e2d\u5f88\u5173\u952e \uff08critical  \u6311\u5254\u7684\u51b3\u5b9a\u6027\u7684\uff09")),Object(o.b)("h4",{id:"specify-the-audio-units-you-want"},"Specify the Audio Units You Want"),Object(o.b)("p",null,"At runtime, after your audio session configuration code has run, your app has not yet acquired audio units. You specify each one that you want by using an ",Object(o.b)("inlineCode",{parentName:"p"},"AudioComponentDescription")," structure. See ",Object(o.b)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/AudioUnitHostingFundamentals/AudioUnitHostingFundamentals.html#//apple_ref/doc/uid/TP40009492-CH3-SW19"},"Use Identifiers to Specify and Obtain Audio Units")," for how to do this. The identifier keys for each iOS audio unit are listed in ",Object(o.b)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/UsingSpecificAudioUnits/UsingSpecificAudioUnits.html#//apple_ref/doc/uid/TP40009492-CH17-SW14"},"Identifier Keys for Audio Units"),"."),Object(o.b)("p",null,"Audio unit specifiers in hand, you then build an audio processing graph according to the pattern you\u2019ve picked."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"your app has not yet acquired audio units : \u4f60\u7684\u5e94\u7528\u5c1a\u672a\u83b7\u53d6\u5230audio units")),Object(o.b)("h4",{id:"build-an-audio-processing-graph"},"Build an Audio Processing Graph"),Object(o.b)("p",null,"In this step, you create the skeleton of one of the design patterns explained in the first part of this chapter. Specifically, you:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Instantiate an ",Object(o.b)("inlineCode",{parentName:"li"},"AUGraph")," opaque type. The instance represents the audio processing graph."),Object(o.b)("li",{parentName:"ol"},"Instantiate one or more ",Object(o.b)("inlineCode",{parentName:"li"},"AUNode")," opaque types, each of which represents one audio unit in the graph."),Object(o.b)("li",{parentName:"ol"},"Add the nodes to the graph."),Object(o.b)("li",{parentName:"ol"},"Open the graph and instantiate the audio units."),Object(o.b)("li",{parentName:"ol"},"Obtain references to the audio units.")),Object(o.b)("p",null,"Listing 2-2 shows how to perform these steps for a graph that contains a Remote I/O unit and a Multichannel Mixer unit. It assumes you\u2019ve already defined an ",Object(o.b)("inlineCode",{parentName:"p"},"AudioComponentDescription")," structure for each of these audio units."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Listing 2-2")," Building an audio processing graph"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"AUGraph processingGraph;\nNewAUGraph (&processingGraph);\n \nAUNode ioNode;\nAUNode mixerNode;\n \nAUGraphAddNode (processingGraph, &ioUnitDesc, &ioNode);\nAUGraphAddNode (processingGraph, &mixerDesc, &mixerNode);\n")),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"AUGraphAddNode")," function calls make use of the audio unit specifiers ",Object(o.b)("em",{parentName:"p"},"ioUnitDesc")," and ",Object(o.b)("em",{parentName:"p"},"mixerDesc"),". At this point, the graph is instantiated and owns the nodes that you\u2019ll use in your app. To open the graph and instantiate the audio units, call ",Object(o.b)("inlineCode",{parentName:"p"},"AUGraphOpen"),":"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"AUGraphOpen (processingGraph);\n")),Object(o.b)("p",null,"Then, obtain references to the audio unit instances by way of the ",Object(o.b)("inlineCode",{parentName:"p"},"AUGraphNodeInfo")," function, as shown here:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"AudioUnit ioUnit;\nAudioUnit mixerUnit;\n \nAUGraphNodeInfo (processingGraph, ioNode, NULL, &ioUnit);\nAUGraphNodeInfo (processingGraph, mixerNode, NULL, &mixerUnit);\n")),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"ioUnit")," and ",Object(o.b)("inlineCode",{parentName:"p"},"mixerUnit")," variables now hold references to the audio unit instances in the graph, allowing you to configure and then interconnect the audio units."),Object(o.b)("h4",{id:"configure-the-audio-units"},"Configure the Audio Units"),Object(o.b)("p",null,"Each iOS audio unit requires its own configuration, as described in ",Object(o.b)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/UsingSpecificAudioUnits/UsingSpecificAudioUnits.html#//apple_ref/doc/uid/TP40009492-CH17-SW1"},"Using Specific Audio Units"),". However, some configurations are common enough that all iOS audio developers should be familiar with them."),Object(o.b)("p",null,"The Remote I/O unit, by default, has output enabled and input disabled. If your app performs simultaneous I/O, or uses input only, you must reconfigure the I/O unit accordingly. For details, see the ",Object(o.b)("inlineCode",{parentName:"p"},"kAudioOutputUnitProperty_EnableIO")," property in ",Object(o.b)("em",{parentName:"p"},Object(o.b)("a",{parentName:"em",href:"https://developer.apple.com/documentation/audiounit/audio_unit_properties"},"Audio Unit Properties Reference")),"."),Object(o.b)("p",null,"All iOS audio units, with the exception of the Remote I/O and Voice-Processing I/O units, need their kAudioUnitProperty_MaximumFramesPerSlice property configured. This property ensures that the audio unit is prepared to produce a sufficient number of frames of audio data in response to a render call. For details, see kAudioUnitProperty_MaximumFramesPerSlice in Audio Unit Properties Reference."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"prepared to produce a sufficient number of frames of audio data \u51c6\u5907\u751f\u4ea7\u5145\u8db3\u6570\u91cf\u7684\u97f3\u9891\u6570\u636e\u5e27")),Object(o.b)("p",null,"All audio units need their audio stream format defined on input, output, or both. For an explanation of audio stream formats, see ",Object(o.b)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/AudioUnitHostingFundamentals/AudioUnitHostingFundamentals.html#//apple_ref/doc/uid/TP40009492-CH3-SW40"},"Audio Stream Formats Enable Data Flow"),". For the specific stream format requirements of the various iOS audio units, see ",Object(o.b)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/UsingSpecificAudioUnits/UsingSpecificAudioUnits.html#//apple_ref/doc/uid/TP40009492-CH17-SW1"},"Using Specific Audio Units"),"."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"For an explanation of audio stream formats \uff0csee \u5173\u4e8e\u201caudio stream formats\u201d \u7684\u89e3\u91ca\uff0c\u53c2\u89c1")),Object(o.b)("h4",{id:"write-and-attach-render-callback-functions"},"Write and Attach Render Callback Functions"),Object(o.b)("p",null,"For design patterns that employ render callback functions, you must write those functions and then attach them at the correct points. ",Object(o.b)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/AudioUnitHostingFundamentals/AudioUnitHostingFundamentals.html#//apple_ref/doc/uid/TP40009492-CH3-SW27"},"Render Callback Functions Feed Audio to Audio Units")," describes what these callbacks do and explains how they work. For examples of working callbacks, view the various audio unit sample code projects in the iOS Reference Library including ",Object(o.b)("em",{parentName:"p"},"Audio Mixer (MixerHost)")," and ",Object(o.b)("em",{parentName:"p"},Object(o.b)("a",{parentName:"em",href:"https://developer.apple.com/library/archive/samplecode/aurioTouch/Introduction/Intro.html#//apple_ref/doc/uid/DTS40007770"},"aurioTouch")),", and ",Object(o.b)("em",{parentName:"p"},"SynthHost"),"."),Object(o.b)("p",null,"When audio is not flowing, you can attach a render callback immediately by using the audio unit API, as shown in Listing 2-3."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Listing 2-3")," Attaching a render callback immediately"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"AURenderCallbackStruct callbackStruct;\ncallbackStruct.inputProc        = &renderCallback;\ncallbackStruct.inputProcRefCon  = soundStructArray;\n \nAudioUnitSetProperty (\n    myIOUnit,\n    kAudioUnitProperty_SetRenderCallback,\n    kAudioUnitScope_Input,\n    0,                 // output element\n    &callbackStruct,\n    sizeof (callbackStruct)\n);\n")),Object(o.b)("p",null,"You can attach a render callback in a thread-safe manner, even when audio is flowing, by using the audio processing graph API. Listing 2-4 shows how."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Listing 2-4")," Attaching a render callback in a thread-safe manner"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-c"},"AURenderCallbackStruct callbackStruct;\ncallbackStruct.inputProc        = &renderCallback;\ncallbackStruct.inputProcRefCon  = soundStructArray;\n \nAUGraphSetNodeInputCallback (\n    processingGraph,\n    myIONode,\n    0,                 // output element\n    &callbackStruct\n);\n// ... some time later\nBoolean graphUpdated;\nAUGraphUpdate (processingGraph, &graphUpdated);\n")),Object(o.b)("h4",{id:"connect-the-audio-unit-nodes"},"Connect the Audio Unit Nodes"),Object(o.b)("p",null,"In most cases, it\u2019s best\u2014and easier\u2014to establish or break connections between audio units using the ",Object(o.b)("inlineCode",{parentName:"p"},"AUGraphConnectNodeInput")," and ",Object(o.b)("inlineCode",{parentName:"p"},"AUGraphDisconnectNodeInput")," functions in the audio processing graph API. These functions are thread-safe and avoid the coding overhead of defining connections explicitly, as you must do when not using a graph."),Object(o.b)("p",null,"Listing 2-5 shows how to connect the output of a mixer node to the input of an I/O unit output element using the audio processing graph API."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Listing 2-5")," Connecting two audio unit nodes using the audio processing graph API"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"AudioUnitElement mixerUnitOutputBus  = 0;\nAudioUnitElement ioUnitOutputElement = 0;\n \nAUGraphConnectNodeInput (\n    processingGraph,\n    mixerNode,           // source node\n    mixerUnitOutputBus,  // source node bus\n    iONode,              // destination node\n    ioUnitOutputElement  // desinatation node element\n);\n\n")),Object(o.b)("p",null,"You can, alternatively, establish and break connections between audio units directly by using the audio unit property mechanism. To do so, use the ",Object(o.b)("inlineCode",{parentName:"p"},"AudioUnitSetProperty")," function along with the ",Object(o.b)("inlineCode",{parentName:"p"},"kAudioUnitProperty_MakeConnection")," property, as shown in Listing 2-6. This approach requires that you define an ",Object(o.b)("inlineCode",{parentName:"p"},"AudioUnitConnection")," structure for each connection to serve as its property value."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Listing 2-6")," Connecting two audio units directly"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-c"},"AudioUnitElement mixerUnitOutputBus  = 0;\nAudioUnitElement ioUnitOutputElement = 0;\n \nAudioUnitConnection mixerOutToIoUnitIn;\nmixerOutToIoUnitIn.sourceAudioUnit    = mixerUnitInstance;\nmixerOutToIoUnitIn.sourceOutputNumber = mixerUnitOutputBus;\nmixerOutToIoUnitIn.destInputNumber    = ioUnitOutputElement;\n \nAudioUnitSetProperty (\n    ioUnitInstance,                     // connection destination\n    kAudioUnitProperty_MakeConnection,  // property key\n    kAudioUnitScope_Input,              // destination scope\n    ioUnitOutputElement,                // destination element\n    &mixerOutToIoUnitIn,                // connection definition\n    sizeof (mixerOutToIoUnitIn)\n);\n")),Object(o.b)("h4",{id:"provide-a-user-interface"},"Provide a User Interface"),Object(o.b)("p",null,"At this point in constructing your app, the audio units\u2014and, typically, the audio processing graph\u2014are fully built and configured. In many cases, you\u2019ll then want to provide a user interface to let your users fine-tune the audio behavior. You tailor the user interface to allow the user to adjust specific audio unit parameters and, in some unusual cases, audio unit properties. In either case, the user interface should also provide visual feedback regarding the current settings."),Object(o.b)("p",null,Object(o.b)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/AudioUnitHostingFundamentals/AudioUnitHostingFundamentals.html#//apple_ref/doc/uid/TP40009492-CH3-SW21"},"Use Parameters and UIKit to Give Users Control")," explains the basics of constructing a user interface to let a user control a parameter value. For a working example, view the sample code project ",Object(o.b)("em",{parentName:"p"},"Audio Mixer (MixerHost)"),"."),Object(o.b)("p",null,"The iPod EQ unit is one of the unusual cases in that, to change its active equalization curve, you change the value of the ",Object(o.b)("inlineCode",{parentName:"p"},"kAudioUnitProperty_PresentPreset")," property. You can do this whether or not audio is running. For a working example, view the sample code project ",Object(o.b)("em",{parentName:"p"},Object(o.b)("a",{parentName:"em",href:"https://developer.apple.com/library/archive/samplecode/iPhoneMixerEQGraphTest/Introduction/Intro.html#//apple_ref/doc/uid/DTS40009555"},"Mixer iPodEQ AUGraph Test")),"."),Object(o.b)("h4",{id:"initialize-and-start-the-audio-processing-graph"},"Initialize and Start the Audio Processing Graph"),Object(o.b)("p",null,"Before you can start audio flow, an audio processing graph must be initialized by calling the ",Object(o.b)("inlineCode",{parentName:"p"},"AUGraphInitialize")," function. This critical step:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Initializes the audio units owned by the graph by automatically invoking the ",Object(o.b)("inlineCode",{parentName:"li"},"AudioUnitInitialize")," function individually for each one. (If you were to construct a processing chain without using a graph, you would have to explicitly initialize each audio unit in turn.)"),Object(o.b)("li",{parentName:"ul"},"Validates the graph\u2019s connections and audio data stream formats."),Object(o.b)("li",{parentName:"ul"},"Propagates stream formats across audio unit connections.")),Object(o.b)("p",null,"Listing 2-7 shows how to use ",Object(o.b)("inlineCode",{parentName:"p"},"AUGraphInitialize"),"."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Listing 2-7")," Initializing and starting an audio processing graph"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"OSStatus result = AUGraphInitialize (processingGraph);\n// Check for error. On successful initialization, start the graph...\nAUGraphStart (processingGraph);\n \n// Some time later\nAUGraphStop (processingGraph);\n\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"This critical step \u5173\u952e\u6b65\u9aa4"),Object(o.b)("p",{parentName:"blockquote"},"Validates the graph\u2019s connections and audio data stream formats. \u9a8c\u8bc1\u56fe\u7684\u8fde\u63a5\u548c\u97f3\u9891\u6570\u636e\u683c\u5f0f"),Object(o.b)("p",{parentName:"blockquote"},"Propagates stream formats across audio unit connections. \u5728audio unit \u8fde\u63a5\u4e4b\u95f4\u4f20\u64ad\u6d41\u683c\u5f0f")),Object(o.b)("h3",{id:"troubleshooting-tips"},"Troubleshooting Tips"),Object(o.b)("p",null,"Whenever a Core Audio function provides a return value, capture that value and check for success or failure. On failure, make use of Xcode\u2019s debugging features as described in ",Object(o.b)("em",{parentName:"p"},Object(o.b)("a",{parentName:"em",href:"https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/XcodeDebugging/000-Introduction/Introduction.html#//apple_ref/doc/uid/TP40007057"},"Xcode Debugging Guide")),". If using an Objective-C method in your app, such as for configuring your audio session, take advantage the ",Object(o.b)("em",{parentName:"p"},"error")," parameter in the same way."),Object(o.b)("p",null,"Be aware of dependencies between function calls. For example, you can start an audio processing graph only after you successfully initialize it. Check the return value of ",Object(o.b)("inlineCode",{parentName:"p"},"AUGraphInitialize"),"."),Object(o.b)("p",null,"If the function returns successfully, you can start the graph. If it fails, determine what went wrong. Check that all of your audio unit function calls leading up to initialization returned successfully. For an example of how to do this, look at the ",Object(o.b)("inlineCode",{parentName:"p"},"-configureAndInitializeAudioProcessingGraph")," method in the sample code project ",Object(o.b)("em",{parentName:"p"},"Audio Mixer (MixerHost)"),"."),Object(o.b)("p",null,"Second, if graph initialization is failing, take advantage of the ",Object(o.b)("inlineCode",{parentName:"p"},"CAShow")," function. This function prints out the state of the graph to the Xcode console. The sample code project ",Object(o.b)("em",{parentName:"p"},"Audio Mixer (MixerHost)")," demonstrates this technique as well."),Object(o.b)("p",null,"Ensure that you are initializing each of your ",Object(o.b)("inlineCode",{parentName:"p"},"AudioStreamBasicDescription")," structures to 0, as follows:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"AudioStreamBasicDescription stereoStreamFormat = {0};\n")),Object(o.b)("p",null,"Initializing the fields of an ASBD to 0 ensures that no fields contain garbage data. (In the case of declaring a data structure in external storage\u2014for example, as an instance variable in a class declaration\u2014its fields are automatically initialized to 0 and you need not initialize them yourself.)"),Object(o.b)("p",null,"To print out the field values of an ",Object(o.b)("inlineCode",{parentName:"p"},"AudioStreamBasicDescription")," structure to the Xcode console, which can be very useful during development, use code like that shown in Listing 2-8."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Listing 2-8")," A utility method to print field values for an ",Object(o.b)("inlineCode",{parentName:"p"},"AudioStreamBasicDescription")," structure"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-c"},'- (void) printASBD: (AudioStreamBasicDescription) asbd {\n \n    char formatIDString[5];\n    UInt32 formatID = CFSwapInt32HostToBig (asbd.mFormatID);\n    bcopy (&formatID, formatIDString, 4);\n    formatIDString[4] = \'\\0\';\n \n    NSLog (@"  Sample Rate:         %10.0f",  asbd.mSampleRate);\n    NSLog (@"  Format ID:           %10s",    formatIDString);\n    NSLog (@"  Format Flags:        %10X",    asbd.mFormatFlags);\n    NSLog (@"  Bytes per Packet:    %10d",    asbd.mBytesPerPacket);\n    NSLog (@"  Frames per Packet:   %10d",    asbd.mFramesPerPacket);\n    NSLog (@"  Bytes per Frame:     %10d",    asbd.mBytesPerFrame);\n    NSLog (@"  Channels per Frame:  %10d",    asbd.mChannelsPerFrame);\n    NSLog (@"  Bits per Channel:    %10d",    asbd.mBitsPerChannel);\n}\n')),Object(o.b)("p",null,"This utility method can quickly reveal problems in an ASBD."),Object(o.b)("p",null,'When defining an ASBD for an audio unit stream format, take care to ensure you are following the "Recommended stream format attributes\u201d and \u201cStream format notes\u201d in the usage tables in ',Object(o.b)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/UsingSpecificAudioUnits/UsingSpecificAudioUnits.html#//apple_ref/doc/uid/TP40009492-CH17-SW1"},"Using Specific Audio Units"),". Do not deviate from those recommendations unless you have a specific reason to."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"in external storage \u5916\u90e8\u5b58\u50a8")),Object(o.b)("h2",{id:"using-specific-audio-units"},"Using Specific Audio Units"),Object(o.b)("p",null,"Each iOS audio unit has certain things in common with all others and certain things unique to itself. Earlier chapters in this document described the common aspects, among them the need to find the audio unit at runtime, instantiate it, and ensure that its stream formats are set appropriately. This chapter explains the differences among the audio units and provides specifics on how to use them."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"among them \u5176\u95f4")),Object(o.b)("p",null,"Later in the chapter, ",Object(o.b)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/UsingSpecificAudioUnits/UsingSpecificAudioUnits.html#//apple_ref/doc/uid/TP40009492-CH17-SW14"},"Identifier Keys for Audio Units")," lists the codes you need to locate the dynamically-linkable libraries for each audio unit at runtime."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Later in the chapter \u672c\u7ae0\u7684\u540e\u9762")),Object(o.b)("h3",{id:"using-io-units"},"Using I/O Units"),Object(o.b)("p",null,"iOS provides three I/O (input/output) units. The vast majority of audio-unit applications use the Remote I/O unit, which connects to input and output audio hardware and provides low-latency access to individual incoming and outgoing audio sample values. For VoIP apps, the Voice-Processing I/O unit extends the Remote I/O unit by adding acoustic echo cancelation and other features. To send audio back to your application rather than to output audio hardware, use the Generic Output unit."),Object(o.b)("h4",{id:"remote-io-unit"},"Remote I/O Unit"),Object(o.b)("p",null,"The Remote I/O unit (subtype ",Object(o.b)("inlineCode",{parentName:"p"},"kAudioUnitSubType_RemoteIO"),") connects to device hardware for input, output, or simultaneous input and output. Use it for playback, recording, or low-latency simultaneous input and output where echo cancelation is not needed."),Object(o.b)("p",null,"The device\u2019s audio hardware imposes its audio stream formats on the outward-facing sides of the Remote I/O unit, as described in ",Object(o.b)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/AudioUnitHostingFundamentals/AudioUnitHostingFundamentals.html#//apple_ref/doc/uid/TP40009492-CH3-SW34"},"Understanding Where and How to Set Stream Formats"),". The audio unit provides format conversion between the hardware audio formats and your application audio format, doing so by way of an included Format Converter audio unit."),Object(o.b)("p",null,"For sample code that shows how to use this audio unit, see the sample code project ",Object(o.b)("em",{parentName:"p"},Object(o.b)("a",{parentName:"em",href:"https://developer.apple.com/library/archive/samplecode/aurioTouch/Introduction/Intro.html#//apple_ref/doc/uid/DTS40007770"},"aurioTouch")),"."),Object(o.b)("p",null,"Table 3-1 provides usage details for this audio unit."),Object(o.b)("p",null,"Table 3-1  Using the Remote I/O unit"),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",{parentName:"tr",align:"left"},"Audio unit feature"),Object(o.b)("th",{parentName:"tr",align:"left"},"Details"))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:"left"},"Elements"),Object(o.b)("td",{parentName:"tr",align:"left"},"One input element: element 1. One output element: element 0.By default, the input element is disabled and the output element is enabled. If you need to change this, refer to the description of the ",Object(o.b)("inlineCode",{parentName:"td"},"kAudioOutputUnitProperty_EnableIO")," property.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:"left"},"Recommended stream format attributes"),Object(o.b)("td",{parentName:"tr",align:"left"},Object(o.b)("inlineCode",{parentName:"td"},"kAudioFormatLinearPCM``AudioUnitSampleType``kAudioFormatFlagsAudioUnitCanonical"))),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:"left"},"Stream format notes"),Object(o.b)("td",{parentName:"tr",align:"left"},"The outward-facing sides of the Remote I/O unit acquire their formats from the audio hardware as follows:The input element (element 1) input scope gets its stream format from the currently-active audio input hardware.The output element (element 0) output scope gets its stream format from the currently-active output audio hardware.Set your application format on the output scope of the input element. The input element performs format conversion between its input and output scopes as needed. Use the hardware sample rate for your application stream format.If the input scope of the output element is fed by an audio unit connection, it acquires its stream format from that connection. If, however, it is fed by a render callback function, set your application format on it.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:"left"},"Parameters"),Object(o.b)("td",{parentName:"tr",align:"left"},"None in iOS.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:"left"},"Properties"),Object(o.b)("td",{parentName:"tr",align:"left"},"See ",Object(o.b)("inlineCode",{parentName:"td"},"I/O Audio Unit Properties"),".")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:"left"},"Property notes"),Object(o.b)("td",{parentName:"tr",align:"left"},"You never need to set the ",Object(o.b)("inlineCode",{parentName:"td"},"kAudioUnitProperty_MaximumFramesPerSlice")," property on this audio unit.")))),Object(o.b)("h4",{id:"voice-processing-io-unit"},"Voice-Processing I/O Unit"),Object(o.b)("p",null,"The Voice-Processing I/O unit (subtype ",Object(o.b)("inlineCode",{parentName:"p"},"kAudioUnitSubType_VoiceProcessingIO"),") has the characteristics of the Remote I/O unit and adds echo suppression for two-way duplex communication. It also adds automatic gain correction, adjustment of voice-processing quality, and muting. This is the correct I/O unit to use for VoIP (Voice over Internet Protocol) apps."),Object(o.b)("p",null,"All of the considerations listed in ",Object(o.b)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/UsingSpecificAudioUnits/UsingSpecificAudioUnits.html#//apple_ref/doc/uid/TP40009492-CH17-SW10"},"Table 3-1")," apply as well to the Voice-Processing I/O unit. In addition, there are specific properties available for this audio unit, described in ",Object(o.b)("inlineCode",{parentName:"p"},"Voice-Processing I/O Audio Unit Properties"),"."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"adds echo suppression for two-way duplex communication.  \u4e3a\u53cc\u5411\u53cc\u5411\u901a\u4fe1\u589e\u52a0\u4e86\u56de\u58f0\u6291\u5236")),Object(o.b)("h4",{id:"generic-output-unit"},"Generic Output Unit"),Object(o.b)("p",null,"Use this audio unit, of subtype ",Object(o.b)("inlineCode",{parentName:"p"},"kAudioUnitSubType_GenericOutput"),", when sending the output of an audio processing graph to your application rather than to the output audio hardware. You would typically use the Generic Output unit for offline audio processing. Just like the other I/O units, the Generic Output unit incorporates a Format Converter unit. This lets the Generic Output unit perform format conversion between the stream format used in an audio processing graph and the format you want."),Object(o.b)("p",null,"You can also use a Generic Output unit as the final node in a subgraph that you place into a parent audio processing graph."),Object(o.b)("h3",{id:"using-mixer-units"},"Using Mixer Units"),Object(o.b)("p",null,"iOS provides two mixer units. In most cases, you should use the Multichannel Mixer unit, which provides mixing for any number of mono or stereo streams. If you need the features of the 3D Mixer unit, you should very likely be using OpenAL instead. OpenAL is built on top of the 3D Mixer unit, providing equivalent performance with a simpler API that is well suited for game app development."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"you should very likely be using OpenAL instead. \u4f60\u53ef\u80fd\u66f4\u5e94\u8be5\u4f7f\u7528openAL")),Object(o.b)("h4",{id:"multichannel-mixer-unit"},"Multichannel Mixer Unit"),Object(o.b)("p",null,"The Multichannel Mixer unit (subtype ",Object(o.b)("inlineCode",{parentName:"p"},"kAudioUnitSubType_MultiChannelMixer"),") takes any number of mono or stereo streams and combines them into a single stereo output. It controls audio gain for each input and for the output, and lets you turn each input on or off separately. Starting in iOS 4.0, the Multichannel Mixer supports stereo panning for each input."),Object(o.b)("p",null,"For sample code that shows how to use this audio unit, see the sample code project ",Object(o.b)("em",{parentName:"p"},"Audio Mixer (MixerHost)"),"."),Object(o.b)("p",null,"Table 3-2 provides usage details for this audio unit."),Object(o.b)("p",null,"Table 3-2 provides usage details for this audio unit."),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",{parentName:"tr",align:"left"},"Audio unit feature"),Object(o.b)("th",{parentName:"tr",align:"left"},"Details"))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:"left"},"Elements"),Object(o.b)("td",{parentName:"tr",align:"left"},"One or more input elements, each of which can be mono or stereo. One stereo output element.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:"left"},"Recommended stream format attributes"),Object(o.b)("td",{parentName:"tr",align:"left"},Object(o.b)("inlineCode",{parentName:"td"},"kAudioFormatLinearPCM``AudioUnitSampleType``kAudioFormatFlagsAudioUnitCanonical"))),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:"left"},"Stream format notes"),Object(o.b)("td",{parentName:"tr",align:"left"},"On the input scope, manage stream formats as follows:If an input bus is fed by an audio unit connection, it acquires its stream format from that connection.If an input bus is fed by a render callback function, set your complete application stream format on the bus. Use the same stream format as used for the data provided by the callback.On the output scope, set just the application sample rate.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:"left"},"Parameters"),Object(o.b)("td",{parentName:"tr",align:"left"},"See ",Object(o.b)("inlineCode",{parentName:"td"},"Multichannel Mixer Unit Parameters"),".")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:"left"},"Properties"),Object(o.b)("td",{parentName:"tr",align:"left"},Object(o.b)("inlineCode",{parentName:"td"},"kAudioUnitProperty_MeteringMode"),".")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:"left"},"Property notes"),Object(o.b)("td",{parentName:"tr",align:"left"},"By default, the ",Object(o.b)("inlineCode",{parentName:"td"},"kAudioUnitProperty_MaximumFramesPerSlice")," property is set to a value of 1024, which is not sufficient when the screen locks and the display sleeps. If your app plays audio with the screen locked, you must increase the value of this property unless audio input is active. Do as follows:If audio input is active, you do not need to set a value for the ",Object(o.b)("inlineCode",{parentName:"td"},"kAudioUnitProperty_MaximumFramesPerSlice")," property.If audio input is not active, set this property to a value of 4096.")))),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"which is not sufficient \u8fd9\u662f\u4e0d\u591f\u7684")),Object(o.b)("h4",{id:"3d-mixer-unit"},"3D Mixer Unit"),Object(o.b)("p",null,"The 3D Mixer unit (subtype ",Object(o.b)("inlineCode",{parentName:"p"},"kAudioUnitSubType_3DMixer"),") controls stereo panning, playback tempo, and gain for each input, and controls other characteristics such as apparent distance to the listener. The output has an audio gain control. To get some idea of what this audio unit can do, consider that OpenAL in iOS is implemented using it."),Object(o.b)("p",null,"In most cases, if you need the features of the 3D Mixer unit, your best option is to use OpenAL. For sample code that shows how to use OpenAL, see the sample code project ",Object(o.b)("em",{parentName:"p"},"oalTouch"),"."),Object(o.b)("p",null,"Table 3-3 provides usage details for this audio unit."),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",{parentName:"tr",align:"left"},"Audio unit feature"),Object(o.b)("th",{parentName:"tr",align:"left"},"Details"))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:"left"},"Elements"),Object(o.b)("td",{parentName:"tr",align:"left"},"One or more input elements, each of which is mono. One stereo output element.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:"left"},"Recommended stream format attributes"),Object(o.b)("td",{parentName:"tr",align:"left"},Object(o.b)("inlineCode",{parentName:"td"},"UInt16``kAudioFormatFlagsCanonical"))),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:"left"},"Stream format notes"),Object(o.b)("td",{parentName:"tr",align:"left"},"On the input scope, manage stream formats as follows:If an input bus is fed by an audio unit connection, it acquires its stream format from that connection.If an input bus is fed by a render callback function, set your complete application stream format on the bus. Use the same stream format as used for the data provided by the callback.On the output scope, set just the application sample rate.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:"left"},"Parameters"),Object(o.b)("td",{parentName:"tr",align:"left"},"See ",Object(o.b)("inlineCode",{parentName:"td"},"3D Mixer Unit Parameters"),".")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:"left"},"Properties"),Object(o.b)("td",{parentName:"tr",align:"left"},"See ",Object(o.b)("inlineCode",{parentName:"td"},"3D Mixer Audio Unit Properties"),". Note, however, that most of these properties are implemented only in the Mac OS X version of this audio unit.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:"left"},"Property notes"),Object(o.b)("td",{parentName:"tr",align:"left"},"By default, the ",Object(o.b)("inlineCode",{parentName:"td"},"kAudioUnitProperty_MaximumFramesPerSlice")," property is set to a value of 1024, which is not sufficient when the screen locks and the display sleeps. If your app plays audio with the screen locked, you must increase the value of this property unless audio input is active. Do as follows:If audio input is active, you do not need to set a value for the ",Object(o.b)("inlineCode",{parentName:"td"},"kAudioUnitProperty_MaximumFramesPerSlice")," property.If audio input is not active, set this property to a value of 4096.")))),Object(o.b)("h3",{id:"using-effect-units"},"Using Effect Units"),Object(o.b)("p",null,"The iPod EQ unit (subtype ",Object(o.b)("inlineCode",{parentName:"p"},"kAudioUnitSubType_AUiPodEQ"),") is the only effect unit provided in iOS 4. This is the same equalizer used by the built-in iPod app. To view the iPod app\u2019s user interface for this audio unit, go to Settings > iPod > EQ. This audio unit offers a set of preset equalization curves such as Bass Booster, Pop, and Spoken Word."),Object(o.b)("p",null,"You must supply your own user interface to the iPod EQ unit, as you must for any of the audio units. The ",Object(o.b)("em",{parentName:"p"},Object(o.b)("a",{parentName:"em",href:"https://developer.apple.com/library/archive/samplecode/iPhoneMixerEQGraphTest/Introduction/Intro.html#//apple_ref/doc/uid/DTS40009555"},"Mixer iPodEQ AUGraph Test"))," sample code project demonstrates how to use the iPod EQ unit and shows one way to provide a user interface for it."),Object(o.b)("p",null,"Table 3-4 provides usage details for this audio unit."),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",{parentName:"tr",align:"left"},"Audio unit feature"),Object(o.b)("th",{parentName:"tr",align:"left"},"Details"))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:"left"},"Elements"),Object(o.b)("td",{parentName:"tr",align:"left"},"One mono or stereo input element. One mono or stereo output element.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:"left"},"Recommended stream format attributes"),Object(o.b)("td",{parentName:"tr",align:"left"},Object(o.b)("inlineCode",{parentName:"td"},"kAudioFormatLinearPCM``AudioUnitSampleType``kAudioFormatFlagsAudioUnitCanonical"))),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:"left"},"Stream format notes"),Object(o.b)("td",{parentName:"tr",align:"left"},"On the input scope, manage stream formats as follows:If the input is fed by an audio unit connection, it acquires its stream format from that connection.If the input is fed by a render callback function, set your complete application stream format on the bus. Use the same stream format as used for the data provided by the callback.On the output scope, set the same full stream format that you used for the input.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:"left"},"Parameters"),Object(o.b)("td",{parentName:"tr",align:"left"},"None.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:"left"},"Properties"),Object(o.b)("td",{parentName:"tr",align:"left"},Object(o.b)("inlineCode",{parentName:"td"},"kAudioUnitProperty_FactoryPresets")," and ",Object(o.b)("inlineCode",{parentName:"td"},"kAudioUnitProperty_PresentPreset"))),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:"left"},"Property notes"),Object(o.b)("td",{parentName:"tr",align:"left"},"The iPod EQ unit provides a set of predefined tonal equalization curves as factory presets. Obtain the array of available EQ settings by accessing the audio unit\u2019s ",Object(o.b)("inlineCode",{parentName:"td"},"kAudioUnitProperty_FactoryPresets")," property. You can then apply a setting by using it as the value for the ",Object(o.b)("inlineCode",{parentName:"td"},"kAudioUnitProperty_PresentPreset")," property.By default, the ",Object(o.b)("inlineCode",{parentName:"td"},"kAudioUnitProperty_MaximumFramesPerSlice")," property is set to a value of 1024, which is not sufficient when the screen locks and the display sleeps. If your app plays audio with the screen locked, you must increase the value of this property unless audio input is active. Do as follows:If audio input is active, you do not need to set a value for the ",Object(o.b)("inlineCode",{parentName:"td"},"kAudioUnitProperty_MaximumFramesPerSlice")," property.If audio input is not active, set this property to a value of 4096.")))),Object(o.b)("h3",{id:"identifier-keys-for-audio-units"},"Identifier Keys for Audio Units"),Object(o.b)("p",null,"This table provides the identifier keys you need to access the dynamically-linkable libraries for each iOS audio unit, along with brief descriptions of the audio units."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"along with brief descriptions of the audio units \u4ee5\u53ca\u7b80\u8981\u7684\u8bf4\u660e")),Object(o.b)("p",null,Object(o.b)("img",{alt:"image-20210123223500263",src:n(1011).default})),Object(o.b)("h2",{id:"reference"},"reference"),Object(o.b)("h3",{id:"document"},"document"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"AppleDocument: ",Object(o.b)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/UsingSpecificAudioUnits/UsingSpecificAudioUnits.html"},"https://developer.apple.com/library/archive/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/UsingSpecificAudioUnits/UsingSpecificAudioUnits.html"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"For an overview of iOS audio APIs, and guidance on when to use each one, refer to ",Object(o.b)("em",{parentName:"p"},Object(o.b)("a",{parentName:"em",href:"https://developer.apple.com/library/archive/documentation/AudioVideo/Conceptual/MultimediaPG/Introduction/Introduction.html#//apple_ref/doc/uid/TP40009767"},"Multimedia Programming Guide")),".")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"To work with audio units directly\u2014configuring and controlling them\u2014use the functions described in ",Object(o.b)("em",{parentName:"p"},Object(o.b)("a",{parentName:"em",href:"https://developer.apple.com/documentation/audiounit/audio_unit_component_services"},"Audio Unit Component Services Reference")),".")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"To create and configure an audio processing graph (a processing chain of audio units) use the functions described in ",Object(o.b)("em",{parentName:"p"},Object(o.b)("a",{parentName:"em",href:"https://developer.apple.com/documentation/audiotoolbox/audio_unit_processing_graph_services"},"Audio Unit Processing Graph Services Reference")),".")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Core Audio Glossary\uff1a",Object(o.b)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/MusicAudio/Reference/CoreAudioGlossary/Introduction/Introduction.html#//apple_ref/doc/uid/TP40004453-CH211-SW1"},"https://developer.apple.com/library/archive/documentation/MusicAudio/Reference/CoreAudioGlossary/Introduction/Introduction.html#//apple_ref/doc/uid/TP40004453-CH211-SW1")," \uff08\u97f3\u9891\u672f\u8bed\uff09")),Object(o.b)("li",{parentName:"ul"})),Object(o.b)("h3",{id:"sample-code"},"sample code"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"For sample code that shows how to use the Remote I/O unit, see the sample code project ",Object(o.b)("em",{parentName:"li"},Object(o.b)("a",{parentName:"em",href:"https://developer.apple.com/library/archive/samplecode/aurioTouch/Introduction/Intro.html#//apple_ref/doc/uid/DTS40007770"},"aurioTouch")),".")))}l.isMDXComponent=!0},329:function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return m}));var a=n(0),i=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=i.a.createContext({}),p=function(e){var t=i.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):u(u({},t),e)),n},l=function(e){var t=p(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},b=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),l=p(n),b=a,m=l["".concat(r,".").concat(b)]||l[b]||d[b]||o;return n?i.a.createElement(m,u(u({ref:t},c),{},{components:n})):i.a.createElement(m,u({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=b;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u.mdxType="string"==typeof e?e:a,r[1]=u;for(var c=2;c<o;c++)r[c]=n[c];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);
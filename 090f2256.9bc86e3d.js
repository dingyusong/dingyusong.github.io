(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{333:function(e,n,t){"use strict";t.d(n,"a",(function(){return o})),t.d(n,"b",(function(){return m}));var a=t(0),i=t.n(a);function c(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){c(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function b(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},c=Object.keys(e);for(a=0;a<c.length;a++)t=c[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)t=c[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=i.a.createContext({}),p=function(e){var n=i.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},o=function(e){var n=p(e.components);return i.a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},u=i.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,c=e.originalType,r=e.parentName,s=b(e,["components","mdxType","originalType","parentName"]),o=p(t),u=a,m=o["".concat(r,".").concat(u)]||o[u]||d[u]||c;return t?i.a.createElement(m,l(l({ref:n},s),{},{components:t})):i.a.createElement(m,l({ref:n},s))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var c=t.length,r=new Array(c);r[0]=u;var l={};for(var b in n)hasOwnProperty.call(n,b)&&(l[b]=n[b]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var s=2;s<c;s++)r[s]=t[s];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},86:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return b})),t.d(n,"toc",(function(){return s})),t.d(n,"default",(function(){return o}));var a=t(3),i=t(7),c=(t(0),t(333)),r=["components"],l={},b={unversionedId:"\u7f16\u7a0b\u57fa\u7840/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u7ec3\u4e60/\u6781\u5ba2\u8bad\u7ec3\u8425\u8fc7\u904d\u6570",id:"\u7f16\u7a0b\u57fa\u7840/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u7ec3\u4e60/\u6781\u5ba2\u8bad\u7ec3\u8425\u8fc7\u904d\u6570",isDocsHomePage:!1,title:"\u6781\u5ba2\u8bad\u7ec3\u8425\u8fc7\u904d\u6570",description:"\u6781\u5ba2\u8bad\u7ec3\u8425\u8fc7\u904d\u6570",source:"@site/docs/\u7f16\u7a0b\u57fa\u7840/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u7ec3\u4e60/\u6781\u5ba2\u8bad\u7ec3\u8425\u8fc7\u904d\u6570.md",slug:"/\u7f16\u7a0b\u57fa\u7840/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u7ec3\u4e60/\u6781\u5ba2\u8bad\u7ec3\u8425\u8fc7\u904d\u6570",permalink:"/docs/\u7f16\u7a0b\u57fa\u7840/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u7ec3\u4e60/\u6781\u5ba2\u8bad\u7ec3\u8425\u8fc7\u904d\u6570",editUrl:"dys-typora-open://mine/survival/docs/\u7f16\u7a0b\u57fa\u7840/\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5/\u7ec3\u4e60/\u6781\u5ba2\u8bad\u7ec3\u8425\u8fc7\u904d\u6570.md",version:"current"},s=[{value:"\u7406\u8bba",id:"\u7406\u8bba",children:[{value:"<strong>\u7cbe\u901a\u4e00\u4e2a\u9886\u57df</strong>",id:"\u7cbe\u901a\u4e00\u4e2a\u9886\u57df",children:[]},{value:"<strong>Chunk it up</strong>",id:"chunk-it-up",children:[]},{value:"Deliberate Practicing",id:"deliberate-practicing",children:[]},{value:"Feedback",id:"feedback",children:[]},{value:"\u5207\u9898\u56db\u4ef6\u5957",id:"\u5207\u9898\u56db\u4ef6\u5957",children:[]},{value:"\u4e94\u6b65\u5237\u9898\u6cd5 \u4e94\u6bd2\u795e\u638c",id:"\u4e94\u6b65\u5237\u9898\u6cd5-\u4e94\u6bd2\u795e\u638c",children:[]},{value:"\u2f83\u81ea\u9876\u5411\u4e0b\u7684\u7f16\u7a0b\u2f45\u65b9\u5f0f",id:"\u2f83\u81ea\u9876\u5411\u4e0b\u7684\u7f16\u7a0b\u2f45\u65b9\u5f0f",children:[]}]},{value:"\u6570\u7ec4\uff0c\u94fe\u8868\uff0c\u8df3\u8868",id:"\u6570\u7ec4\uff0c\u94fe\u8868\uff0c\u8df3\u8868",children:[{value:"\u6570\u7ec4",id:"\u6570\u7ec4",children:[]},{value:"\u94fe\u8868",id:"\u94fe\u8868",children:[]},{value:"\u8df3\u8868",id:"\u8df3\u8868",children:[]}]},{value:"\u6df1\u5ea6\u4f18\u5148\u641c\u7d22",id:"\u6df1\u5ea6\u4f18\u5148\u641c\u7d22",children:[{value:"102. \u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386",id:"102-\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386",children:[]}]},{value:"\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22",id:"\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22",children:[{value:"127. \u5355\u8bcd\u63a5\u9f99",id:"127-\u5355\u8bcd\u63a5\u9f99",children:[]},{value:"126. \u5355\u8bcd\u63a5\u9f99 II",id:"126-\u5355\u8bcd\u63a5\u9f99-ii",children:[]},{value:"102. \u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386",id:"102-\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386-1",children:[]},{value:"433. \u6700\u5c0f\u57fa\u56e0\u53d8\u5316",id:"433-\u6700\u5c0f\u57fa\u56e0\u53d8\u5316",children:[]}]},{value:"trie-\u5b57\u5178\u6811-\u524d\u7f00\u6811",id:"trie-\u5b57\u5178\u6811-\u524d\u7f00\u6811",children:[{value:"208. \u5b9e\u73b0 Trie (\u524d\u7f00\u6811)",id:"208-\u5b9e\u73b0-trie-\u524d\u7f00\u6811",children:[]},{value:"212. \u5355\u8bcd\u641c\u7d22 II",id:"212-\u5355\u8bcd\u641c\u7d22-ii",children:[]}]},{value:"\u5e76\u67e5\u96c6-union",id:"\u5e76\u67e5\u96c6-union",children:[{value:"\u5c9b\u5c7f\u6570\u91cf",id:"\u5c9b\u5c7f\u6570\u91cf",children:[]}]},{value:"\u9ad8\u7ea7\u641c\u7d22",id:"\u9ad8\u7ea7\u641c\u7d22",children:[{value:"\u4e0d\u91cd\u590d/\u8bb0\u5fc6+\u526a\u679d/\u56de\u6eaf",id:"\u4e0d\u91cd\u590d\u8bb0\u5fc6\u526a\u679d\u56de\u6eaf",children:[]},{value:"\u53cc\u5411BFS",id:"\u53cc\u5411bfs",children:[]},{value:"\u542f\u53d1\u5f0f\u641c\u7d22\uff08A*\uff09",id:"\u542f\u53d1\u5f0f\u641c\u7d22\uff08a\uff09",children:[]}]},{value:"\u6392\u5e8f",id:"\u6392\u5e8f",children:[{value:"1122. \u6570\u7ec4\u7684\u76f8\u5bf9\u6392\u5e8f",id:"1122-\u6570\u7ec4\u7684\u76f8\u5bf9\u6392\u5e8f",children:[]}]}],p={toc:s};function o(e){var n=e.components,t=Object(i.a)(e,r);return Object(c.b)("wrapper",Object(a.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(c.b)("h1",{id:"\u6781\u5ba2\u8bad\u7ec3\u8425\u8fc7\u904d\u6570"},"\u6781\u5ba2\u8bad\u7ec3\u8425\u8fc7\u904d\u6570"),Object(c.b)("p",null,"[toc]"),Object(c.b)("h2",{id:"\u7406\u8bba"},"\u7406\u8bba"),Object(c.b)("h3",{id:"\u7cbe\u901a\u4e00\u4e2a\u9886\u57df"},Object(c.b)("strong",{parentName:"h3"},"\u7cbe\u901a\u4e00\u4e2a\u9886\u57df")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Chunk it up \u5207\u788e\u77e5\u8bc6\u70b9 "),Object(c.b)("li",{parentName:"ul"},"Deliberate Practicing \u523b\u610f\u7ec3\u4e60 "),Object(c.b)("li",{parentName:"ul"},"Feedback \u53cd\u9988")),Object(c.b)("hr",null),Object(c.b)("h3",{id:"chunk-it-up"},Object(c.b)("strong",{parentName:"h3"},"Chunk it up")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"\u5e96\u4e01\u89e3\u725b "),Object(c.b)("li",{parentName:"ul"},"\u8109\u7edc\u8fde\u63a5")),Object(c.b)("p",null,"\u5f62\u6210\u6811\u5f62\u7ed3\u6784\u7684\u8111\u56fe\uff0c\u5e76\u8bb0\u5fc6\u4e0b\u6765\uff01"),Object(c.b)("hr",null),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"\u6570\u636e\u7ed3\u6784")),Object(c.b)("p",null,"\u2022 \u4e00\u7ef4:\n\u2022 \u57fa\u7840:\u6570\u7ec4 array (string), \u94fe\u8868 linked list\n\u2022 \u9ad8\u7ea7:\u6808 stack, \u961f\u5217 queue, \u53cc\u7aef\u961f\u5217 deque, \u96c6\u5408 set, \u6620\u5c04 map (hash or map), etc"),Object(c.b)("p",null,"\u2022 \u4e8c\u7ef4:\n\u2022 \u57fa\u7840:\u6811 tree, \u56fe graph\n\u2022 \u9ad8\u7ea7:\u4e8c\u53c9\u641c\u7d22\u6811 binary search tree (red-black tree, AVL), \u5806 heap, \u5e76\u67e5\u96c6 disjoint set, \u5b57\u5178\u6811 Trie, etc"),Object(c.b)("p",null,"\u2022 \u7279\u6b8a:\n\u2022 \u4f4d\u8fd0\u7b97 Bitwise, \u5e03\u9686\u8fc7\u6ee4\u5668 BloomFilter \u2022 LRU Cache"),Object(c.b)("p",null,"\u6ce8\u610f:\u4e86\u89e3\u6bcf\u4e2a\u6570\u636e\u7ed3\u6784\u7684\u539f\u7406\u548c\u4ee3\u7801\u6846\u67b6"),Object(c.b)("p",null,"\u6570\u636e\u7ed3\u6784\u8111\u56fe"),Object(c.b)("p",null,Object(c.b)("a",{parentName:"p",href:"http://naotu.baidu.com/file/b832f043e2ead159d584cca4efb19703?token=7a6a56eb2630548c"},"http://naotu.baidu.com/file/b832f043e2ead159d584cca4efb19703?token=7a6a56eb2630548c")),Object(c.b)("hr",null),Object(c.b)("p",null,"\u7b97\u6cd5"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},"If-else, switch \u2014> branch")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},"for, while loop \u2014> Iteration")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},"\u9012\u5f52 Recursion (Divide & Conquer, Backtrace)")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},"\u641c\u7d22 Search: \u6df1\u5ea6\u4f18\u5148\u641c\u7d22 Depth first search, \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 Breadth first search, A*, etc")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},"\u52a8\u6001\u89c4\u5212 Dynamic Programming")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},"\u4e8c\u5206\u67e5\u627e Binary Search")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},"\u8d2a\u5fc3 Greedy")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},"\u6570\u5b66 Math , \u51e0\u4f55 Geometry\u2028 "))),Object(c.b)("p",null,"\u6ce8\u610f:\u5728\u5934\u8111\u4e2d\u56de\u5fc6\u4e0a\u9762\u6bcf\u79cd\u7b97\u6cd5\u7684\u601d\u60f3\u548c\u4ee3\u7801\u6a21\u677f"),Object(c.b)("p",null,"\u7b97\u6cd5\u8111\u56fe"),Object(c.b)("p",null,Object(c.b)("a",{parentName:"p",href:"http://naotu.baidu.com/file/0a53d3a5343bd86375f348b2831d3610?token=5ab1de1c90d5f3ec"},"http://naotu.baidu.com/file/0a53d3a5343bd86375f348b2831d3610?token=5ab1de1c90d5f3ec")),Object(c.b)("h3",{id:"deliberate-practicing"},"Deliberate Practicing"),Object(c.b)("p",null,"\u804c\u4e1a\u5316\u8fd0\u52a8"),Object(c.b)("p",null,"\u2022 \u57fa\u672c\u529f\u662f\u533a\u522b\u4e1a\u4f59\u548c\u804c\u4e1a\u9009\u624b\u7684\u6839\u672c\n\u2022 \u57fa\u7840\u52a8\u4f5c\u7684\u5206\u89e3\u8bad\u7ec3\u548c\u53cd\u590d\u7ec3\u4e60 \u2014> \u6700\u5927\u7684\u8bef\u533a"),Object(c.b)("p",null,"\u2022 \u4e52\u4e53\u7403 "),Object(c.b)("p",null,"\u2022 \u53f0\u7403\n\u2022 \u6ed1\u96ea"),Object(c.b)("hr",null),Object(c.b)("p",null,"\u523b\u610f\u7ec3\u4e60 \u2014 \u8fc7\u904d\u6570(\u4e94\u6bd2\u795e\u638c)\n\u2022 \u7ec3\u4e60\u7f3a\u9677\u3001\u5f31\u70b9\u5730\u65b9\n\u2022 \u4e0d\u8212\u670d\u3001\u4e0d\u723d\u3001\u67af\u71e5\n\u2022 \u751f\u6d3b\u4e2d\u4f8b\u5b50:\u4e52\u4e53\u7403\u3001\u53f0\u7403\u3001\u6e38\u620f\u7b49\u7b49"),Object(c.b)("h3",{id:"feedback"},"Feedback"),Object(c.b)("p",null,"\u2022 \u5373\u65f6\u53cd\u9988\n\u2022 \u4e3b\u52a8\u578b\u53cd\u9988(\u81ea\u5df1\u53bb\u627e)"),Object(c.b)("p",null,"\u2022 \u9ad8\u624b\u4ee3\u7801 (GitHub, LeetCode, etc.)"),Object(c.b)("p",null,"\u2022 \u7b2c\u4e00\u89c6\u89d2\u76f4\u64ad\n\u2022 \u88ab\u52a8\u5f0f\u53cd\u9988(\u9ad8\u624b\u7ed9\u4f60\u6307\u70b9)"),Object(c.b)("p",null,"\u2022 code review\n\u2022 \u6559\u7ec3\u770b\u4f60\u6253\uff0c\u7ed9\u4f60\u53cd\u9988"),Object(c.b)("h3",{id:"\u5207\u9898\u56db\u4ef6\u5957"},"\u5207\u9898\u56db\u4ef6\u5957"),Object(c.b)("p",null,"\u2022 Clarification\n\u2022 Possible solutions"),Object(c.b)("p",null,"\u2022 compare (time/space)"),Object(c.b)("p",null,"\u2022 optimal(\u52a0\u5f3a) \u2022 Coding(\u591a\u5199)\n\u2022 Test cases"),Object(c.b)("p",null,"\u5bf9\u5e94leecode\u4e0a\u7684\u9898\u89e3"),Object(c.b)("h3",{id:"\u4e94\u6b65\u5237\u9898\u6cd5-\u4e94\u6bd2\u795e\u638c"},"\u4e94\u6b65\u5237\u9898\u6cd5 \u4e94\u6bd2\u795e\u638c"),Object(c.b)("p",null,"\u5237\u9898\u7b2c\u4e00\u904d"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"5\u5206\u949f:\u8bfb\u9898 + \u601d\u8003"),Object(c.b)("li",{parentName:"ul"},"\u76f4\u63a5\u770b\u89e3\u6cd5:\u6ce8\u610f!\u591a\u89e3\u6cd5\uff0c\u6bd4\u8f83\u89e3\u6cd5\u4f18\u52a3"),Object(c.b)("li",{parentName:"ul"},"\u80cc\u8bf5\u3001\u9ed8\u5199\u597d\u7684\u89e3\u6cd5")),Object(c.b)("p",null,"\u5237\u9898\u7b2c\u4e8c\u904d"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"\u9a6c\u4e0a\u81ea\u5df1\u5199 \u2014> LeetCode \u63d0\u4ea4 "),Object(c.b)("li",{parentName:"ul"},"\u591a\u79cd\u89e3\u6cd5\u6bd4\u8f83\u3001\u4f53\u4f1a \u2014> \u4f18\u5316!")),Object(c.b)("p",null,"\u5237\u9898\u7b2c\u4e09\u904d"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"\u8fc7\u4e86\u4e00\u5929\u540e\uff0c\u518d\u91cd\u590d\u505a\u9898"),Object(c.b)("li",{parentName:"ul"},"\u4e0d\u540c\u89e3\u6cd5\u7684\u719f\u7ec3\u7a0b\u5ea6 \u2014> \u4e13\u9879\u7ec3\u4e60")),Object(c.b)("p",null,"\u5237\u9898\u7b2c\u56db\u904d"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"\u8fc7\u4e86\u4e00\u5468:\u53cd\u590d\u56de\u6765\u7ec3\u4e60\u76f8\u540c\u9898\u76ee")),Object(c.b)("p",null,"\u5237\u9898\u7b2c\u4e94\u904d"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"\u9762\u8bd5\u524d\u4e00\u5468\u6062\u590d\u6027\u8bad\u7ec3")),Object(c.b)("h3",{id:"\u2f83\u81ea\u9876\u5411\u4e0b\u7684\u7f16\u7a0b\u2f45\u65b9\u5f0f"},"\u2f83\u81ea\u9876\u5411\u4e0b\u7684\u7f16\u7a0b\u2f45\u65b9\u5f0f"),Object(c.b)("h4",{id:"125-\u9a8c\u8bc1\u56de\u6587\u4e32"},Object(c.b)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/valid-palindrome/"},"125. \u9a8c\u8bc1\u56de\u6587\u4e32")),Object(c.b)("ul",{className:"contains-task-list"},Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","\u7b2c\u4e00\u904d\uff1a\u7406\u89e3\uff0c\u80cc\u8bf5\uff0c\u63d0\u4ea4\u901a\u8fc7\uff082021-11-18\uff09"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","\u7b2c\u4e8c\u904d\uff1a\u81ea\u5df1\u5199\uff082021-11-18\uff09"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","\u7b2c\u4e09\u904d\uff1a\u8fc7\u4e00\u5929\u540e\u5199"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","\u7b2c\u56db\u904d\uff1a\u8fc7\u4e00\u5468\u540e\u5199"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","\u7b2c\u4e94\u904d\uff1a\u9762\u8bd5\u524d\u6062\u590d\u8bad\u7ec3")),Object(c.b)("h2",{id:"\u6570\u7ec4\uff0c\u94fe\u8868\uff0c\u8df3\u8868"},"\u6570\u7ec4\uff0c\u94fe\u8868\uff0c\u8df3\u8868"),Object(c.b)("h3",{id:"\u6570\u7ec4"},"\u6570\u7ec4"),Object(c.b)("h4",{id:"11-\u76db\u6700\u591a\u6c34\u7684\u5bb9\u5668"},Object(c.b)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/container-with-most-water/"},"11. \u76db\u6700\u591a\u6c34\u7684\u5bb9\u5668")),Object(c.b)("h4",{id:"283-\u79fb\u52a8\u96f6"},Object(c.b)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/move-zeroes/"},"283. \u79fb\u52a8\u96f6")),Object(c.b)("h4",{id:"70-\u722c\u697c\u68af"},Object(c.b)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/climbing-stairs/"},"70. \u722c\u697c\u68af")),Object(c.b)("h4",{id:"15-\u4e09\u6570\u4e4b\u548c"},Object(c.b)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/3sum/"},"15. \u4e09\u6570\u4e4b\u548c")),Object(c.b)("h3",{id:"\u94fe\u8868"},"\u94fe\u8868"),Object(c.b)("h4",{id:"206-\u53cd\u8f6c\u94fe\u8868"},Object(c.b)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/reverse-linked-list/"},"206. \u53cd\u8f6c\u94fe\u8868")),Object(c.b)("h4",{id:"146-lru-\u7f13\u5b58\u673a\u5236"},Object(c.b)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/lru-cache/"},"146. LRU \u7f13\u5b58\u673a\u5236")),Object(c.b)("h3",{id:"\u8df3\u8868"},"\u8df3\u8868"),Object(c.b)("h2",{id:"\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"},"\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"),Object(c.b)("p",null,"\u5904\u7406\u6811\u6216\u8005\u56fe\u7684\u95ee\u9898\u3002\u4e00\u822c\u9700\u8981\u501f\u52a9\u9012\u5f52\u3002\uff08\u9012\u5f52\u56de\u6eaf\uff0c\u52a8\u6001\u89c4\u5212\u7684\u9012\u5f52\u5199\u6cd5\uff0c\u90fd\u4f7f\u7528\u4e86\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u7684\u601d\u60f3\uff09"),Object(c.b)("p",null,"\u91cd\u8981\uff1a",Object(c.b)("strong",{parentName:"p"},"\u4ee3\u7801\u6a21\u677f")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-c++"},"//\u9012\u5f52\u5199\u6cd5\nvector visited = set();\nvoid dfs(node, visited){\n  //\u7ec8\u6b62\u6761\u4ef6\n  \n  //\u5904\u7406\u5f53\u524d\u5c42\u903b\u8f91\n  \n  //\u904d\u5386\u4e0b\u5c42\u8282\u70b9(2\u53c9\u6811\u5c31\u662f\u4e24\u4e2a\uff0c\u591a\u53c9\u6811\u5c31\u662f\u591a\u4e2a\uff0cn\u53c9\u6811\u5c31\u662ffor-loop n\u4e2a)\n  for(auto next_node: node.nexts) {\n    dfs(next_node, visited);\n  }\n}\n\n//\u975e\u9012\u5f52\u5199\u6cd5\ndef DFS(self, tree):\n    if tree.root is None:\n        return []\n    visited, stack = [], [tree.root]\n    while stack:\n       node = stack.pop()\n       visited.add(node)\n       process (node)\n       nodes = generate_related_nodes(node)\n       stack.push(nodes)\n    # other processing work\n")),Object(c.b)("h3",{id:"102-\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386"},Object(c.b)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/binary-tree-level-order-traversal/"},"102. \u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-c++"},"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\nprivate:\n    vector<vector<int>> ret;\npublic:\n    vector<vector<int>> levelOrder(TreeNode* root) {\n        dfs(0, root);\n        return ret;\n    }\n\n    void dfs(int level, TreeNode *node) {\n        //\u7ec8\u6b62\u6761\u4ef6\n        if(!node) {\n            return;\n        }\n        //\u5f53\u6211\u4eec\u8f6c\u5230\u65b0\u7684\u4e00\u5c42\u7684\u65f6\u5019\u5c31\u9700\u8981\u65b0\u589e\u4e00\u4e2a\u6570\u7ec4\n        if(level >= ret.size()) {\n            ret.push_back(vector<int>());\n        }\n        //\u5904\u7406\u5f53\u524d\u5c42\u903b\u8f91\n        ret[level].push_back(node->val);\n\n        //\u4e0b\u63a2\n        dfs(level + 1, node->left);\n        dfs(level + 1, node->right);\n    }\n};\n")),Object(c.b)("p",null,"\u975e\u9012\u5f52\u5199\u6cd5"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-c++"},"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\nprivate:\n    vector<vector<int>> ret;\npublic:\n    vector<vector<int>> levelOrder(TreeNode* root) {\n        //\u5f02\u5e38\u5224\u65ad\n        vector<vector<int>> ret;\n        if(!root) {\n            return ret;\n        }\n        stack<TreeNode *> sk1,sk2;  //sk1\u5b58\u653e\u5f53\u524d\u5c42\u7684\u5185\u5bb9\uff0csk2\u662f\u8fc7\u6e21\u5b58\u50a8sk1\u5230sk2.\n        sk1.push(root);\n        while(!sk1.empty()) {\n            vector<int> levelRet;\n            //\u62ff\u51fa\u68081\u7684\u5185\u5bb9\uff0c\u5e76\u4e14\u5c06\u5176\u51fa\u961fpush\u5230\u68082\n            while(!sk1.empty()) {\n                TreeNode *node = sk1.top();\n                sk1.pop();\n                levelRet.push_back(node->val);\n                sk2.push(node);\n            }\n            ret.push_back(levelRet);\n\n            while(!sk2.empty()) {\n                TreeNode *node = sk2.top();\n                sk2.pop();\n                if(node->left) sk1.push(node->left);\n                if(node->right) sk1.push(node->right);\n            }\n        }\n        return ret;\n    }\n\n};\n")),Object(c.b)("h4",{id:"515-\u5728\u6bcf\u4e2a\u6811\u884c\u4e2d\u627e\u6700\u5927\u503c"},Object(c.b)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/find-largest-value-in-each-tree-row/"},"515. \u5728\u6bcf\u4e2a\u6811\u884c\u4e2d\u627e\u6700\u5927\u503c")),Object(c.b)("p",null,"\u4e00\u6b21\u8fc7\u3002"),Object(c.b)("h2",{id:"\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"},"\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"),Object(c.b)("p",null,"\u5904\u7406\u6811\u6216\u8005\u56fe\u7684\u95ee\u9898\u3002\u4e00\u822c\u9700\u8981\u501f\u52a9queue\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u3002\u4e00\u822c\u662f\u6c42\u6700\u77ed\u95ee\u9898\u3002"),Object(c.b)("p",null,"\u91cd\u8981\uff1a",Object(c.b)("strong",{parentName:"p"},"\u4ee3\u7801\u6a21\u677f")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-c++"},"queue<int> que;//\u5efa\u7acb\u8f85\u52a9\u6570\u636e\u7ed3\u6784\nque.push(root);//\u6dfb\u52a0\u521d\u59cb\u6570\u636e\nwhile(!que.empty()) {\n  //1. \u51fa\u961f\uff1a\u5904\u7406\u5f53\u524d\u5c42\u903b\u8f91\n    Node *node = que.front()\n    que.pop();\n  \n  //2. \u5165\u961f\uff1a\u4e0b\u4e00\u5c42\u8282\u70b9\u5165\u961f\n  for(auto subNode : node->nexts) {\n    que.push(subNode);\n  }\n}\n")),Object(c.b)("h3",{id:"127-\u5355\u8bcd\u63a5\u9f99"},Object(c.b)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/word-ladder/"},"127. \u5355\u8bcd\u63a5\u9f99")),Object(c.b)("ul",{className:"contains-task-list"},Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","\u7b2c\u4e00\u904d\uff1a\u7406\u89e3\uff0c\u80cc\u8bf5\uff0c\u63d0\u4ea4\u901a\u8fc7\uff082021-11-23\uff09"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","\u7b2c\u4e8c\u904d\uff1a\u81ea\u5df1\u5199\uff082021-11-23\uff09"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","\u7b2c\u4e09\u904d\uff1a\u8fc7\u4e00\u5929\u540e\u5199"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","\u7b2c\u56db\u904d\uff1a\u8fc7\u4e00\u5468\u540e\u5199"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","\u7b2c\u4e94\u904d\uff1a\u9762\u8bd5\u524d\u6062\u590d\u8bad\u7ec3")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-c++"},"class Solution {\nprivate:\n    vector<vector<int>> g;\n    unordered_map<string, int> vertex_index;//\u5c06string \u6620\u5c04\u4e3aint\n    int wordNum = 0;\n\nprivate:\n    void addVertex(string word) {\n        if(!vertex_index.count(word)) {\n            vertex_index[word] = wordNum++;\n            g.push_back(vector<int>());//\u8fd9\u4e2a\u6b63\u597d\u548c\u7d22\u5f15index\u76f8\u5bf9\u5e94\u3002\n        }\n    }\n    void addEdge(string word) {\n        addVertex(word);\n        int v1 = vertex_index[word];\n\n        for(char &it: word) {\n            char tmp = it;\n            it = '*';\n            addVertex(word);\n            int v2 = vertex_index[word];\n            g[v1].push_back(v2);\n            g[v2].push_back(v1);\n\n            it = tmp;//\u5c06\u5176\u8fd8\u539f\n        }\n    }\n\npublic:\n    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {\n        //1. \u521b\u5efa\u90bb\u63a5\u8868\n        for(string word:wordList) {\n            addEdge(word);\n        }        \n        //\u5224\u65adendword\u662f\u5426\u5728\u91cc\u9762\u3002\n        if(!vertex_index.count(endWord)) {\n            return 0;\n        }\n\n        //\u5c06beginWord\u4e5f\u52a0\u5165\u5230\u56fe\u4e2d\n        addEdge(beginWord);\n\n        //2. \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u5f97\u5230*\u6700\u77ed*\u8f6c\u6362\u5e8f\u5217\n        queue<int> que;//\u8f85\u52a9\u6570\u636e\u7ed3\u6784\n        int beginV = vertex_index[beginWord], endV = vertex_index[endWord];\n        que.push(beginV);//\u91cd\u590d\u4f53\u4e4b\u524d\u7684\u521d\u59cb\u6761\u4ef6\n\n                vector<int> dis(wordNum,INT_MAX);//\u8ddd\u79bb\u6570\u7ec4        \n        dis[beginV] = 0;\n      \n        while(!que.empty()) {\n            int x = que.front();\n            que.pop();\n            if(x == endV) {\n                return dis[endV]/2 + 1;\n            }                    \n            for(int v : g[x]) {\n                if(dis[v] == INT_MAX) {\n                    dis[v] = dis[x] + 1;\n                    que.push(v);//\u5165\u961f\n                }\n            }\n        }\n        return 0;\n    }\n};\n")),Object(c.b)("h3",{id:"126-\u5355\u8bcd\u63a5\u9f99-ii"},Object(c.b)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/word-ladder-ii/"},"126. \u5355\u8bcd\u63a5\u9f99 II")),Object(c.b)("p",null,"TODO: \u672a\u505a\u51fa\u6765"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-c++"},"class Solution {\nprivate:\n    vector<vector<int>> g;//\u90bb\u63a5\u8868\n    unordered_map<string, int> v_indexs;//\u5c06\u5b57\u7b26\u4e32\u9690\u5c04\u4e3a\u7d22\u5f15\n    unordered_map<int, string> i_v;//\u5c06\u5b57\u7b26\u4e32\u9690\u5c04\u4e3a\u7d22\u5f15\uff0c\u65b9\u4fbfdfs\u7684\u65f6\u5019\u76f4\u63a5\u901a\u8fc7\u7d22\u5f15\u627e\u5230\u5b57\u7b26\u4e32\n    \n    int v_num = 0;\n\n    vector<vector<string>> ret;\nprivate:\n    void addToMap(string &str) {\n        if(!v_indexs.count(str)) {\n            v_indexs[str] = v_num;\n            i_v[v_num] = str;\n            v_num++;\n            g.push_back(vector<int>());//\u90bb\u63a5\u8868\u6dfb\u52a0\u4e00\u884c\uff0c\u8fd9\u4e00\u884c\u7684\u7d22\u5f15\u6b63\u597d\u548cv_num\u76f8\u7b49\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u8981\u8981\u7684\u6548\u679c\n        }\n    }\n    void addVertex(string &str) {\n        addToMap(str);\n        int v1 = v_indexs[str];\n\n        for(char &ch: str) {\n            char tmp = ch;\n            ch = '*';\n            addToMap(str);\n            int v2 = v_indexs[str];\n            g[v1].push_back(v2);\n            g[v2].push_back(v1);\n            ch = tmp;\n        }\n    }\n    void dfs(int level, int length, vector<string>& ans, int v_end, int v) {\n        if(level > length) {\n            return;\n        }\n        if(v == v_end) {\n            ret.push_back(ans);\n            return;\n        }\n\n        for(int p : g[v]) {\n            //\u5f53\u524dlevel\u662f\u5947\u6570\uff0c\u4e0b\u4e00\u5c42level\u662f\u5076\u6570\uff0c\u5076\u6570\u662f\u975e\u751f\u6210\u6811\n            if(level%2 == 1) {\n                ans.push_back(i_v[p]);\n            }\n            dfs(level + 1, length,ans ,v_end,p);\n            if(level%2 == 1) {\n                ans.pop_back();\n            }\n        }\n    }\n\npublic:\n    vector<vector<string>> findLadders(string beginWord, string endWord, vector<string>& wordList) {\n        \n        //1.\u521b\u5efa\u90bb\u63a5\u8868\n        for(string &str: wordList) {\n            addVertex(str);\n        }\n        \n        if(!v_indexs.count(endWord)) {\n            return ret;\n        }\n        //begin\u5982\u679c\u4e0d\u5728\u91cc\u9762\u5219\u6dfb\u52a0\n        if(!v_indexs.count(beginWord)) {\n            addVertex(beginWord);\n        }\n        \n\n        //2.\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff08\u5f97\u5230\u6700\u77ed\u8def\u5f84\u957f\u5ea6\uff09\n        int v_begin = v_indexs[beginWord], v_end = v_indexs[endWord];\n        \n        queue<int> que;\n        que.push(v_begin);      //\u521b\u5efa\u8f85\u52a9\u6570\u636e\u7ed3\u6784\u5e76\u8bbe\u7f6e\u597d\u521d\u59cb\u503c\uff01\n        \n        vector<int> dis(v_num,INT_MAX);//\u8f85\u52a9\u8bb0\u5f55\u662f\u5426\u8bbf\u95ee\u8fc7\n        dis[v_begin] = 0;       //\u521b\u5efa\u8f85\u52a9\u6570\u636e\u7ed3\u6784\u5e76\u8bbe\u7f6e\u597d\u521d\u59cb\u503c\uff01\n        \n        int short_length = 0;\n\n        while(!que.empty()) {\n            int x = que.front();\n            que.pop();\n            if(x == v_end) {\n                short_length = dis[v_end];\n                break;\n            }\n            for(int &v: g[x]) {\n                if(dis[v] == INT_MAX) {\n                    dis[v] = dis[x] + 1;\n                    que.push(v);\n                }\n            }\n        }\n        //2.\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff08\u5f97\u5230\u6700\u77ed\u8def\u5f84\uff09\n        vector<string> ans;\n        ans.push_back(beginWord);//\u8bbe\u7f6e\u521d\u59cb\u503c\n        dfs(0, short_length, ans,v_end,v_begin);\n        return ret;\n    }\n};\n\n")),Object(c.b)("h3",{id:"102-\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386-1"},Object(c.b)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/binary-tree-level-order-traversal/"},"102. \u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386")),Object(c.b)("ul",{className:"contains-task-list"},Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","\u7b2c\u4e00\u904d\uff1a\u7406\u89e3\uff0c\u80cc\u8bf5\uff0c\u63d0\u4ea4\u901a\u8fc7\uff082021-11-23\uff09"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","\u7b2c\u4e8c\u904d\uff1a\u81ea\u5df1\u5199\uff082021-11-23\uff09"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","\u7b2c\u4e09\u904d\uff1a\u8fc7\u4e00\u5929\u540e\u5199"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","\u7b2c\u56db\u904d\uff1a\u8fc7\u4e00\u5468\u540e\u5199"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","\u7b2c\u4e94\u904d\uff1a\u9762\u8bd5\u524d\u6062\u590d\u8bad\u7ec3")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-c++"},"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<vector<int>> levelOrder(TreeNode* root) {\n        vector<vector<int>> ret;\n        // \u5f02\u5e38\u5224\u65ad(\u5f02\u5e38\u5224\u65ad\u4e0d\u80fd\u5c11)\n        if(!root) {\n            return ret;\n        }\n\n        //\u6dfb\u52a0\u8f85\u52a9\u6570\u636e\u7ed3\u6784que\uff0c\u5e76\u8bbe\u7f6e\u521d\u59cb\u6761\u4ef6\n        queue<TreeNode *> que;\n        que.push(root);\n        \n        while(!que.empty()) {\n            vector<int> tmpRet;\n            queue<TreeNode *> tmpque;\n            while(!que.empty()) {\n                TreeNode *node = que.front();\n                tmpRet.push_back(node->val);\n                que.pop();            \n                if(node->left) tmpque.push(node->left);\n                if(node->right) tmpque.push(node->right);                \n            }\n            que = tmpque;\n            ret.push_back(tmpRet);\n        }\n        return ret;\n    }    \n};\n")),Object(c.b)("h3",{id:"433-\u6700\u5c0f\u57fa\u56e0\u53d8\u5316"},Object(c.b)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/minimum-genetic-mutation/"},"433. \u6700\u5c0f\u57fa\u56e0\u53d8\u5316")),Object(c.b)("p",null,"\u6ce8\u610f\u6811\u548c\u56fe\u7684\u5dee\u522b\u3002"),Object(c.b)("ul",{className:"contains-task-list"},Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","\u7b2c\u4e00\u904d\uff1a\u7406\u89e3\uff0c\u80cc\u8bf5\uff0c\u63d0\u4ea4\u901a\u8fc7\uff082021-11-23\uff09"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","\u7b2c\u4e8c\u904d\uff1a\u81ea\u5df1\u5199\uff082021-11-23\uff09"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","\u7b2c\u4e09\u904d\uff1a\u8fc7\u4e00\u5929\u540e\u5199"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","\u7b2c\u56db\u904d\uff1a\u8fc7\u4e00\u5468\u540e\u5199"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","\u7b2c\u4e94\u904d\uff1a\u9762\u8bd5\u524d\u6062\u590d\u8bad\u7ec3")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-c++"},"class Solution {\nprivate:\n    vector<vector<int>> g;\n    unordered_map<string, int> v_indexs;\n    int vNum = 0;\nprivate:\n    void addStr(string &str) {\n        if(!v_indexs.count(str)){\n            v_indexs[str] = vNum++;\n            g.push_back(vector<int>());\n        }    \n    }\n    void addVertex(string &str) {\n        addStr(str);\n        int v1 = v_indexs[str];\n        for(char &ch: str) {\n            char tmp = ch;\n            ch = '*';\n            addStr(str);\n            int v2 = v_indexs[str];\n            g[v1].push_back(v2);\n            g[v2].push_back(v1);   \n            ch = tmp;\n        }\n    }\n\npublic:\n    int minMutation(string start, string end, vector<string>& bank) {\n        //\u521b\u5efa\u51fa\u4e00\u4e2a\u56fe\u7ed3\u6784\uff0c\u4e24\u70b9\u4e4b\u95f4\u53d8\u5316\u76f8\u5dee1\n        for(string str: bank) {\n            addVertex(str);        \n        }\n\n        //\u5224\u65adend\u662f\u5426\u5728\u5176\u4e2d\n        if(!v_indexs.count(end)) {\n            return -1;\n        }\n\n        //\u5c06start\u52a0\u5165\u56fe\n        addVertex(start);\n\n        //\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u627e\u51fa\u6700\u77ed\u7684\u8def\u5f84\uff08\u4e0b\u9762\u8fd9\u6bb5\u51e0\u4e4e\u662f\u56fa\u5b9a\u5199\u6cd5\uff0c\u8bf7\u7262\u8bb0\uff09\n        queue<int> que;\n        int startV = v_indexs[start] , endV = v_indexs[end];\n        que.push(startV);\n        vector<int> dis(vNum, INT_MAX);\n        dis[startV] = 0;\n\n        while(!que.empty()) {\n            int v = que.front();\n            if(v == endV) {\n                return dis[endV]/2;\n            }\n            que.pop();\n            for(int t:g[v]) {\n                if(dis[t] == INT_MAX) {\n                    que.push(t);\n                    dis[t] = dis[v] + 1;\n                }\n                \n            }        \n        }\n        return -1;\n    }    \n};\n")),Object(c.b)("h2",{id:"trie-\u5b57\u5178\u6811-\u524d\u7f00\u6811"},"trie-\u5b57\u5178\u6811-\u524d\u7f00\u6811"),Object(c.b)("h3",{id:"208-\u5b9e\u73b0-trie-\u524d\u7f00\u6811"},Object(c.b)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/implement-trie-prefix-tree/"},"208. \u5b9e\u73b0 Trie (\u524d\u7f00\u6811)")),Object(c.b)("ul",{className:"contains-task-list"},Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","\u7b2c\u4e00\u904d\uff1a\u7406\u89e3\uff0c\u80cc\u8bf5\uff0c\u63d0\u4ea4\u901a\u8fc7\uff082021-11-18\uff09"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","\u7b2c\u4e8c\u904d\uff1a\u81ea\u5df1\u5199\uff082021-11-18\uff09"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","\u7b2c\u4e09\u904d\uff1a\u8fc7\u4e00\u5929\u540e\u5199"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","\u7b2c\u56db\u904d\uff1a\u8fc7\u4e00\u5468\u540e\u5199"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","\u7b2c\u4e94\u904d\uff1a\u9762\u8bd5\u524d\u6062\u590d\u8bad\u7ec3")),Object(c.b)("h3",{id:"212-\u5355\u8bcd\u641c\u7d22-ii"},Object(c.b)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/word-search-ii/"},"212. \u5355\u8bcd\u641c\u7d22 II")),Object(c.b)("p",null,"\uff082021-11-18\uff09"),Object(c.b)("ul",{className:"contains-task-list"},Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","\u7b2c\u4e00\u904d\uff1a\u7406\u89e3\uff0c\u80cc\u8bf5\uff0c\u63d0\u4ea4\u901a\u8fc7"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","\u7b2c\u4e8c\u904d\uff1a\u81ea\u5df1\u5199"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","\u7b2c\u4e09\u904d\uff1a\u8fc7\u4e00\u5929\u540e\u5199"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","\u7b2c\u56db\u904d\uff1a\u8fc7\u4e00\u5468\u540e\u5199"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","\u7b2c\u4e94\u904d\uff1a\u9762\u8bd5\u524d\u6062\u590d\u8bad\u7ec3")),Object(c.b)("h2",{id:"\u5e76\u67e5\u96c6-union"},"\u5e76\u67e5\u96c6-union"),Object(c.b)("p",null," ",Object(c.b)("a",{parentName:"p",href:"https://leetcode.com/problems/number-of-provinces/"},"547.Number of Provinces")," "),Object(c.b)("p",null,"\u670b\u53cb\u5708\u6570\u91cf"),Object(c.b)("h3",{id:"\u5c9b\u5c7f\u6570\u91cf"},Object(c.b)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/number-of-provinces/"},"\u5c9b\u5c7f\u6570\u91cf")),Object(c.b)("p",null,Object(c.b)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/bLyHh0/"},"\u5251\u6307 Offer II 116. \u7701\u4efd\u6570\u91cf")),Object(c.b)("p",null,"\uff082021-11-18\uff09"),Object(c.b)("ul",{className:"contains-task-list"},Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","\u7b2c\u4e00\u904d\uff1a\u7406\u89e3\uff0c\u80cc\u8bf5\uff0c\u63d0\u4ea4\u901a\u8fc7"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","\u7b2c\u4e8c\u904d\uff1a\u81ea\u5df1\u5199"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","\u7b2c\u4e09\u904d\uff1a\u8fc7\u4e00\u5929\u540e\u5199"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","\u7b2c\u56db\u904d\uff1a\u8fc7\u4e00\u5468\u540e\u5199"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","\u7b2c\u4e94\u904d\uff1a\u9762\u8bd5\u524d\u6062\u590d\u8bad\u7ec3")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-c++"},"class UnionFind {\nprivate:\n    vector<int> parent;\npublic:\n    int count;\n    //\u521b\u5efa\u7684\u65f6\u5019\u4ee3\u8868\u6709n\u4e2a\u5b64\u7acb\u7684\u96c6\u5408\n    UnionFind(int n):count(n),parent(n) {\n        for(int i = 0; i < n; i++) {\n            parent[i] = i;\n        }\n    }\n    //\u627e\u5230\u4ed6\u6240\u5c5e\u7684\u7ed3\u5408(p\u548cq\u7684\u542b\u4e49\u662f\u4e0b\u6807\uff0cparent[p]\u4ee3\u8868\u5176\u6240\u5c5e\u7684\u96c6\u5408\u7684\u6807\u8bc6)(\u5706\u5708\u4ee3\u8868p,q,\u7bad\u5934\u6307\u5411\u4ee3\u8868parent[p])\n    int Find(int p){\n        int root = p;\n        while(root != parent[root]) {\n            //\u8ba9p\u7684parent\u7f51\u4e0a\u8d70\u4e00\u6b65\uff0c\u6307\u5411\u7237\u7237\n            parent[root] = parent[parent[root]];//p\u7684parent\u7f51\u4e0a\u8d70\u4e86\u4e00\u6b65\n            root = parent[root];                  //p\u8d70\u5230\u4e86\u4ed6\u7237\u7237\u90a3\u91cc\n        }\n\n        //\u8def\u5f84\u538b\u7f29\n        while(parent[p] != p) {\n            int x = p;\n            p = parent[p];// i\u5f80\u4e0a\u8d70\n            parent[x] = root;//\u5c06x\u6307\u5411\u6839\uff1aroot\n        }\n\n        return root;\n    }\n    //\u5408\u5e76\u4e24\u4e2a\u96c6\u5408(p\u548cq\u7684\u542b\u4e49\u662f\u4e0b\u6807\uff0cparent[p],parent[q]\u662f\u6570\u7ec4\u7684\u5185\u5bb9\uff0c\u4ee3\u8868\u5176\u6240\u5c5e\u7684\u96c6\u5408)\n    void Union(int p, int q){ \n        int rootp = Find(p);\n        int rootq = Find(q);\n        if(rootp == rootq) {\n            return;\n        }\n        parent[rootq] = rootp;\n        count --;\n        return;\n    }\n};\n\nclass Solution {\npublic:\n    int findCircleNum(vector<vector<int>>& isConnected) {\n        /*\n        a:\u4e8c\u7ef4\u6570\u7ec4\u7684\u884c\u6570\u6216\u8005\u5217\u6570N\u4ee3\u8868\u5404\u81ea\u72ec\u7acb\u7684\u96c6\u5408\u3002\n        b:\u904d\u5386\u5173\u7cfb\u77e9\u9635M\uff1aM[i][j] -> \u5408\u5e76\n        c:\u67e5\u770b\u6709\u591a\u5c11\u4e2a\u5b64\u7acb\u7684\u96c6\u5408\n        */\n        UnionFind unionFind(isConnected.size());\n\n        for(int i = 0; i < isConnected.size(); i++) {\n            for(int j = 0; j < isConnected[0].size(); j++) {\n                if(isConnected[i][j]) {\n                    unionFind.Union(i,j);\n                }\n            }\n        }\n        return unionFind.count;\n\n    }\n};\n")),Object(c.b)("h2",{id:"\u9ad8\u7ea7\u641c\u7d22"},"\u9ad8\u7ea7\u641c\u7d22"),Object(c.b)("ol",null,Object(c.b)("li",{parentName:"ol"},Object(c.b)("p",{parentName:"li"},"\u6734\u7d20\u641c\u7d22")),Object(c.b)("li",{parentName:"ol"},Object(c.b)("p",{parentName:"li"},"\u4f18\u5316\u65b9\u5f0f:\u4e0d\u91cd\u590d(fibonacci)\u3001\u526a\u679d(\u751f\u6210\u62ec\u53f7\u95ee\u9898)")),Object(c.b)("li",{parentName:"ol"},Object(c.b)("p",{parentName:"li"},"\u641c\u7d22\u65b9\u5411:\nDFS: depth first search \u6df1\u5ea6\u4f18\u5148\u641c\u7d22 BFS: breadth first search \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"),Object(c.b)("p",{parentName:"li"},"\u53cc\u5411\u641c\u7d22\u3001\u542f\u53d1\u5f0f\u641c\u7d22"))),Object(c.b)("h3",{id:"\u4e0d\u91cd\u590d\u8bb0\u5fc6\u526a\u679d\u56de\u6eaf"},"\u4e0d\u91cd\u590d/\u8bb0\u5fc6+\u526a\u679d/\u56de\u6eaf"),Object(c.b)("h4",{id:"70-\u722c\u697c\u68af-1"},Object(c.b)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/climbing-stairs/"},"70. \u722c\u697c\u68af")),Object(c.b)("p",null,"\uff082021-11-18\uff09"),Object(c.b)("ul",{className:"contains-task-list"},Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","\u7b2c\u4e00\u904d\uff1a\u7406\u89e3\uff0c\u80cc\u8bf5\uff0c\u63d0\u4ea4\u901a\u8fc7"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","\u7b2c\u4e8c\u904d\uff1a\u81ea\u5df1\u5199"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","\u7b2c\u4e09\u904d\uff1a\u8fc7\u4e00\u5929\u540e\u5199"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","\u7b2c\u56db\u904d\uff1a\u8fc7\u4e00\u5468\u540e\u5199"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","\u7b2c\u4e94\u904d\uff1a\u9762\u8bd5\u524d\u6062\u590d\u8bad\u7ec3")),Object(c.b)("p",null,"\u5206\u6cbb"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-c++"},"class Solution {\npublic:\n    int climbStairs(int n) {\n        /*\n            1: 1\n            2: 2\n            3: 3\n            f(n) = f(n-1) + f(n-2);\n        */\n        if(n < 3) {\n            return n;            \n        }\n        //1.\u521d\u59cb\u6761\u4ef6\n        int dp_pre1 = 2;\n        int dp_pre2 = 1;        \n        \n        //2.\u91cd\u590d\u4f53\u7ed3\u675f\u6761\u4ef6\n        for(int i = 3; i <= n ; i++) {\n            //\u5904\u7406\u5f53\u524d\u5c42\u903b\u8f91\n            int dp = dp_pre1 + dp_pre2;\n            //\u4e3a\u8fdb\u5165\u4e0b\u4e00\u5c42\u505a\u51c6\u5907\n            dp_pre2 = dp_pre1;\n            dp_pre1 = dp;\n        }\n\n        return dp_pre1;\n    }\n};\n")),Object(c.b)("p",null,"\u9012\u5f52\u662f\u4ece\u540e\u5f80\u524d\u63a8\u3002\u8fed\u4ee3\u662f\u4ece\u524d\u5f80\u540e\u63a8\u3002"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-c++"},"class Solution {\nprivate:\n    map<int, int> memo;\npublic:\n    int climbStairs(int n) {\n        return dfs(n);\n    }\n\n    int dfs(int level) {\n        //\u7ed3\u675f\u6761\u4ef6\n        if(level <= 2) {\n            return level;\n        }\n\n        //\u5904\u7406\u5f53\u524d\u5c42\u903b\u8f91(\u5229\u7528\u7f13\u5b58\u8fdb\u884c\u526a\u679d\uff0c\u7a7a\u95f4\u6362\u65f6\u95f4)\n        if(memo[level] == 0) {\n            //drill down\n            memo[level] = dfs(level-1) + dfs(level-2);\n        }\n        return memo[level];\n    }\n};\n")),Object(c.b)("h4",{id:"22-\u62ec\u53f7\u751f\u6210"},Object(c.b)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/generate-parentheses/"},"22. \u62ec\u53f7\u751f\u6210")),Object(c.b)("p",null,"\uff082021-11-18\uff09"),Object(c.b)("ul",{className:"contains-task-list"},Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","\u7b2c\u4e00\u904d\uff1a\u7406\u89e3\uff0c\u80cc\u8bf5\uff0c\u63d0\u4ea4\u901a\u8fc7"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","\u7b2c\u4e8c\u904d\uff1a\u81ea\u5df1\u5199"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","\u7b2c\u4e09\u904d\uff1a\u8fc7\u4e00\u5929\u540e\u5199"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","\u7b2c\u56db\u904d\uff1a\u8fc7\u4e00\u5468\u540e\u5199"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","\u7b2c\u4e94\u904d\uff1a\u9762\u8bd5\u524d\u6062\u590d\u8bad\u7ec3")),Object(c.b)("p",null,"\u56de\u6eaf\u6cd5"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-c++"},'class Solution {\nprivate:\n    vector<string> ret;\npublic:\n    vector<string> generateParenthesis(int n) {\n        /*\n        \u5bfb\u627e\u91cd\u590d\u6027\uff0c\u5728\u91cd\u590d\u7684\u8fc7\u7a0b\u4e2d\u5904\u7406\u903b\u8f91\u3002\n        \u6ce8\u610f\u91cd\u590d\u7684\u5f00\u59cb\u6761\u4ef6\uff0c\u7ed3\u675f\u6761\u4ef6\uff0c\u548c\u91cd\u590d\u63a8\u8fdb\u903b\u8f91\uff08\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff09\u3002\n        \n        \u91cd\u590d\u7684\u5f00\u59cb\u6761\u4ef6\uff1a\n        1. \u9012\u5f52\uff0c\u9012\u5f52\u8c03\u7528\u7684\u65f6\u5019\u7528\u53c2\u6570\u4f20\u5165\n        2. \u5faa\u73af\uff0c\u5faa\u73af\u8fdb\u5165\u524d\uff0c\u8bbe\u7f6e\u597d\u5c40\u90e8\u53d8\u91cf\n\n        \u91cd\u590d\u7ed3\u675f\u6761\u4ef6\uff1a\n        1. \u9012\u5f52\uff0c\u5c42\u7ea7\u7684\u7ed3\u675f\uff0c\u786e\u5b9a\u597d\u6700\u5927\u5c42\uff0c\u5982\u679c\u662f\u9012\u51cf\uff0c\u5219\u76f8\u5bf9\u7b80\u5355\uff0c\u5927\u4e8e0\u662f\u7ed3\u675f\u6761\u4ef6\u3002\n        2. \u5faa\u73af\uff0c\u8bbe\u7f6e\u597d\u5faa\u73af\u7684\u7ed3\u675f\u6761\u4ef6\u3002\n\n        \u91cd\u590d\u63a8\u8fdb\u903b\u8f91\uff08\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff09\n        1. \u9012\u5f52\uff1a\u67d0\u4e9b\u6761\u4ef6\u4e0b\u653e\u5f03\u9012\u5f52\u3002\uff08\u4e0d\u8c03\u7528\u9012\u5f52\uff09\uff0c\u67d0\u4e9b\u6761\u4ef6\u4e0b\u8c03\u7528\u9012\u5f52\u3002\uff08\u8fd9\u53eb\u5206\u6cbb\u6216\u8005\u526a\u679d\uff09\n        2. \u5faa\u73af\uff1a\u597d\u50cf\u4e0d\u592a\u597d\u6574\uff0c\u5faa\u73af\u6761\u4ef6i++\u597d\u50cf\u5c11\u4e0d\u4e86\n        */\n        dfs(n,n,"");\n        return ret;\n    }\n\n    //\u5206\u6cbb+\u56de\u6eaf+\u526a\u679d\uff08\u4ece\u5355\u7ebf\u7a0b\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u786e\u5b9e\u662f\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff09\n    void dfs(int left, int right, string ans) {\n        //1. \u7ed3\u675f\u6761\u4ef6\n        if(left == 0 && right == 0) {\n            ret.push_back(ans);\n            return;\n        }\n        //2. \u5904\u7406\u903b\u8f91\n        //\u526a\u679d:\u5982\u679c\u5269\u4e0b\u7684\u5de6\u62ec\u53f7\u6bd4\u53f3\u62ec\u53f7\u8fd8\u591a\uff0c\u90a3\u5c31\u6ca1\u5f97\u73a9\u4e86\uff0c\u53ef\u4ee5\u526a\u679d\n        if (left == right) {\n            //\u5982\u679c\u76f8\u7b49\uff0c\u53ea\u80fd\u6dfb\u52a0\u5de6\u62ec\u53f7\n            dfs(left-1, right ,ans+"(");\n        }\n        else if (left < right) {\n            //\u5982\u679c\u5de6\u6bd4\u53f3\u5c11\uff08\u5de6\u5927\u4e8e0\u7684\u65f6\u5019\u53ef\u4ee5\u6dfb\u52a0\u5de6\u62ec\u53f7\u4e5f\u53ef\u4ee5\u6dfb\u52a0\u53f3\u62ec\u53f7\uff09\uff08\u5de6\u7b49\u4e8e0\u7684\u65f6\u5019\u53ea\u80fd\u6dfb\u52a0\u53f3\u62ec\u53f7\uff09\n            if (left > 0) {\n                dfs(left-1, right ,ans+"(");\n            }\n            dfs(left, right-1 ,ans+")");\n        }\n    }\n};\n')),Object(c.b)("p",null,"TODO\uff1a\u52a8\u6001\u89c4\u5212\uff08\u4e0d\u7406\u89e3\uff09"),Object(c.b)("p",null,Object(c.b)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/generate-parentheses/solution/zui-jian-dan-yi-dong-de-dong-tai-gui-hua-bu-lun-da/"},"https://leetcode-cn.com/problems/generate-parentheses/solution/zui-jian-dan-yi-dong-de-dong-tai-gui-hua-bu-lun-da/")),Object(c.b)("p",null,"\u52a8\u6001\u89c4\u5212\u91cd\u70b9\u5728\u4e8e\u6570\u5b66\u5f52\u7eb3\u6cd5\uff0c\u518d\u641e\u51fa\u524d\u51e0\u4e2a\u770b\u4e00\u770b\uff0c\u7136\u540e\u518d\u9012\u63a8\uff01\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u3002"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-c++"},'/*\n()\n\n(())\n()()\n\n((()))\n(()())\n(())()\n()(())\n()()()\n\n\u6838\u5fc3\u7684\u601d\u60f3\u662f\uff0c\u8003\u8651 i=n \u65f6\u76f8\u6bd4 n-1 \u7ec4\u62ec\u53f7\u589e\u52a0\u7684\u90a3\u4e00\u7ec4\u62ec\u53f7\u7684\u4f4d\u7f6e\u3002\n\u6211\u4eec\u8003\u8651\u6574\u4e2a\u62ec\u53f7\u6392\u5217\u4e2d\u6700\u5de6\u8fb9\u7684\u62ec\u53f7\u3002\n\u5b83\u4e00\u5b9a\u662f\u4e00\u4e2a\u5de6\u62ec\u53f7\uff0c\u90a3\u4e48\u5b83\u53ef\u4ee5\u548c\u5b83\u5bf9\u5e94\u7684\u53f3\u62ec\u53f7\u7ec4\u6210\u4e00\u7ec4\u5b8c\u6574\u7684\u62ec\u53f7 "( )"\uff0c\u6211\u4eec\u8ba4\u4e3a\u8fd9\u4e00\u7ec4\u662f\u76f8\u6bd4 n-1 \u589e\u52a0\u8fdb\u6765\u7684\u62ec\u53f7\u3002\n\n\u4f5c\u8005\uff1ayuyu-13\n\u94fe\u63a5\uff1ahttps://leetcode-cn.com/problems/generate-parentheses/solution/zui-jian-dan-yi-dong-de-dong-tai-gui-hua-bu-lun-da/\n\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n*/\nclass Solution {\npublic:\n    vector<string> generateParenthesis(int n) {\n\n        if(n == 0) return {};\n        if(n == 1) return {"()"};\n\n        //\u7ec4\u6210\u62ec\u53f7\u7684\u72b6\u6001\u6570\u7ec4\n        vector<vector<string>> dp(n+1);\n\n        dp[0] = {""};\n        dp[1] = {"()"};\n\n        for(int i = 2; i <= n; i++) {\n            for(int j = 0; j < i; j++) {\n                for(string p : dp[j]) {\n                    for(string q : dp[i-j-1]) {\n                        string str = "(" + p + ")" + q;\n                        dp[i].push_back(str);\n                    }\n                }\n            }\n        }\n        return dp[n];\n\n    }\n};\n')),Object(c.b)("h4",{id:"51-n-\u7687\u540e"},Object(c.b)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/n-queens/"},"51. N \u7687\u540e")),Object(c.b)("ul",{className:"contains-task-list"},Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","\u7b2c\u4e00\u904d\uff1a\u7406\u89e3\uff0c\u80cc\u8bf5\uff0c\u63d0\u4ea4\u901a\u8fc7"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","\u7b2c\u4e8c\u904d\uff1a\u81ea\u5df1\u5199"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","\u7b2c\u4e09\u904d\uff1a\u8fc7\u4e00\u5929\u540e\u5199"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","\u7b2c\u56db\u904d\uff1a\u8fc7\u4e00\u5468\u540e\u5199"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","\u7b2c\u4e94\u904d\uff1a\u9762\u8bd5\u524d\u6062\u590d\u8bad\u7ec3")),Object(c.b)("p",null,"\u56de\u6eaf"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-c++"},"class Solution {\nprivate:\n    //\u5b58\u6240\u6709\u7684\u7ed3\u679c\n    vector<vector<string>> res;             \n\npublic:\n    vector<vector<string>> solveNQueens(int n) {        \n        //\u5b58\u4e2d\u95f4\u7684\u67d0\u4e2a\u7ed3\u679c\n//      TODO:\u8bbe\u7f6e\u521d\u59cb\u503c\uff0c\u8fd9\u5757\u4e0d\u719f\n        vector<string>ans(n, string(n, '.'));\n        /*\n        \u4ece\u7b2c0\u884c\u5f00\u59cb\uff0c\u9012\u5f52\u56de\u6eaf\u3002ans\u76f8\u5f53\u4e8e\u5728\u5c42\u7ea7\u7a7f\u8d8a\u65f6\u643a\u5e26\u7684\u888b\u5b50\u3002\u7528\u6765\u88c5\u5728\u6bcf\u4e2a\u623f\u95f4\u627e\u5230\u7684\u7ebf\u7d22\u3002\n        \u6682\u65f6\u627e\u5230\u4e86\u5c31\u5c06\u5176\u88c5\u5230\u888b\u5b50\u91cc\u3002ans[row][col] = 'Q';\n        \u7136\u540e\u8fdb\u5165\u4e0b\u4e00\u5c42\u5bfb\u627e\uff0c\u76f4\u5230\u5230\u8fbe\u6700\u540e\u4e00\u5c42\uff0c\u8868\u660e\u627e\u5230\u4e00\u4e2a\u7ed3\u679c\u3002\n        \n        \u627e\n        */\n        dfs(0,n,ans);\n\n        return res;\n    }\n\nprivate:\n  //\u5bf9\u4e8e\u5730\u5740\u4e0d\u53d8\u7684\u53d8\u91cf\uff0c\u6211\u4eec\u4f20\u5f15\u7528\u5c31\u884c\n    void dfs(int row, int &n, std::vector<std::string> &ans) {        \n        if(row == n) {\n            //\u627e\u5230\u4e86\u4e00\u4e2a\u7ed3\u679c\uff0c\u8fd4\u56de\n            res.push_back(ans);\n            return;\n        }\n        for(int col = 0; col < n; col++) {\n            //\u770b\u770b\u8fd9\u4e2a\u7687\u540e\u5b89\u6392\u5728\u54ea\u91cc\u597d\n            if(isValid(ans, row, col, n)) {\n                ans[row][col] = 'Q';\n                //\u8fd9\u4e00\u5c42\u7684\u7687\u540e\u5df2\u7ecf\u5b89\u6392\u597d\uff0c\u8fdb\u5165\u4e0b\u4e00\u5c42\n                dfs(row + 1, n, ans);//\u94bb\u5165\u4e0b\u4e00\u5c42\u5e76\u8fd4\u56de\u3002\n                //\u56de\u6eaf\uff1a\u4ece\u4e0b\u5c42\u56de\u6765\u4e4b\u540e\uff0c\u8981\u53bb\u904d\u5386\u5176\u4ed6\u53ef\u80fd\u6027\uff0c\u72b6\u6001\u8fd8\u539f,\u8fdb\u5165\u540c\u5c42\u7684\u4e0b\u4e2a\u5206\u652f\u5faa\u73af\u3002\uff08\u540c\u5c42\u7684\u6362\u4e2a\u623f\u95f4\u8bd5\u4e00\u8bd5\uff0c\u5e76\u4e14\u628a\u540c\u5c42\u7684\u4e0a\u4e2a\u623f\u95f4\u751f\u6210\u7684\u4e34\u65f6\u7ed3\u679c\u7ed9\u6e05\u7406\u5e72\u51c0\uff09\n                ans[row][col] = '.';\n            }\n            //\u8fd9\u4e2a\u5faa\u73af\u7ed3\u675f\u540e\uff0c\u5c31\u8fdb\u5165\u4e86\u540c\u5c42\u7684\u4e0b\u4e2a\u623f\u95f4\uff0c\u7ee7\u7eed\u63a2\u7d22\n       }\n      //\u4e00\u4e2a\u5faa\u73af\u5b8c\u4e86\u4ee3\u8868\u4e00\u5c42\u6240\u6709\u7684\u623f\u95f4\u90fd\u8bd5\u8fc7\u4e86\uff01\n    }\n    /*\n    ans: \u5f53\u524d\u7684\u6392\u653e\u7ed3\u679c\n    row: \u8981\u6392\u653e\u7684\u884c\n    col: \u8981\u6392\u653e\u7684\u5217\n    */\n    bool isValid(std::vector<std::string> &ans, int row, int col, int n) {\n        //\u5224\u65ad\u5bf9\u5e94\u7684\u5217\u662f\u5426\u51b2\u7a81\uff08\u53ea\u548c\u4e0a\u9762\u7684\u6bd4\u8f83\u5c31\u884c\uff09\n        for(int i = 0; i < row; i++) {\n            if(ans[i][col] == 'Q')\n                return false;\n        }\n\n        //\u5224\u65adpie\u7ebf\u662f\u5426\u51b2\u7a81\uff08\u53ea\u548c\u4e0a\u9762\u7684\u6bd4\u8f83\u5c31\u884c\uff09\n        for(int i = row - 1, j = col + 1; i >= 0 && j < n; --i, ++j) {\n            if(ans[i][j] == 'Q') \n                return false;\n        }\n\n        //\u5224\u65adna\u7ebf\u662f\u5426\u51b2\u7a81\uff08\u53ea\u548c\u4e0a\u9762\u7684\u6bd4\u8f83\u5c31\u884c\uff09\n        for(int i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\n            if(ans[i][j] == 'Q') \n                return false;\n        }\n\n        //\u90fd\u4e0d\u51b2\u7a81\n        return true;\n    }\n\n};\n")),Object(c.b)("h4",{id:"36-\u6709\u6548\u7684\u6570\u72ec"},Object(c.b)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/valid-sudoku/"},"36. \u6709\u6548\u7684\u6570\u72ec")),Object(c.b)("ul",{className:"contains-task-list"},Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","\u7b2c\u4e00\u904d\uff1a\u7406\u89e3\uff0c\u80cc\u8bf5\uff0c\u63d0\u4ea4\u901a\u8fc7"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","\u7b2c\u4e8c\u904d\uff1a\u81ea\u5df1\u5199"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","\u7b2c\u4e09\u904d\uff1a\u8fc7\u4e00\u5929\u540e\u5199"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","\u7b2c\u56db\u904d\uff1a\u8fc7\u4e00\u5468\u540e\u5199"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","\u7b2c\u4e94\u904d\uff1a\u9762\u8bd5\u524d\u6062\u590d\u8bad\u7ec3")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-c++"},"class Solution {\npublic:\n    bool isValidSudoku(vector<vector<char>>& board) {\n\n        for(int i = 0; i < 9; i++) {\n            for(int j = 0; j < 9; j++) {\n                char ch = board[i][j];\n                if(ch != '.') {\n                    //\u884c\n                    for(int col = 0; col < 9; col++) {\n                        if(col != j && ch == board[i][col]) {\n                            return false;\n                        }\n                    }\n                    //\u5217\n                    for(int row = 0; row < 9; row++) {\n                        if(row != i && ch == board[row][j]) {\n                            return false;\n                        }\n                    }\n                    //3*3\u65b9\u683c(\u65b9\u683c\u5b9a\u4f4d)\n                    int row_l = i/3;\n                    int col_l = j/3;\n                    for(int i_k = row_l*3; i_k < (row_l+1)*3; i_k++) {\n                        for(int j_k = col_l*3; j_k < (col_l+1)*3; j_k++) {\n                            if(j_k != j && i_k != i && board[i_k][j_k] == ch) {\n                                return false;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return true;\n    }\n};\n")),Object(c.b)("h4",{id:"37-\u89e3\u6570\u72ec"},Object(c.b)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/sudoku-solver/"},"37. \u89e3\u6570\u72ec")),Object(c.b)("h3",{id:"\u53cc\u5411bfs"},"\u53cc\u5411BFS"),Object(c.b)("h4",{id:"127-\u5355\u8bcd\u63a5\u9f99-1"},Object(c.b)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/word-ladder/"},"127. \u5355\u8bcd\u63a5\u9f99")),Object(c.b)("ul",{className:"contains-task-list"},Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","\u7b2c\u4e00\u904d\uff1a\u7406\u89e3\uff0c\u80cc\u8bf5\uff0c\u63d0\u4ea4\u901a\u8fc7"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","\u7b2c\u4e8c\u904d\uff1a\u81ea\u5df1\u5199"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","\u7b2c\u4e09\u904d\uff1a\u8fc7\u4e00\u5929\u540e\u5199"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","\u7b2c\u56db\u904d\uff1a\u8fc7\u4e00\u5468\u540e\u5199"),Object(c.b)("li",{parentName:"ul",className:"task-list-item"},Object(c.b)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","\u7b2c\u4e94\u904d\uff1a\u9762\u8bd5\u524d\u6062\u590d\u8bad\u7ec3")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},"")),Object(c.b)("p",null,Object(c.b)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/minimum-genetic-mutation/"},"433. \u6700\u5c0f\u57fa\u56e0\u53d8\u5316")),Object(c.b)("h3",{id:"\u542f\u53d1\u5f0f\u641c\u7d22\uff08a\uff09"},"\u542f\u53d1\u5f0f\u641c\u7d22\uff08A*\uff09"),Object(c.b)("h2",{id:"\u6392\u5e8f"},"\u6392\u5e8f"),Object(c.b)("h3",{id:"1122-\u6570\u7ec4\u7684\u76f8\u5bf9\u6392\u5e8f"},Object(c.b)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/relative-sort-array/"},"1122. \u6570\u7ec4\u7684\u76f8\u5bf9\u6392\u5e8f")))}o.isMDXComponent=!0}}]);
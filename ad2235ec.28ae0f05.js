(window.webpackJsonp=window.webpackJsonp||[]).push([[193],{265:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return s})),t.d(n,"toc",(function(){return p})),t.d(n,"default",(function(){return u}));var a=t(3),r=t(7),o=(t(0),t(356)),i=["components"],l={},s={unversionedId:"\u7f16\u7a0b\u57fa\u7840/\u8ba1\u7b97\u673a\u7cfb\u7edf\u57fa\u7840/2-\u7a0b\u5e8f\u7684\u8fd0\u884c/\u8c03\u8bd5\u5de5\u5177/LLDB",id:"\u7f16\u7a0b\u57fa\u7840/\u8ba1\u7b97\u673a\u7cfb\u7edf\u57fa\u7840/2-\u7a0b\u5e8f\u7684\u8fd0\u884c/\u8c03\u8bd5\u5de5\u5177/LLDB",isDocsHomePage:!1,title:"LLDB",description:"LLDB",source:"@site/docs/\u7f16\u7a0b\u57fa\u7840/\u8ba1\u7b97\u673a\u7cfb\u7edf\u57fa\u7840/2-\u7a0b\u5e8f\u7684\u8fd0\u884c/\u8c03\u8bd5\u5de5\u5177/LLDB.md",slug:"/\u7f16\u7a0b\u57fa\u7840/\u8ba1\u7b97\u673a\u7cfb\u7edf\u57fa\u7840/2-\u7a0b\u5e8f\u7684\u8fd0\u884c/\u8c03\u8bd5\u5de5\u5177/LLDB",permalink:"/docs/\u7f16\u7a0b\u57fa\u7840/\u8ba1\u7b97\u673a\u7cfb\u7edf\u57fa\u7840/2-\u7a0b\u5e8f\u7684\u8fd0\u884c/\u8c03\u8bd5\u5de5\u5177/LLDB",editUrl:"dys-typora-open://mine/survival/docs/\u7f16\u7a0b\u57fa\u7840/\u8ba1\u7b97\u673a\u7cfb\u7edf\u57fa\u7840/2-\u7a0b\u5e8f\u7684\u8fd0\u884c/\u8c03\u8bd5\u5de5\u5177/LLDB.md",version:"current"},p=[{value:"RTFM",id:"rtfm",children:[]},{value:"\u57fa\u672c\u8c03\u8bd5\u547d\u4ee4",id:"\u57fa\u672c\u8c03\u8bd5\u547d\u4ee4",children:[]},{value:"expression",id:"expression",children:[{value:"abbreviation(\u7b80\u5199)",id:"abbreviation\u7b80\u5199",children:[]}]},{value:"<strong>thread</strong>",id:"thread",children:[{value:"\u7b80\u5199",id:"\u7b80\u5199",children:[]},{value:"\u4f7f\u7528\u573a\u666f",id:"\u4f7f\u7528\u573a\u666f",children:[]}]},{value:"process",id:"process",children:[{value:"\u7b80\u5199",id:"\u7b80\u5199-1",children:[]}]},{value:"breakpoint",id:"breakpoint",children:[]},{value:"\u67e5\u770b\u5bf9\u8c61\u5185\u5b58\u5e03\u5c40 - frame",id:"\u67e5\u770b\u5bf9\u8c61\u5185\u5b58\u5e03\u5c40---frame",children:[]},{value:"\u6253\u5370\u51fd\u6570\u8c03\u7528\u6808-bt",id:"\u6253\u5370\u51fd\u6570\u8c03\u7528\u6808-bt",children:[]},{value:"\u67e5\u770b\u5bc4\u5b58\u5668\u7684\u503c - register",id:"\u67e5\u770b\u5bc4\u5b58\u5668\u7684\u503c---register",children:[]},{value:"\u6839\u636e\u5185\u5b58\u5730\u5740\u67e5\u770b\u5185\u5b58\u7684\u503c - x",id:"\u6839\u636e\u5185\u5b58\u5730\u5740\u67e5\u770b\u5185\u5b58\u7684\u503c---x",children:[]},{value:"\u6253\u5370\u5bf9\u8c61",id:"\u6253\u5370\u5bf9\u8c61",children:[]},{value:"\u8bfb\u53d6\u53d8\u91cf\u5185\u5b58\u7684\u503c",id:"\u8bfb\u53d6\u53d8\u91cf\u5185\u5b58\u7684\u503c",children:[]},{value:"\u89c2\u5bdf\u5bf9\u8c61",id:"\u89c2\u5bdf\u5bf9\u8c61",children:[]},{value:"pviews",id:"pviews",children:[]},{value:"pvc",id:"pvc",children:[]},{value:"visualize",id:"visualize",children:[]},{value:"fv",id:"fv",children:[]},{value:"fvc",id:"fvc",children:[]},{value:"show/hide",id:"showhide",children:[]},{value:"mask/unmask",id:"maskunmask",children:[]},{value:"border/unborder",id:"borderunborder",children:[]},{value:"\u5b9e\u6218\u573a\u666f\u6848\u4f8b\uff1a",id:"\u5b9e\u6218\u573a\u666f\u6848\u4f8b\uff1a",children:[{value:"\u5e03\u5c40\u9650\u5236\u62a5\u9519",id:"\u5e03\u5c40\u9650\u5236\u62a5\u9519",children:[]},{value:"\u754c\u9762bug",id:"\u754c\u9762bug",children:[]},{value:"\u754c\u9762\u5f02\u5e38",id:"\u754c\u9762\u5f02\u5e38",children:[]}]},{value:"GUN \u548c LLVM",id:"gun-\u548c-llvm",children:[{value:"GUN",id:"gun",children:[]},{value:"LLVM",id:"llvm",children:[]}]},{value:"Xcode 4.4\u4e2dLLVM compiler 4.0\u5e26\u6765\u7684Objective-C\u65b0\u8bed\u6cd5\u7279\u6027",id:"xcode-44\u4e2dllvm-compiler-40\u5e26\u6765\u7684objective-c\u65b0\u8bed\u6cd5\u7279\u6027",children:[]},{value:"\u8c03\u8bd5HelloWorld",id:"\u8c03\u8bd5helloworld",children:[]},{value:"\u8c03\u8bd5\u6700\u7b80\u5355\u7684\u7a0b\u5e8f",id:"\u8c03\u8bd5\u6700\u7b80\u5355\u7684\u7a0b\u5e8f",children:[]}],c={toc:p};function u(e){var n=e.components,l=Object(r.a)(e,i);return Object(o.b)("wrapper",Object(a.a)({},c,l,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"lldb"},"LLDB"),Object(o.b)("p",null,"title: LLDB\ndate: 2016-11-04 17:07:44\ncategories: ","[\u5de5\u5177]","\ntoc: true\ntags: ","[lldb]"),Object(o.b)("hr",null),Object(o.b)("p",null,"[toc]"),Object(o.b)("p",null,"The\xa0",Object(o.b)("strong",{parentName:"p"},"LLDB"),"\xa0Debugger \u662f\u4e00\u4e2a\u8c03\u8bd5\u5668\u3002\u548c\u7f16\u8bd1\u5668LLVM\u662f\u4e00\u5bf9\u597d\u57fa\u53cb\u3002\u7c7b\u4f3c\u4e8e GDB\u548cGCC \u7684\u5173\u7cfb\u3002"),Object(o.b)("h1",{id:"\u7b80\u4ecb"},"\u7b80\u4ecb"),Object(o.b)("p",null,"\u76f8\u4fe1\u6240\u6709\u521a\u5f00\u59cb\u63a5\u89e6xcode\u65ad\u70b9\u8c03\u8bd5\u7684\u65f6\u5019\uff0c\u90fd\u4f1a\u78b0\u5230\u4e0b\u9762\u8fd9\u79cd\u60c5\u51b5\uff1a\n",Object(o.b)("img",{parentName:"p",src:"http://wiso.liwenhui520.com/20190125154840296391323.png",alt:"20190125154840296391323.png"})),Object(o.b)("p",null,"\u83b7\u53d6\u6587\u6863\uff1a"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"\u279c  ~ man lldb  \n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"\u279c  ~ lldb\n(lldb) help\n")),Object(o.b)("p",null,"\u5168\u90e8\u547d\u4ee4\uff1a"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"\u279c  ~ lldb\n(lldb) help\nDebugger commands:\n  apropos           -- List debugger commands related to a word or subject.\n  breakpoint        -- Commands for operating on breakpoints (see 'help b' for shorthand.)\n  bugreport         -- Commands for creating domain-specific bug reports.\n  command           -- Commands for managing custom LLDB commands.\n  disassemble       -- Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.\n  expression        -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  frame             -- Commands for selecting and examing the current thread's stack frames.\n  gdb-remote        -- Connect to a process via remote GDB server.  If no host is specifed, localhost is assumed.\n  gui               -- Switch into the curses based GUI mode.\n  help              -- Show a list of all debugger commands, or give details about a specific command.\n  kdp-remote        -- Connect to a process via remote KDP server.  If no UDP port is specified, port 41139 is assumed.\n  language          -- Commands specific to a source language.\n  log               -- Commands controlling LLDB internal logging.\n  memory            -- Commands for operating on memory in the current target process.\n  platform          -- Commands to manage and create platforms.\n  plugin            -- Commands for managing LLDB plugins.\n  process           -- Commands for interacting with processes on the current platform.\n  quit              -- Quit the LLDB debugger.\n  register          -- Commands to access registers for the current thread and stack frame.\n  script            -- Invoke the script interpreter with provided code and display any results.  Start the interactive interpreter if no code is supplied.\n  settings          -- Commands for managing LLDB settings.\n  source            -- Commands for examining source code described by debug information for the current target process.\n  target            -- Commands for operating on debugger targets.\n  thread            -- Commands for operating on one or more threads in the current process.\n  type              -- Commands for operating on the type system.\n  version           -- Show the LLDB debugger version.\n  watchpoint        -- Commands for operating on watchpoints.\nCurrent command abbreviations (type 'help command alias' for more info):\n  add-dsym  -- Add a debug symbol file to one of the target's current modules by specifying a path to a debug symbols file, or using the options to specify a module to\n               download symbols for.\n  attach    -- Attach to process by ID or name.\n  b         -- Set a breakpoint using one of several shorthand formats.\n  bt        -- Show the current thread's call stack.  Any numeric argument displays at most that many frames.  The argument 'all' displays all threads.\n  c         -- Continue execution of all threads in the current process.\n  call      -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  continue  -- Continue execution of all threads in the current process.\n  detach    -- Detach from the current target process.\n  di        -- Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.\n  dis       -- Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.\n  display   -- Evaluate an expression at every stop (see 'help target stop-hook'.)\n  down      -- Select a newer stack frame.  Defaults to moving one frame, a numeric argument can specify an arbitrary number.\n  env       -- Shorthand for viewing and setting environment variables.\n  exit      -- Quit the LLDB debugger.\n  f         -- Select the current stack frame by index from within the current thread (see 'thread backtrace'.)\n  file      -- Create a target using the argument as the main executable.\n  finish    -- Finish executing the current stack frame and stop after returning.  Defaults to current thread unless specified.\n  image     -- Commands for accessing information for one or more target modules.\n  j         -- Set the program counter to a new address.\n  jump      -- Set the program counter to a new address.\n  kill      -- Terminate the current target process.\n  l         -- List relevant source code using one of several shorthand formats.\n  list      -- List relevant source code using one of several shorthand formats.\n  n         -- Source level single step, stepping over calls.  Defaults to current thread unless specified.\n  next      -- Source level single step, stepping over calls.  Defaults to current thread unless specified.\n  nexti     -- Instruction level single step, stepping over calls.  Defaults to current thread unless specified.\n  ni        -- Instruction level single step, stepping over calls.  Defaults to current thread unless specified.\n  p         -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  parray    -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  po        -- Evaluate an expression on the current thread.  Displays any returned value with formatting controlled by the type's author.\n  poarray   -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  print     -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  q         -- Quit the LLDB debugger.\n  r         -- Launch the executable in the debugger.\n  rbreak    -- Sets a breakpoint or set of breakpoints in the executable.\n  repl      -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  run       -- Launch the executable in the debugger.\n  s         -- Source level single step, stepping into calls.  Defaults to current thread unless specified.\n  si        -- Instruction level single step, stepping into calls.  Defaults to current thread unless specified.\n  sif       -- Step through the current block, stopping if you step directly into a function whose name matches the TargetFunctionName.\n  step      -- Source level single step, stepping into calls.  Defaults to current thread unless specified.\n  stepi     -- Instruction level single step, stepping into calls.  Defaults to current thread unless specified.\n  t         -- Change the currently selected thread.\n  tbreak    -- Set a one-shot breakpoint using one of several shorthand formats.\n  undisplay -- Stop displaying expression at every stop (specified by stop-hook index.)\n  up        -- Select an older stack frame.  Defaults to moving one frame, a numeric argument can specify an arbitrary number.\n  x         -- Read from the memory of the current target process.\nFor more information on any command, type 'help <command-name>'.\n(lldb) \n\n")),Object(o.b)("p",null,"\u67d0\u4e00\u4e2a\u547d\u4ee4\u7684help"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"(lldb) help breakpoint\n     Commands for operating on breakpoints (see 'help b' for shorthand.)\n\nSyntax: breakpoint\n\nThe following subcommands are supported:\n\n      clear   -- Delete or disable breakpoints matching the specified source file and line.\n      command -- Commands for adding, removing and listing LLDB commands executed when a breakpoint is hit.\n      delete  -- Delete the specified breakpoint(s).  If no breakpoints are specified, delete them all.\n      disable -- Disable the specified breakpoint(s) without deleting them.  If none are specified, disable all breakpoints.\n      enable  -- Enable the specified disabled breakpoint(s). If no breakpoints are specified, enable all of them.\n      list    -- List some or all breakpoints at configurable levels of detail.\n      modify  -- Modify the options on a breakpoint or set of breakpoints in the executable.  If no breakpoint is specified, acts on the last created breakpoint.  With\n                 the exception of -e, -d and -i, passing an empty argument clears the modification.\n      name    -- Commands to manage name tags for breakpoints\n      read    -- Read and set the breakpoints previously saved to a file with \"breakpoint write\".  \n      set     -- Sets a breakpoint or set of breakpoints in the executable.\n      write   -- Write the breakpoints listed to a file that can be read in with \"breakpoint read\".  If given no arguments, writes all breakpoints.\n\nFor more help on any particular subcommand, type 'help <command> <subcommand>'.\n(lldb) \n")),Object(o.b)("h2",{id:"rtfm"},"RTFM"),Object(o.b)("p",null,Object(o.b)("a",{parentName:"p",href:"http://lldb.llvm.org/tutorial.html"},"\u5b98\u65b9\u6587\u6863")),Object(o.b)("h1",{id:"\u547d\u4ee4"},"\u547d\u4ee4"),Object(o.b)("h2",{id:"\u57fa\u672c\u8c03\u8bd5\u547d\u4ee4"},"\u57fa\u672c\u8c03\u8bd5\u547d\u4ee4"),Object(o.b)("p",null,Object(o.b)("img",{alt:"image-20211006215342553",src:t(913).default})),Object(o.b)("h2",{id:"expression"},"expression"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"expression        -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n")),Object(o.b)("p",null,"help"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"(lldb) help expression\n     Evaluate an expression on the current thread.  Displays any returned value\n     with LLDB's default formatting.  Expects 'raw' input (see 'help\n     raw-input'.)\n\nSyntax: \n\nCommand Options Usage:\n  expression [-AFLORTgp] [-f <format>] [-G <gdb-format>] [-a <boolean>] [-i <boolean>] [-t <unsigned-integer>] [-u <boolean>] [-l <source-language>] [-X <boolean>] [-v[<description-verbosity>]] [-j <boolean>] [-d <none>] [-S <boolean>] [-D <count>] [-P <count>] [-Y[<count>]] [-V <boolean>] [-Z <count>] -- <expr>\n  expression [-AFLORTgp] [-a <boolean>] [-i <boolean>] [-t <unsigned-integer>] [-u <boolean>] [-l <source-language>] [-X <boolean>] [-j <boolean>] [-d <none>] [-S <boolean>] [-D <count>] [-P <count>] [-Y[<count>]] [-V <boolean>] [-Z <count>] -- <expr>\n  expression [-r] -- <expr>\n  expression <expr>\n\n       -A ( --show-all-children )\n            Ignore the upper bound on the number of children to show.\n\n       -D <count> ( --depth <count> )\n            Set the max recurse depth when dumping aggregate types (default is\n            infinity).\n\n       -F ( --flat )\n            Display results in a flat format that uses expression paths for\n            each variable or member.\n\n       -G <gdb-format> ( --gdb-format <gdb-format> )\n            Specify a format using a GDB format specifier string.\n\n       -L ( --location )\n            Show variable location information.\n\n       -O ( --object-description )\n            Display using a language-specific description API, if possible.\n\n       -P <count> ( --ptr-depth <count> )\n            The number of pointers to be traversed when dumping values (default\n            is zero).\n\n       -R ( --raw-output )\n            Don't use formatting options.\n\n       -S <boolean> ( --synthetic-type <boolean> )\n            Show the object obeying its synthetic provider, if available.\n\n       -T ( --show-types )\n            Show variable types when dumping values.\n\n       -V <boolean> ( --validate <boolean> )\n            Show results of type validators.\n\n       -X <boolean> ( --apply-fixits <boolean> )\n            If true, simple fix-it hints will be automatically applied to the\n            expression.\n\n       -Y[<count>] ( --no-summary-depth=[<count>] )\n            Set the depth at which omitting summary information stops (default\n            is 1).\n\n       -Z <count> ( --element-count <count> )\n            Treat the result of the expression as if its type is an array of\n            this many values.\n\n       -a <boolean> ( --all-threads <boolean> )\n            Should we run all threads if the execution doesn't complete on one\n            thread.\n\n       -d <none> ( --dynamic-type <none> )\n            Show the object as its full dynamic type, not its static type, if\n            available.\n            Values: no-dynamic-values | run-target | no-run-target\n\n       -f <format> ( --format <format> )\n            Specify a format to be used for display.\n\n       -g ( --debug )\n            When specified, debug the JIT code by setting a breakpoint on the\n            first instruction and forcing breakpoints to not be ignored (-i0)\n            and no unwinding to happen on error (-u0).\n\n       -i <boolean> ( --ignore-breakpoints <boolean> )\n            Ignore breakpoint hits while running expressions\n\n       -j <boolean> ( --allow-jit <boolean> )\n            Controls whether the expression can fall back to being JITted if\n            it's not supported by the interpreter (defaults to true).\n\n       -l <source-language> ( --language <source-language> )\n            Specifies the Language to use when parsing the expression.  If not\n            set the target.language setting is used.\n\n       -p ( --top-level )\n            Interpret the expression as a complete translation unit, without\n            injecting it into the local context.  Allows declaration of\n            persistent, top-level entities without a $ prefix.\n\n       -r ( --repl )\n            Drop into Swift REPL\n\n       -t <unsigned-integer> ( --timeout <unsigned-integer> )\n            Timeout value (in microseconds) for running the expression.\n\n       -u <boolean> ( --unwind-on-error <boolean> )\n            Clean up program state if the expression causes a crash, or raises\n            a signal.  Note, unlike gdb hitting a breakpoint is controlled by\n            another option (-i).\n\n       -v[<description-verbosity>] ( --description-verbosity=[<description-verbosity>] )\n            How verbose should the output of this expression be, if the object\n            description is asked for.\n            Values: compact | full\n\nSingle and multi-line expressions:\n\n    The expression provided on the command line must be a complete expression\n    with no newlines.  To evaluate a multi-line expression, hit a return after\n    an empty expression, and lldb will enter the multi-line expression editor.\n    Hit return on an empty line to end the multi-line expression.\n\nTimeouts:\n\n    If the expression can be evaluated statically (without running code) then\n    it will be.  Otherwise, by default the expression will run on the current\n    thread with a short timeout: currently .25 seconds.  If it doesn't return\n    in that time, the evaluation will be interrupted and resumed with all\n    threads running.  You can use the -a option to disable retrying on all\n    threads.  You can use the -t option to set a shorter timeout.\n\nUser defined variables:\n\n    You can define your own variables for convenience or to be used in\n    subsequent expressions.  You define them the same way you would define\n    variables in C.  If the first character of your user defined variable is a\n    $, then the variable's value will be available in future expressions,\n    otherwise it will just be available in the current expression.\n\nContinuing evaluation after a breakpoint:\n\n    If the \"-i false\" option is used, and execution is interrupted by a\n    breakpoint hit, once you are done with your investigation, you can either\n    remove the expression execution frames from the stack with \"thread return\n    -x\" or if you are still interested in the expression result you can issue\n    the \"continue\" command and the expression evaluation will complete and the\n    expression result will be available using the \"thread.completed-expression\"\n    key in the thread format.\n\nExamples:\n\n    expr my_struct->a = my_array[3]\n    expr -f bin -- (index * 8) + 5\n    expr unsigned int $foo = 5\n    expr char c[] = \\\"foo\\\"; c[0]\n     \n     Important Note: Because this command takes 'raw' input, if you use any\n     command options you must use ' -- ' between the end of the command options\n     and the beginning of the raw input.\n(lldb) \n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'    int a = 5;\n    NSLog(@"a = %d",a);\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"(lldb) expression a=10\n(int) $0 = 10\n")),Object(o.b)("h3",{id:"abbreviation\u7b80\u5199"},"abbreviation(\u7b80\u5199)"),Object(o.b)("h4",{id:"po"},"po"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"(lldb)  help po\n     Evaluate an expression on the current thread.  Displays any returned value\n     with formatting controlled by the type's author.  Expects 'raw' input (see\n     'help raw-input'.)\n\nSyntax: \n\nCommand Options Usage:\n  po <expr>\n\n\n'po' is an abbreviation for 'expression -O  --'\n")),Object(o.b)("h4",{id:"print"},"print"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"(lldb)  help print\n     Evaluate an expression on the current thread.  Displays any returned value\n     with LLDB's default formatting.  Expects 'raw' input (see 'help\n     raw-input'.)\n\nSyntax: \n\nCommand Options Usage:\n  print <expr>\n\n\n'print' is an abbreviation for 'expression --'\n\n")),Object(o.b)("h4",{id:"p"},"p"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"(lldb)  help p\n     Evaluate an expression on the current thread.  Displays any returned value\n     with LLDB's default formatting.  Expects 'raw' input (see 'help\n     raw-input'.)\n\nSyntax: \n\nCommand Options Usage:\n  p <expr>\n\n\n'p' is an abbreviation for 'expression --'\n")),Object(o.b)("h4",{id:"parray"},"parray"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"(lldb)  help parray\n     Evaluate an expression on the current thread.  Displays any returned value\n     with LLDB's default formatting.  Expects 'raw' input (see 'help\n     raw-input'.)\n\nSyntax: \n\nCommand Options Usage:\n  parray <expr>\n\n\n'parray' is an abbreviation for 'expression -Z %1   --'\n")),Object(o.b)("h4",{id:"poarray"},"poarray"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"(lldb)  help poarray\n     Evaluate an expression on the current thread.  Displays any returned value\n     with LLDB's default formatting.  Expects 'raw' input (see 'help\n     raw-input'.)\n\nSyntax: \n\nCommand Options Usage:\n  poarray <expr>\n\n\n'poarray' is an abbreviation for 'expression -O -Z %1    --'\n")),Object(o.b)("h4",{id:"repl"},"repl"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"(lldb)  help repl\n     Evaluate an expression on the current thread.  Displays any returned value\n     with LLDB's default formatting.  Expects 'raw' input (see 'help\n     raw-input'.)\n\nSyntax: \n\nCommand Options Usage:\n  repl [-AFLORTgp] [-f <format>] [-G <gdb-format>] [-a <boolean>] [-i <boolean>] [-t <unsigned-integer>] [-u <boolean>] [-l <source-language>] [-X <boolean>] [-v[<description-verbosity>]] [-j <boolean>] [-d <none>] [-S <boolean>] [-D <count>] [-P <count>] [-Y[<count>]] [-V <boolean>] [-Z <count>] -- <expr>\n  repl [-AFLORTgp] [-a <boolean>] [-i <boolean>] [-t <unsigned-integer>] [-u <boolean>] [-l <source-language>] [-X <boolean>] [-j <boolean>] [-d <none>] [-S <boolean>] [-D <count>] [-P <count>] [-Y[<count>]] [-V <boolean>] [-Z <count>] -- <expr>\n  repl [-r] -- <expr>\n  repl <expr>\n\n       -A ( --show-all-children )\n            Ignore the upper bound on the number of children to show.\n\n       -D <count> ( --depth <count> )\n            Set the max recurse depth when dumping aggregate types (default is\n            infinity).\n\n       -F ( --flat )\n            Display results in a flat format that uses expression paths for\n            each variable or member.\n\n       -G <gdb-format> ( --gdb-format <gdb-format> )\n            Specify a format using a GDB format specifier string.\n\n       -L ( --location )\n            Show variable location information.\n\n       -O ( --object-description )\n            Display using a language-specific description API, if possible.\n\n       -P <count> ( --ptr-depth <count> )\n            The number of pointers to be traversed when dumping values (default\n            is zero).\n\n       -R ( --raw-output )\n            Don't use formatting options.\n\n       -S <boolean> ( --synthetic-type <boolean> )\n            Show the object obeying its synthetic provider, if available.\n\n       -T ( --show-types )\n            Show variable types when dumping values.\n\n       -V <boolean> ( --validate <boolean> )\n            Show results of type validators.\n\n       -X <boolean> ( --apply-fixits <boolean> )\n            If true, simple fix-it hints will be automatically applied to the\n            expression.\n\n       -Y[<count>] ( --no-summary-depth=[<count>] )\n            Set the depth at which omitting summary information stops (default\n            is 1).\n\n       -Z <count> ( --element-count <count> )\n            Treat the result of the expression as if its type is an array of\n            this many values.\n\n       -a <boolean> ( --all-threads <boolean> )\n            Should we run all threads if the execution doesn't complete on one\n            thread.\n\n       -d <none> ( --dynamic-type <none> )\n            Show the object as its full dynamic type, not its static type, if\n            available.\n            Values: no-dynamic-values | run-target | no-run-target\n\n       -f <format> ( --format <format> )\n            Specify a format to be used for display.\n\n       -g ( --debug )\n            When specified, debug the JIT code by setting a breakpoint on the\n            first instruction and forcing breakpoints to not be ignored (-i0)\n            and no unwinding to happen on error (-u0).\n\n       -i <boolean> ( --ignore-breakpoints <boolean> )\n            Ignore breakpoint hits while running expressions\n\n       -j <boolean> ( --allow-jit <boolean> )\n            Controls whether the expression can fall back to being JITted if\n            it's not supported by the interpreter (defaults to true).\n\n       -l <source-language> ( --language <source-language> )\n            Specifies the Language to use when parsing the expression.  If not\n            set the target.language setting is used.\n\n       -p ( --top-level )\n            Interpret the expression as a complete translation unit, without\n            injecting it into the local context.  Allows declaration of\n            persistent, top-level entities without a $ prefix.\n\n       -r ( --repl )\n            Drop into Swift REPL\n\n       -t <unsigned-integer> ( --timeout <unsigned-integer> )\n            Timeout value (in microseconds) for running the expression.\n\n       -u <boolean> ( --unwind-on-error <boolean> )\n            Clean up program state if the expression causes a crash, or raises\n            a signal.  Note, unlike gdb hitting a breakpoint is controlled by\n            another option (-i).\n\n       -v[<description-verbosity>] ( --description-verbosity=[<description-verbosity>] )\n            How verbose should the output of this expression be, if the object\n            description is asked for.\n            Values: compact | full\n\nSingle and multi-line expressions:\n\n    The expression provided on the command line must be a complete expression\n    with no newlines.  To evaluate a multi-line expression, hit a return after\n    an empty expression, and lldb will enter the multi-line expression editor.\n    Hit return on an empty line to end the multi-line expression.\n\nTimeouts:\n\n    If the expression can be evaluated statically (without running code) then\n    it will be.  Otherwise, by default the expression will run on the current\n    thread with a short timeout: currently .25 seconds.  If it doesn't return\n    in that time, the evaluation will be interrupted and resumed with all\n    threads running.  You can use the -a option to disable retrying on all\n    threads.  You can use the -t option to set a shorter timeout.\n\nUser defined variables:\n\n    You can define your own variables for convenience or to be used in\n    subsequent expressions.  You define them the same way you would define\n    variables in C.  If the first character of your user defined variable is a\n    $, then the variable's value will be available in future expressions,\n    otherwise it will just be available in the current expression.\n\nContinuing evaluation after a breakpoint:\n\n    If the \"-i false\" option is used, and execution is interrupted by a\n    breakpoint hit, once you are done with your investigation, you can either\n    remove the expression execution frames from the stack with \"thread return\n    -x\" or if you are still interested in the expression result you can issue\n    the \"continue\" command and the expression evaluation will complete and the\n    expression result will be available using the \"thread.completed-expression\"\n    key in the thread format.\n\nExamples:\n\n    expr my_struct->a = my_array[3]\n    expr -f bin -- (index * 8) + 5\n    expr unsigned int $foo = 5\n    expr char c[] = \\\"foo\\\"; c[0]\n     \n     Important Note: Because this command takes 'raw' input, if you use any\n     command options you must use ' -- ' between the end of the command options\n     and the beginning of the raw input.\n\n'repl' is an abbreviation for 'expression -r  -- '\n")),Object(o.b)("h4",{id:"call"},"call"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"(lldb)  help call\n     Evaluate an expression on the current thread.  Displays any returned value\n     with LLDB's default formatting.  Expects 'raw' input (see 'help\n     raw-input'.)\n\nSyntax: \n\nCommand Options Usage:\n  call <expr>\n\n\n'call' is an abbreviation for 'expression --'\n\n")),Object(o.b)("h2",{id:"thread"},Object(o.b)("strong",{parentName:"h2"},"thread")),Object(o.b)("p",null,"\u7ebf\u7a0b\uff1athread"),Object(o.b)("p",null,"\u8fdb\u7a0b\uff1aprocess"),Object(o.b)("p",null,"thread            -- Commands for operating on one or more threads in the current process."),Object(o.b)("p",null,"help"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"(lldb) help thread\n     Commands for operating on one or more threads in the current process.\n\nSyntax: thread\n\nThe following subcommands are supported:\n\n      backtrace      -- Show thread call stacks.  Defaults to the current\n                        thread, thread indexes can be specified as\n                        arguments.\n                        Use the thread-index \"all\" to see all threads.\n                        Use the thread-index \"unique\" to see threads grouped by\n                        unique call stacks.\n      continue       -- Continue execution of the current target process.  One\n                        or more threads may be specified, by default all\n                        threads continue.\n      info           -- Show an extended summary of one or more threads. \n                        Defaults to the current thread.\n      jump           -- Sets the program counter to a new address.\n      list           -- Show a summary of each thread in the current target\n                        process.\n      plan           -- Commands for managing thread plans that control\n                        execution.\n      return         -- Prematurely return from a stack frame, short-circuiting\n                        execution of newer frames and optionally yielding a\n                        specified value.  Defaults to the exiting the current\n                        stack frame.  Expects 'raw' input (see 'help\n                        raw-input'.)\n      select         -- Change the currently selected thread.\n      step-in        -- Source level single step, stepping into calls. \n                        Defaults to current thread unless specified.\n      step-inst      -- Instruction level single step, stepping into calls. \n                        Defaults to current thread unless specified.\n      step-inst-over -- Instruction level single step, stepping over calls. \n                        Defaults to current thread unless specified.\n      step-out       -- Finish executing the current stack frame and stop after\n                        returning.  Defaults to current thread unless specified.\n      step-over      -- Source level single step, stepping over calls. \n                        Defaults to current thread unless specified.\n      step-scripted  -- Step as instructed by the script class passed in the -C\n                        option.\n      until          -- Continue until a line number or address is reached by\n                        the current or specified thread.  Stops when returning\n                        from the current function as a safety measure.  The\n                        target line number(s) are given as arguments, and if\n                        more than one is provided, stepping will stop when the\n                        first one is hit.\n\nFor more help on any particular subcommand, type 'help <command> <subcommand>'.\n(lldb) \n")),Object(o.b)("h3",{id:"\u7b80\u5199"},"\u7b80\u5199"),Object(o.b)("h4",{id:"n"},"n"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"(lldb)  help n\n     Source level single step, stepping over calls.  Defaults to current thread\n     unless specified.\n\nSyntax: \n\nCommand Options Usage:\n  n [-a <boolean>] [-A <boolean>] [-c <count>] [-e <linenum>] [-m <run-mode>] [-r <regular-expression>] [-t <function-name>] [<thread-id>]\n  n [-C <python-class>] [<thread-id>]\n\n       -A <boolean> ( --step-out-avoids-no-debug <boolean> )\n            A boolean value, if true stepping out of functions will continue to\n            step out till it hits a function with debug information.\n\n       -C <python-class> ( --python-class <python-class> )\n            The name of the class that will manage this step - only supported\n            for Scripted Step.\n\n       -a <boolean> ( --step-in-avoids-no-debug <boolean> )\n            A boolean value that sets whether stepping into functions will step\n            over functions with no debug information.\n\n       -c <count> ( --count <count> )\n            How many times to perform the stepping operation - currently only\n            supported for step-inst and next-inst.\n\n       -e <linenum> ( --end-linenumber <linenum> )\n            The line at which to stop stepping - defaults to the next line and\n            only supported for step-in and step-over.  You can also pass the\n            string 'block' to step to the end of the current block.  This is\n            particularly useful in conjunction with --step-target to step\n            through a complex calling sequence.\n\n       -m <run-mode> ( --run-mode <run-mode> )\n            Determine how to run other threads while stepping the current\n            thread.\n            Values: this-thread | all-threads | while-stepping\n\n       -r <regular-expression> ( --step-over-regexp <regular-expression> )\n            A regular expression that defines function names to not to stop at\n            when stepping in.\n\n       -t <function-name> ( --step-in-target <function-name> )\n            The name of the directly called function step in should stop at\n            when stepping into.\n     \n     This command takes options and free-form arguments.  If your arguments\n     resemble option specifiers (i.e., they start with a - or --), you must use\n     ' -- ' between the end of the command options and the beginning of the\n     arguments.\n\n'n' is an abbreviation for 'thread step-over'\n\n")),Object(o.b)("h4",{id:"next"},"next"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"(lldb)  help next\n     Source level single step, stepping over calls.  Defaults to current thread\n     unless specified.\n\nSyntax: \n\nCommand Options Usage:\n  next [-a <boolean>] [-A <boolean>] [-c <count>] [-e <linenum>] [-m <run-mode>] [-r <regular-expression>] [-t <function-name>] [<thread-id>]\n  next [-C <python-class>] [<thread-id>]\n\n       -A <boolean> ( --step-out-avoids-no-debug <boolean> )\n            A boolean value, if true stepping out of functions will continue to\n            step out till it hits a function with debug information.\n\n       -C <python-class> ( --python-class <python-class> )\n            The name of the class that will manage this step - only supported\n            for Scripted Step.\n\n       -a <boolean> ( --step-in-avoids-no-debug <boolean> )\n            A boolean value that sets whether stepping into functions will step\n            over functions with no debug information.\n\n       -c <count> ( --count <count> )\n            How many times to perform the stepping operation - currently only\n            supported for step-inst and next-inst.\n\n       -e <linenum> ( --end-linenumber <linenum> )\n            The line at which to stop stepping - defaults to the next line and\n            only supported for step-in and step-over.  You can also pass the\n            string 'block' to step to the end of the current block.  This is\n            particularly useful in conjunction with --step-target to step\n            through a complex calling sequence.\n\n       -m <run-mode> ( --run-mode <run-mode> )\n            Determine how to run other threads while stepping the current\n            thread.\n            Values: this-thread | all-threads | while-stepping\n\n       -r <regular-expression> ( --step-over-regexp <regular-expression> )\n            A regular expression that defines function names to not to stop at\n            when stepping in.\n\n       -t <function-name> ( --step-in-target <function-name> )\n            The name of the directly called function step in should stop at\n            when stepping into.\n     \n     This command takes options and free-form arguments.  If your arguments\n     resemble option specifiers (i.e., they start with a - or --), you must use\n     ' -- ' between the end of the command options and the beginning of the\n     arguments.\n\n'next' is an abbreviation for 'thread step-over'\n")),Object(o.b)("h4",{id:"ni"},"ni"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"(lldb)  help ni\n     Instruction level single step, stepping over calls.  Defaults to current\n     thread unless specified.\n\nSyntax: \n\nCommand Options Usage:\n  ni [-a <boolean>] [-A <boolean>] [-c <count>] [-e <linenum>] [-m <run-mode>] [-r <regular-expression>] [-t <function-name>] [<thread-id>]\n  ni [-C <python-class>] [<thread-id>]\n\n       -A <boolean> ( --step-out-avoids-no-debug <boolean> )\n            A boolean value, if true stepping out of functions will continue to\n            step out till it hits a function with debug information.\n\n       -C <python-class> ( --python-class <python-class> )\n            The name of the class that will manage this step - only supported\n            for Scripted Step.\n\n       -a <boolean> ( --step-in-avoids-no-debug <boolean> )\n            A boolean value that sets whether stepping into functions will step\n            over functions with no debug information.\n\n       -c <count> ( --count <count> )\n            How many times to perform the stepping operation - currently only\n            supported for step-inst and next-inst.\n\n       -e <linenum> ( --end-linenumber <linenum> )\n            The line at which to stop stepping - defaults to the next line and\n            only supported for step-in and step-over.  You can also pass the\n            string 'block' to step to the end of the current block.  This is\n            particularly useful in conjunction with --step-target to step\n            through a complex calling sequence.\n\n       -m <run-mode> ( --run-mode <run-mode> )\n            Determine how to run other threads while stepping the current\n            thread.\n            Values: this-thread | all-threads | while-stepping\n\n       -r <regular-expression> ( --step-over-regexp <regular-expression> )\n            A regular expression that defines function names to not to stop at\n            when stepping in.\n\n       -t <function-name> ( --step-in-target <function-name> )\n            The name of the directly called function step in should stop at\n            when stepping into.\n     \n     This command takes options and free-form arguments.  If your arguments\n     resemble option specifiers (i.e., they start with a - or --), you must use\n     ' -- ' between the end of the command options and the beginning of the\n     arguments.\n\n'ni' is an abbreviation for 'thread step-inst-over'\n")),Object(o.b)("h4",{id:"nexti"},"nexti"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"(lldb)  help nexti\n     Instruction level single step, stepping over calls.  Defaults to current\n     thread unless specified.\n\nSyntax: \n\nCommand Options Usage:\n  nexti [-a <boolean>] [-A <boolean>] [-c <count>] [-e <linenum>] [-m <run-mode>] [-r <regular-expression>] [-t <function-name>] [<thread-id>]\n  nexti [-C <python-class>] [<thread-id>]\n\n       -A <boolean> ( --step-out-avoids-no-debug <boolean> )\n            A boolean value, if true stepping out of functions will continue to\n            step out till it hits a function with debug information.\n\n       -C <python-class> ( --python-class <python-class> )\n            The name of the class that will manage this step - only supported\n            for Scripted Step.\n\n       -a <boolean> ( --step-in-avoids-no-debug <boolean> )\n            A boolean value that sets whether stepping into functions will step\n            over functions with no debug information.\n\n       -c <count> ( --count <count> )\n            How many times to perform the stepping operation - currently only\n            supported for step-inst and next-inst.\n\n       -e <linenum> ( --end-linenumber <linenum> )\n            The line at which to stop stepping - defaults to the next line and\n            only supported for step-in and step-over.  You can also pass the\n            string 'block' to step to the end of the current block.  This is\n            particularly useful in conjunction with --step-target to step\n            through a complex calling sequence.\n\n       -m <run-mode> ( --run-mode <run-mode> )\n            Determine how to run other threads while stepping the current\n            thread.\n            Values: this-thread | all-threads | while-stepping\n\n       -r <regular-expression> ( --step-over-regexp <regular-expression> )\n            A regular expression that defines function names to not to stop at\n            when stepping in.\n\n       -t <function-name> ( --step-in-target <function-name> )\n            The name of the directly called function step in should stop at\n            when stepping into.\n     \n     This command takes options and free-form arguments.  If your arguments\n     resemble option specifiers (i.e., they start with a - or --), you must use\n     ' -- ' between the end of the command options and the beginning of the\n     arguments.\n\n'nexti' is an abbreviation for 'thread step-inst-over'\n")),Object(o.b)("h4",{id:"s"},"s"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"(lldb)  help s\n     Source level single step, stepping into calls.  Defaults to current thread\n     unless specified.\n\nSyntax: \n\nCommand Options Usage:\n  s [-a <boolean>] [-A <boolean>] [-c <count>] [-e <linenum>] [-m <run-mode>] [-r <regular-expression>] [-t <function-name>] [<thread-id>]\n  s [-C <python-class>] [<thread-id>]\n\n       -A <boolean> ( --step-out-avoids-no-debug <boolean> )\n            A boolean value, if true stepping out of functions will continue to\n            step out till it hits a function with debug information.\n\n       -C <python-class> ( --python-class <python-class> )\n            The name of the class that will manage this step - only supported\n            for Scripted Step.\n\n       -a <boolean> ( --step-in-avoids-no-debug <boolean> )\n            A boolean value that sets whether stepping into functions will step\n            over functions with no debug information.\n\n       -c <count> ( --count <count> )\n            How many times to perform the stepping operation - currently only\n            supported for step-inst and next-inst.\n\n       -e <linenum> ( --end-linenumber <linenum> )\n            The line at which to stop stepping - defaults to the next line and\n            only supported for step-in and step-over.  You can also pass the\n            string 'block' to step to the end of the current block.  This is\n            particularly useful in conjunction with --step-target to step\n            through a complex calling sequence.\n\n       -m <run-mode> ( --run-mode <run-mode> )\n            Determine how to run other threads while stepping the current\n            thread.\n            Values: this-thread | all-threads | while-stepping\n\n       -r <regular-expression> ( --step-over-regexp <regular-expression> )\n            A regular expression that defines function names to not to stop at\n            when stepping in.\n\n       -t <function-name> ( --step-in-target <function-name> )\n            The name of the directly called function step in should stop at\n            when stepping into.\n     \n     This command takes options and free-form arguments.  If your arguments\n     resemble option specifiers (i.e., they start with a - or --), you must use\n     ' -- ' between the end of the command options and the beginning of the\n     arguments.\n\n's' is an abbreviation for 'thread step-in'\n")),Object(o.b)("h4",{id:"si"},"si"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"(lldb)  help si\n     Instruction level single step, stepping into calls.  Defaults to current\n     thread unless specified.\n\nSyntax: \n\nCommand Options Usage:\n  si [-a <boolean>] [-A <boolean>] [-c <count>] [-e <linenum>] [-m <run-mode>] [-r <regular-expression>] [-t <function-name>] [<thread-id>]\n  si [-C <python-class>] [<thread-id>]\n\n       -A <boolean> ( --step-out-avoids-no-debug <boolean> )\n            A boolean value, if true stepping out of functions will continue to\n            step out till it hits a function with debug information.\n\n       -C <python-class> ( --python-class <python-class> )\n            The name of the class that will manage this step - only supported\n            for Scripted Step.\n\n       -a <boolean> ( --step-in-avoids-no-debug <boolean> )\n            A boolean value that sets whether stepping into functions will step\n            over functions with no debug information.\n\n       -c <count> ( --count <count> )\n            How many times to perform the stepping operation - currently only\n            supported for step-inst and next-inst.\n\n       -e <linenum> ( --end-linenumber <linenum> )\n            The line at which to stop stepping - defaults to the next line and\n            only supported for step-in and step-over.  You can also pass the\n            string 'block' to step to the end of the current block.  This is\n            particularly useful in conjunction with --step-target to step\n            through a complex calling sequence.\n\n       -m <run-mode> ( --run-mode <run-mode> )\n            Determine how to run other threads while stepping the current\n            thread.\n            Values: this-thread | all-threads | while-stepping\n\n       -r <regular-expression> ( --step-over-regexp <regular-expression> )\n            A regular expression that defines function names to not to stop at\n            when stepping in.\n\n       -t <function-name> ( --step-in-target <function-name> )\n            The name of the directly called function step in should stop at\n            when stepping into.\n     \n     This command takes options and free-form arguments.  If your arguments\n     resemble option specifiers (i.e., they start with a - or --), you must use\n     ' -- ' between the end of the command options and the beginning of the\n     arguments.\n\n'si' is an abbreviation for 'thread step-inst'\n(lldb) \n")),Object(o.b)("h4",{id:"sif"},"sif"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"(lldb)  help sif\n     Step through the current block, stopping if you step directly into a\n     function whose name matches the TargetFunctionName.\n\nSyntax: sif <cmd-options> [<thread-id>]\n\nCommand Options Usage:\n  sif [-a <boolean>] [-A <boolean>] [-c <count>] [-e <linenum>] [-m <run-mode>] [-r <regular-expression>] [-t <function-name>] [<thread-id>]\n  sif [-C <python-class>] [<thread-id>]\n\n       -A <boolean> ( --step-out-avoids-no-debug <boolean> )\n            A boolean value, if true stepping out of functions will continue to\n            step out till it hits a function with debug information.\n\n       -C <python-class> ( --python-class <python-class> )\n            The name of the class that will manage this step - only supported\n            for Scripted Step.\n\n       -a <boolean> ( --step-in-avoids-no-debug <boolean> )\n            A boolean value that sets whether stepping into functions will step\n            over functions with no debug information.\n\n       -c <count> ( --count <count> )\n            How many times to perform the stepping operation - currently only\n            supported for step-inst and next-inst.\n\n       -e <linenum> ( --end-linenumber <linenum> )\n            The line at which to stop stepping - defaults to the next line and\n            only supported for step-in and step-over.  You can also pass the\n            string 'block' to step to the end of the current block.  This is\n            particularly useful in conjunction with --step-target to step\n            through a complex calling sequence.\n\n       -m <run-mode> ( --run-mode <run-mode> )\n            Determine how to run other threads while stepping the current\n            thread.\n            Values: this-thread | all-threads | while-stepping\n\n       -r <regular-expression> ( --step-over-regexp <regular-expression> )\n            A regular expression that defines function names to not to stop at\n            when stepping in.\n\n       -t <function-name> ( --step-in-target <function-name> )\n            The name of the directly called function step in should stop at\n            when stepping into.\n     \n     This command takes options and free-form arguments.  If your arguments\n     resemble option specifiers (i.e., they start with a - or --), you must use\n     ' -- ' between the end of the command options and the beginning of the\n     arguments.\n\n'sif' is an abbreviation for 'thread step-in -e block -t %1'\n\n")),Object(o.b)("h4",{id:"step"},"step"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"(lldb)  help step\n     Source level single step, stepping into calls.  Defaults to current thread\n     unless specified.\n\nSyntax: \n\nCommand Options Usage:\n  step [-a <boolean>] [-A <boolean>] [-c <count>] [-e <linenum>] [-m <run-mode>] [-r <regular-expression>] [-t <function-name>] [<thread-id>]\n  step [-C <python-class>] [<thread-id>]\n\n       -A <boolean> ( --step-out-avoids-no-debug <boolean> )\n            A boolean value, if true stepping out of functions will continue to\n            step out till it hits a function with debug information.\n\n       -C <python-class> ( --python-class <python-class> )\n            The name of the class that will manage this step - only supported\n            for Scripted Step.\n\n       -a <boolean> ( --step-in-avoids-no-debug <boolean> )\n            A boolean value that sets whether stepping into functions will step\n            over functions with no debug information.\n\n       -c <count> ( --count <count> )\n            How many times to perform the stepping operation - currently only\n            supported for step-inst and next-inst.\n\n       -e <linenum> ( --end-linenumber <linenum> )\n            The line at which to stop stepping - defaults to the next line and\n            only supported for step-in and step-over.  You can also pass the\n            string 'block' to step to the end of the current block.  This is\n            particularly useful in conjunction with --step-target to step\n            through a complex calling sequence.\n\n       -m <run-mode> ( --run-mode <run-mode> )\n            Determine how to run other threads while stepping the current\n            thread.\n            Values: this-thread | all-threads | while-stepping\n\n       -r <regular-expression> ( --step-over-regexp <regular-expression> )\n            A regular expression that defines function names to not to stop at\n            when stepping in.\n\n       -t <function-name> ( --step-in-target <function-name> )\n            The name of the directly called function step in should stop at\n            when stepping into.\n     \n     This command takes options and free-form arguments.  If your arguments\n     resemble option specifiers (i.e., they start with a - or --), you must use\n     ' -- ' between the end of the command options and the beginning of the\n     arguments.\n\n'step' is an abbreviation for 'thread step-in'\n\n")),Object(o.b)("h4",{id:"stepi"},"stepi"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"(lldb)  help stepi\n     Instruction level single step, stepping into calls.  Defaults to current\n     thread unless specified.\n\nSyntax: \n\nCommand Options Usage:\n  stepi [-a <boolean>] [-A <boolean>] [-c <count>] [-e <linenum>] [-m <run-mode>] [-r <regular-expression>] [-t <function-name>] [<thread-id>]\n  stepi [-C <python-class>] [<thread-id>]\n\n       -A <boolean> ( --step-out-avoids-no-debug <boolean> )\n            A boolean value, if true stepping out of functions will continue to\n            step out till it hits a function with debug information.\n\n       -C <python-class> ( --python-class <python-class> )\n            The name of the class that will manage this step - only supported\n            for Scripted Step.\n\n       -a <boolean> ( --step-in-avoids-no-debug <boolean> )\n            A boolean value that sets whether stepping into functions will step\n            over functions with no debug information.\n\n       -c <count> ( --count <count> )\n            How many times to perform the stepping operation - currently only\n            supported for step-inst and next-inst.\n\n       -e <linenum> ( --end-linenumber <linenum> )\n            The line at which to stop stepping - defaults to the next line and\n            only supported for step-in and step-over.  You can also pass the\n            string 'block' to step to the end of the current block.  This is\n            particularly useful in conjunction with --step-target to step\n            through a complex calling sequence.\n\n       -m <run-mode> ( --run-mode <run-mode> )\n            Determine how to run other threads while stepping the current\n            thread.\n            Values: this-thread | all-threads | while-stepping\n\n       -r <regular-expression> ( --step-over-regexp <regular-expression> )\n            A regular expression that defines function names to not to stop at\n            when stepping in.\n\n       -t <function-name> ( --step-in-target <function-name> )\n            The name of the directly called function step in should stop at\n            when stepping into.\n     \n     This command takes options and free-form arguments.  If your arguments\n     resemble option specifiers (i.e., they start with a - or --), you must use\n     ' -- ' between the end of the command options and the beginning of the\n     arguments.\n\n'stepi' is an abbreviation for 'thread step-inst'\n(lldb) \n")),Object(o.b)("h4",{id:"t"},"t"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"(lldb) help t\n     Change the currently selected thread.\n\nSyntax: \n\n't' is an abbreviation for 'thread select'\n")),Object(o.b)("h3",{id:"\u4f7f\u7528\u573a\u666f"},"\u4f7f\u7528\u573a\u666f"),Object(o.b)("h4",{id:"\u5f53\u524d\u6240\u6709\u7ebf\u7a0b---backtrace-all"},"\u5f53\u524d\u6240\u6709\u7ebf\u7a0b - backtrace all"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"thread backtrace all ")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"(lldb) thread backtrace all\n  thread #1, queue = 'com.apple.main-thread', stop reason = step over\n    frame #0: 0x00000001081845b8 LLDBDemo`-[ViewController viewDidLoad](self=0x00007fa436d117f0, _cmd=\"viewDidLoad\") at ViewController.m:25\n    frame #1: 0x000000010af85131 UIKit`-[UIViewController loadViewIfRequired] + 1215\n    frame #2: 0x000000010af85574 UIKit`-[UIViewController view] + 27\n    frame #3: 0x000000010ae53123 UIKit`-[UIWindow addRootViewControllerViewIfPossible] + 122\n    frame #4: 0x000000010ae53834 UIKit`-[UIWindow _setHidden:forced:] + 294\n    frame #5: 0x000000010ae665cc UIKit`-[UIWindow makeKeyAndVisible] + 42\n    frame #6: 0x000000010adda3da UIKit`-[UIApplication _callInitializationDelegatesForMainScene:transitionContext:] + 4739\n    frame #7: 0x000000010addf5cb UIKit`-[UIApplication _runWithMainScene:transitionContext:completion:] + 1677\n    frame #8: 0x000000010b1a1f7e UIKit`__111-[__UICanvasLifecycleMonitor_Compatability _scheduleFirstCommitForScene:transition:firstActivation:completion:]_block_invoke + 866\n    frame #9: 0x000000010b574a39 UIKit`+[_UICanvas _enqueuePostSettingUpdateTransactionBlock:] + 153\n    frame #10: 0x000000010b1a1bba UIKit`-[__UICanvasLifecycleMonitor_Compatability _scheduleFirstCommitForScene:transition:firstActivation:completion:] + 236\n    frame #11: 0x000000010b1a23db UIKit`-[__UICanvasLifecycleMonitor_Compatability activateEventsOnly:withContext:completion:] + 675\n    frame #12: 0x000000010bb13614 UIKit`__82-[_UIApplicationCanvas _transitionLifecycleStateWithTransitionContext:completion:]_block_invoke + 299\n    frame #13: 0x000000010bb134ae UIKit`-[_UIApplicationCanvas _transitionLifecycleStateWithTransitionContext:completion:] + 433\n    frame #14: 0x000000010b7f775d UIKit`__125-[_UICanvasLifecycleSettingsDiffAction performActionsForCanvas:withUpdatedScene:settingsDiff:fromSettings:transitionContext:]_block_invoke + 221\n    frame #15: 0x000000010b9f24b7 UIKit`_performActionsWithDelayForTransitionContext + 100\n    frame #16: 0x000000010b7f7627 UIKit`-[_UICanvasLifecycleSettingsDiffAction performActionsForCanvas:withUpdatedScene:settingsDiff:fromSettings:transitionContext:] + 223\n    frame #17: 0x000000010b5740e0 UIKit`-[_UICanvas scene:didUpdateWithDiff:transitionContext:completion:] + 392\n    frame #18: 0x000000010adddeac UIKit`-[UIApplication workspace:didCreateScene:withTransitionContext:completion:] + 515\n    frame #19: 0x000000010b3b0bcb UIKit`-[UIApplicationSceneClientAgent scene:didInitializeWithEvent:completion:] + 361\n    frame #20: 0x000000010dd3d2f3 FrontBoardServices`-[FBSSceneImpl _didCreateWithTransitionContext:completion:] + 331\n    frame #21: 0x000000010dd45cfa FrontBoardServices`__56-[FBSWorkspace client:handleCreateScene:withCompletion:]_block_invoke_2 + 225\n    frame #22: 0x000000010ac117ec libdispatch.dylib`_dispatch_client_callout + 8\n    frame #23: 0x000000010ac16db8 libdispatch.dylib`_dispatch_block_invoke_direct + 592\n    frame #24: 0x000000010dd71470 FrontBoardServices`__FBSSERIALQUEUE_IS_CALLING_OUT_TO_A_BLOCK__ + 24\n    frame #25: 0x000000010dd7112e FrontBoardServices`-[FBSSerialQueue _performNext] + 439\n    frame #26: 0x000000010dd7168e FrontBoardServices`-[FBSSerialQueue _performNextFromRunLoopSource] + 45\n    frame #27: 0x0000000109393bb1 CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ + 17\n    frame #28: 0x00000001093784af CoreFoundation`__CFRunLoopDoSources0 + 271\n    frame #29: 0x0000000109377a6f CoreFoundation`__CFRunLoopRun + 1263\n    frame #30: 0x000000010937730b CoreFoundation`CFRunLoopRunSpecific + 635\n    frame #31: 0x000000010e606a73 GraphicsServices`GSEventRunModal + 62\n    frame #32: 0x000000010ade1057 UIKit`UIApplicationMain + 159\n    frame #33: 0x000000010818477f LLDBDemo`main(argc=1, argv=0x00007ffee7a7b038) at main.m:14\n    frame #34: 0x000000010ac8e955 libdyld.dylib`start + 1\n    frame #35: 0x000000010ac8e955 libdyld.dylib`start + 1\n* thread #3\n    frame #0: 0x000000010d36728a libsystem_kernel.dylib`__workq_kernreturn + 10\n    frame #1: 0x000000010d39d009 libsystem_pthread.dylib`_pthread_wqthread + 1035\n  * frame #2: 0x000000010d39cbe9 libsystem_pthread.dylib`start_wqthread + 13\n  thread #6, name = 'com.apple.uikit.eventfetch-thread'\n    frame #0: 0x000000010d35d20a libsystem_kernel.dylib`mach_msg_trap + 10\n    frame #1: 0x000000010d35c724 libsystem_kernel.dylib`mach_msg + 60\n    frame #2: 0x00000001093787d5 CoreFoundation`__CFRunLoopServiceMachPort + 229\n    frame #3: 0x0000000109377c19 CoreFoundation`__CFRunLoopRun + 1689\n    frame #4: 0x000000010937730b CoreFoundation`CFRunLoopRunSpecific + 635\n    frame #5: 0x0000000108481b4a Foundation`-[NSRunLoop(NSRunLoop) runMode:beforeDate:] + 274\n    frame #6: 0x00000001084fe67f Foundation`-[NSRunLoop(NSRunLoop) runUntilDate:] + 79\n    frame #7: 0x000000010ba37ce4 UIKit`-[UIEventFetcher threadMain] + 118\n    frame #8: 0x000000010848f3b3 Foundation`__NSThread__start__ + 1221\n    frame #9: 0x000000010d39d661 libsystem_pthread.dylib`_pthread_body + 340\n    frame #10: 0x000000010d39d50d libsystem_pthread.dylib`_pthread_start + 377\n    frame #11: 0x000000010d39cbf9 libsystem_pthread.dylib`thread_start + 13\n(lldb)  \n")),Object(o.b)("h4",{id:"\u5f80\u4e0b\u8d70\u4e00\u6b65---step-over"},"\u5f80\u4e0b\u8d70\u4e00\u6b65 - step-over"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"(lldb) thread step-over\n2018-07-23 11:07:59.218494+0800 LLDBDemo[43557:13678581] a = 10\n")),Object(o.b)("h2",{id:"process"},"process"),Object(o.b)("p",null,"\u8fdb\u7a0b"),Object(o.b)("p",null,"process           -- Commands for interacting with processes on the current platform."),Object(o.b)("h3",{id:"\u7b80\u5199-1"},"\u7b80\u5199"),Object(o.b)("h4",{id:"c"},"c"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"(lldb)  help c\n     Continue execution of all threads in the current process.\n\nSyntax: \n\nCommand Options Usage:\n  c [-i <unsigned-integer>]\n\n       -i <unsigned-integer> ( --ignore-count <unsigned-integer> )\n            Ignore <N> crossings of the breakpoint (if it exists) for the\n            currently selected thread.\n\n'c' is an abbreviation for 'process continue'\n")),Object(o.b)("h4",{id:"continue"},"continue"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"(lldb)  help continue\n     Continue execution of all threads in the current process.\n\nSyntax: \n\nCommand Options Usage:\n  continue [-i <unsigned-integer>]\n\n       -i <unsigned-integer> ( --ignore-count <unsigned-integer> )\n            Ignore <N> crossings of the breakpoint (if it exists) for the\n            currently selected thread.\n\n'continue' is an abbreviation for 'process continue'\n")),Object(o.b)("h2",{id:"breakpoint"},"breakpoint"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"(lldb) help breakpoint\n     Commands for operating on breakpoints (see 'help b' for shorthand.)\n\nSyntax: breakpoint\n\nThe following subcommands are supported:\n\n      clear   -- Delete or disable breakpoints matching the specified source\n                 file and line.\n      command -- Commands for adding, removing and listing LLDB commands\n                 executed when a breakpoint is hit.\n      delete  -- Delete the specified breakpoint(s).  If no breakpoints are\n                 specified, delete them all.\n      disable -- Disable the specified breakpoint(s) without deleting them.  If\n                 none are specified, disable all breakpoints.\n      enable  -- Enable the specified disabled breakpoint(s). If no breakpoints\n                 are specified, enable all of them.\n      list    -- List some or all breakpoints at configurable levels of detail.\n      modify  -- Modify the options on a breakpoint or set of breakpoints in\n                 the executable.  If no breakpoint is specified, acts on the\n                 last created breakpoint.  With the exception of -e, -d and -i,\n                 passing an empty argument clears the modification.\n      name    -- Commands to manage name tags for breakpoints\n      read    -- Read and set the breakpoints previously saved to a file with\n                 \"breakpoint write\".  \n      set     -- Sets a breakpoint or set of breakpoints in the executable.\n      write   -- Write the breakpoints listed to a file that can be read in\n                 with \"breakpoint read\".  If given no arguments, writes all\n                 breakpoints.\n\nFor more help on any particular subcommand, type 'help <command> <subcommand>'.\n")),Object(o.b)("h2",{id:"\u67e5\u770b\u5bf9\u8c61\u5185\u5b58\u5e03\u5c40---frame"},"\u67e5\u770b\u5bf9\u8c61\u5185\u5b58\u5e03\u5c40 - frame"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"(lldb) frame variable -R num1\n(Swift.Optional<Swift.Int>) num1 = none {\n  some = {\n    _value = 0\n  }\n}\n(lldb) frame variable -R num2\n(Swift.Optional<Swift.Optional<Swift.Int>>) num2 = some {\n  some = none {\n    some = {\n      _value = 0\n    }\n  }\n}\n(lldb) frame variable -R num3\n(Swift.Optional<Swift.Optional<Swift.Int>>) num3 = none {\n  some = some {\n    some = {\n      _value = 0\n    }\n  }\n}\n(lldb) \n")),Object(o.b)("h2",{id:"\u6253\u5370\u51fd\u6570\u8c03\u7528\u6808-bt"},"\u6253\u5370\u51fd\u6570\u8c03\u7528\u6808-bt"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"(lldb) bt\n* thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 7.1\n  * frame #0: 0x00000001000041bd test02`plus #1 (a=3, num=6) in getFn() at main.swift:18:16\n    frame #1: 0x0000000100003d3d test02`main at main.swift:30:7\n    frame #2: 0x00007fff6e7b9cc9 libdyld.dylib`start + 1\n    frame #3: 0x00007fff6e7b9cc9 libdyld.dylib`start + 1\n")),Object(o.b)("h2",{id:"\u67e5\u770b\u5bc4\u5b58\u5668\u7684\u503c---register"},"\u67e5\u770b\u5bc4\u5b58\u5668\u7684\u503c - register"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"(lldb) register read rax\n     rax = 0x0000000103b04080\n(lldb) x/5xg 0x0000000103b04080\n0x103b04080: 0x000000010000c158 0x0000000200000002\n0x103b04090: 0x0000000000000001 0x0000000000000000\n0x103b040a0: 0x0000000000000000\n1\n(lldb) x/5xg 0x0000000103b04080\n0x103b04080: 0x000000010000c158 0x0000000200000002\n0x103b04090: 0x0000000000000003 0x0000000000000000\n0x103b040a0: 0x0000000000000006\n3\n(lldb) x/5xg 0x0000000103b04080\n0x103b04080: 0x000000010000c158 0x0000000200000002\n0x103b04090: 0x0000000000000006 0x0000000000000000\n0x103b040a0: 0x0000000000000006\n(lldb) x/4xg 0x0000000103b04080\n0x103b04080: 0x000000010000c158 0x0000000200000002\n0x103b04090: 0x0000000000000006 0x0000000000000000\n(lldb) x/4xw 0x0000000103b04080\n0x103b04080: 0x0000c158 0x00000001 0x00000002 0x00000002\n(lldb) \n")),Object(o.b)("h2",{id:"\u6839\u636e\u5185\u5b58\u5730\u5740\u67e5\u770b\u5185\u5b58\u7684\u503c---x"},"\u6839\u636e\u5185\u5b58\u5730\u5740\u67e5\u770b\u5185\u5b58\u7684\u503c - x"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"(lldb) register read rax\n     rax = 0x0000000103b04080\n(lldb) x/5xg 0x0000000103b04080\n0x103b04080: 0x000000010000c158 0x0000000200000002\n0x103b04090: 0x0000000000000001 0x0000000000000000\n0x103b040a0: 0x0000000000000000\n1\n(lldb) x/5xg 0x0000000103b04080\n0x103b04080: 0x000000010000c158 0x0000000200000002\n0x103b04090: 0x0000000000000003 0x0000000000000000\n0x103b040a0: 0x0000000000000006\n3\n(lldb) x/5xg 0x0000000103b04080\n0x103b04080: 0x000000010000c158 0x0000000200000002\n0x103b04090: 0x0000000000000006 0x0000000000000000\n0x103b040a0: 0x0000000000000006\n(lldb) x/4xg 0x0000000103b04080\n0x103b04080: 0x000000010000c158 0x0000000200000002\n0x103b04090: 0x0000000000000006 0x0000000000000000\n(lldb) x/4xw 0x0000000103b04080\n0x103b04080: 0x0000c158 0x00000001 0x00000002 0x00000002\n(lldb) \n")),Object(o.b)("h1",{id:"\u7efc\u5408"},"\u7efc\u5408"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"(lldb) continue\nProcess 47218 resuming\n(lldb) breakpoint delete 2\n1 breakpoints deleted; 0 breakpoint locations disabled.\n(lldb) continue\nProcess 47218 resuming\n(lldb) br list\nCurrent breakpoints:\n3: file = '/Users/goldwallet/Desktop/myDemo/iOS/LLDBDemo/LLDBDemo/AppDelegate.m', line = 19, exact_match = 0, locations = 1, resolved = 1, hit count = 1\n\n  3.1: where = LLDBDemo`-[AppDelegate application:didFinishLaunchingWithOptions:] + 80 at AppDelegate.m:21, address = 0x000000010d86a7f0, resolved, hit count = 1 \n\n4: address = libobjc.A.dylib[0x000000000001b980], locations = 1, resolved = 1, hit count = 2\n  4.1: where = libobjc.A.dylib`objc_msgSend, address = 0x000000010e182980, resolved, hit count = 2 \n")),Object(o.b)("h2",{id:"\u6253\u5370\u5bf9\u8c61"},"\u6253\u5370\u5bf9\u8c61"),Object(o.b)("p",null,"\u6253\u5370\u5982\u4e0b\u4fe1\u606f\uff1a"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"\u5bf9\u8c61")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"\u6307\u9488\u53d8\u91cf\u7684\u503c\uff08\u4e5f\u5c31\u662f\u5bf9\u8c61\u5730\u5740\uff09")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"\u6307\u9488\u53d8\u91cf\u7684\u5730\u5740"))),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"     a=199\n     &a=0x7ffee4f6b9ac\n     &p=0x7ffee4f6b9a0\n     p=0x7ffee4f6b9ac\n     *p=199\n     2018-10-25 11:28:40.950014+0800 PointerDemo[978:2153486] name:DingYusong\n     2018-10-25 11:28:40.950144+0800 PointerDemo[978:2153486] &name:0x7ffee4f6b998\n     2018-10-25 11:28:40.950231+0800 PointerDemo[978:2153486] name:0x60000306b500\n     (lldb) p name\n     (__NSCFString *) $0 = 0x000060000306b500 @\"DingYusong\"\n     (lldb) p *name\n     (NSString) $1 = {\n     NSObject = {\n     isa = __NSCFString\n     }\n     }\n     (lldb) p &name\n     (NSString **) $2 = 0x00007ffee4f6b998\n     (lldb) p a\n     (int) $3 = 199\n     (lldb) p &a\n     (int *) $4 = 0x00007ffee4f6b9ac\n     (lldb) p p\n     (int *) $5 = 0x00007ffee4f6b9ac\n     (lldb) p *p\n     (int) $6 = 199\n     (lldb) p &p\n     (int **) $7 = 0x00007ffee4f6b9a0\n     (lldb) p *a\n     error: indirection requires pointer operand ('int' invalid)\n     (lldb)\n")),Object(o.b)("h2",{id:"\u8bfb\u53d6\u53d8\u91cf\u5185\u5b58\u7684\u503c"},"\u8bfb\u53d6\u53d8\u91cf\u5185\u5b58\u7684\u503c"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-objective-c"},"    NSMutableDictionary *dict = [NSMutableDictionary dictionaryWithDictionary:self.commonParameters];\n    \n    NSMutableDictionary *dict2 = [self.commonParameters mutableCopy];\n    NSMutableDictionary *dict3 = dict2;\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"(lldb) po &dict\n0x000000016b2692d8\n\n(lldb) po &dict2\n0x000000016b2692d0\n\n(lldb) po &dict3\n0x000000016b2692c8\n\n(lldb) x 0x000000016b2692d8 \n0x16b2692d8: 40 eb bf 81 02 00 00 00 4d 71 fa 04 01 00 00 00  @.......Mq......\n0x16b2692e8: 80 4f 5c 83 02 00 00 00 10 94 26 6b 01 00 00 00  .O\\.......&k....\n(lldb) x 0x000000016b2692d0\n0x16b2692d0: 00 de bf 81 02 00 00 00 40 eb bf 81 02 00 00 00  ........@.......\n0x16b2692e0: 4d 71 fa 04 01 00 00 00 80 4f 5c 83 02 00 00 00  Mq.......O\\.....\n(lldb) x 0x000000016b2692c8\n0x16b2692c8: 00 de bf 81 02 00 00 00 00 de bf 81 02 00 00 00  ................\n0x16b2692d8: 40 eb bf 81 02 00 00 00 4d 71 fa 04 01 00 00 00  @.......Mq......\n(lldb) x/5xg 0x000000016b2692c8\n0x16b2692c8: 0x0000000281bfde00 0x0000000281bfde00\n0x16b2692d8: 0x0000000281bfeb40 0x0000000104fa714d\n0x16b2692e8: 0x00000002835c4f80\n(lldb) x/5xg 0x000000016b2692d0\n0x16b2692d0: 0x0000000281bfde00 0x0000000281bfeb40\n0x16b2692e0: 0x0000000104fa714d 0x00000002835c4f80\n0x16b2692f0: 0x000000016b269410\n(lldb) \n")),Object(o.b)("p",null,"\u5c40\u90e8\u53d8\u91cf\u5730\u5740\uff1a"),Object(o.b)("p",null,"dict 1\uff1a0x000000016b2692d8"),Object(o.b)("p",null,"dict 2\uff1a0x000000016b2692d0"),Object(o.b)("p",null,"dict 3\uff1a0x000000016b2692c8"),Object(o.b)("p",null,"\u6808\u7a7a\u95f4\u5f80\u4e0b\u589e\u957f\u3002"),Object(o.b)("p",null,"dict 2 \u662f\u4e00\u4e2a\u5730\u5740\uff0c\u572864\u673a\u5668\u4e0a\uff0c\u4e5f\u662f8\u5b57\u8282\u3002\u6240\u4ee5\uff1a"),Object(o.b)("p",null,"\u6211\u4eec\u53ef\u4ee5\u770b\u5230 dict2\u548cdict3 \u6307\u5411\u7684\u5bf9\u8c61\u662f\u4e00\u6837\u7684\uff0c\u4ec5\u4ec5\u662f\u4e00\u4e2a\u5f15\u7528\u3002\u90fd\u662f\uff1a0x0000000281bfde00"),Object(o.b)("h2",{id:"\u89c2\u5bdf\u5bf9\u8c61"},"\u89c2\u5bdf\u5bf9\u8c61"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"watchpoint set variable string_weak_")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-shell"},"(lldb) watchpoint set variable string_weak_\nWatchpoint created: Watchpoint 1: addr = 0x10f7aeed8 size = 8 state = enabled type = w\n    declare @ '/Users/goldwallet/Desktop/myDemo/AutoReleaseDemo2/AutoReleaseDemo2/ViewController.m:17'\n    watchpoint spec = 'string_weak_'\n    new value: 0x000060000361b5a0\n2018-10-25 12:05:49.948043+0800 AutoReleaseDemo2[1833:2230929] viewDidLoad:string_weak_:DingYusong\n2018-10-25 12:05:49.948394+0800 AutoReleaseDemo2[1833:2230929] viewWillAppear:string_weak_:DingYusong\n\nWatchpoint 1 hit:\nold value: 0x000060000361b5a0\nnew value: 0x0000000000000000\n(lldb) \n")),Object(o.b)("p",null,"\u5982\u4e0b\uff1a\u914d\u5408p\u547d\u4ee4\u89c2\u5bdfstring",Object(o.b)("em",{parentName:"p"},"weak"),"\u5bf9\u8c61\u7684\u53d8\u5316\u3002"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-shell"},"(lldb) watchpoint set variable string_weak_\nWatchpoint created: Watchpoint 1: addr = 0x1068eeed8 size = 8 state = enabled type = w\n    declare @ '/Users/goldwallet/Desktop/myDemo/AutoReleaseDemo2/AutoReleaseDemo2/ViewController.m:17'\n    watchpoint spec = 'string_weak_'\n    new value: 0x0000000000000000\n(lldb) p *string_weak_\nerror: Couldn't apply expression side effects : Couldn't dematerialize a result variable: couldn't read its memory\n(lldb) p string_weak_\n(NSString *) $1 = nil\n(lldb) p &string_weak_\n(NSString **) $2 = 0x00000001068eeed8\n\nWatchpoint 1 hit:\nold value: 0x0000000000000000\nnew value: 0x00006000014283e0\n(lldb) p *string_weak_\n(NSString) $3 = {\n  NSObject = {\n    isa = __NSCFString\n  }\n}\n(lldb) p string_weak_\n(__NSCFString *) $4 = 0x00006000014283e0 @\"DingYusong\"\n(lldb) p &string_weak_\n(NSString **) $5 = 0x00000001068eeed8\n2018-10-25 12:08:45.904340+0800 AutoReleaseDemo2[1858:2235274] viewDidLoad:string_weak_:DingYusong\n2018-10-25 12:08:45.904722+0800 AutoReleaseDemo2[1858:2235274] viewWillAppear:string_weak_:DingYusong\n\nWatchpoint 1 hit:\nold value: 0x00006000014283e0\nnew value: 0x0000000000000000\n(lldb) p *string_weak_\nerror: Couldn't apply expression side effects : Couldn't dematerialize a result variable: couldn't read its memory\n(lldb) p string_weak_\n(NSString *) $7 = nil\n(lldb) p &string_weak_\n(NSString **) $8 = 0x00000001068eeed8\n\n")),Object(o.b)("h1",{id:"chisel"},"chisel"),Object(o.b)("p",null,"pvc\uff1a \u67e5\u770b\u63a7\u5236\u5668\u6811\u7ed3\u6784"),Object(o.b)("p",null,"pviews\uff1a\u67e5\u770bView\u6811\u7ed3\u6784"),Object(o.b)("p",null,"\u53c2\u8003\u6587\u6863\uff1a"),Object(o.b)("p",null,Object(o.b)("a",{parentName:"p",href:"https://github.com/facebook/chisel"},"https://github.com/facebook/chisel")),Object(o.b)("h2",{id:"pviews"},"pviews"),Object(o.b)("p",null,"Print the recursive view description for the key window."),Object(o.b)("p",null,"\u6253\u5370View\u7684\u5c42\u7ea7\u5173\u7cfb"),Object(o.b)("p",null,Object(o.b)("img",{parentName:"p",src:"http://wiso.liwenhui520.com/20200827159849845016525.png",alt:"20200827159849845016525.png"})),Object(o.b)("p",null,Object(o.b)("img",{parentName:"p",src:"http://wiso.liwenhui520.com/2020082715984983416231.png",alt:"2020082715984983416231.png"})),Object(o.b)("h2",{id:"pvc"},"pvc"),Object(o.b)("p",null,"Print the recursive view controller description for the key window."),Object(o.b)("p",null,"\u7b54\u5e94\u89c6\u56fe\u63a7\u5236\u5668\u7684\u5c42\u7ea7"),Object(o.b)("p",null,Object(o.b)("img",{parentName:"p",src:"http://wiso.liwenhui520.com/20200827159849838629812.png",alt:"20200827159849838629812.png"})),Object(o.b)("p",null,"\u5f53\u524d\u6700\u9ad8\u5c42\u7ea7\u662f\uff1a  | <YYIEasyInvestViewController 0x7fde9f9d9a00>, state: appeared, view: <UIView 0x7fdea4d2f980>"),Object(o.b)("p",null,Object(o.b)("img",{parentName:"p",src:"http://wiso.liwenhui520.com/20200827159849845016525.png",alt:"20200827159849845016525.png"})),Object(o.b)("h2",{id:"visualize"},"visualize"),Object(o.b)("p",null,"Open a ",Object(o.b)("inlineCode",{parentName:"p"},"UIImage"),", ",Object(o.b)("inlineCode",{parentName:"p"},"CGImageRef"),", ",Object(o.b)("inlineCode",{parentName:"p"},"UIView"),", ",Object(o.b)("inlineCode",{parentName:"p"},"CALayer"),", ",Object(o.b)("inlineCode",{parentName:"p"},"NSData")," (of an image), ",Object(o.b)("inlineCode",{parentName:"p"},"UIColor"),", ",Object(o.b)("inlineCode",{parentName:"p"},"CIColor"),", or ",Object(o.b)("inlineCode",{parentName:"p"},"CGColorRef")," in Preview.app on your Mac."),Object(o.b)("p",null,"\u7528\u9884\u89c8\u6253\u5f00\u67d0\u4e2a\u5bf9\u8c61"),Object(o.b)("p",null,Object(o.b)("img",{parentName:"p",src:"http://wiso.liwenhui520.com/2020082715984986213965.png",alt:"2020082715984986213965.png"})),Object(o.b)("p",null,Object(o.b)("img",{parentName:"p",src:"http://wiso.liwenhui520.com/20200827159849860361673.png",alt:"20200827159849860361673.png"})),Object(o.b)("p",null,Object(o.b)("img",{parentName:"p",src:"http://wiso.liwenhui520.com/2020082715984985738024.png",alt:"2020082715984985738024.png"})),Object(o.b)("p",null,Object(o.b)("img",{parentName:"p",src:"http://wiso.liwenhui520.com/20200827159849855145105.png",alt:"20200827159849855145105.png"})),Object(o.b)("h2",{id:"fv"},"fv"),Object(o.b)("p",null,"Find a view in the hierarchy whose class name matches the provided regex."),Object(o.b)("p",null,"\u8f93\u5165View\u7c7b\u540d\uff0c\u627e\u5230\u76f8\u5173\u7684\u7c7b"),Object(o.b)("p",null,Object(o.b)("img",{parentName:"p",src:"http://wiso.liwenhui520.com/20200827159849869135193.png",alt:"20200827159849869135193.png"})),Object(o.b)("h2",{id:"fvc"},"fvc"),Object(o.b)("p",null,"Find a view controller in the hierarchy whose class name matches the provided regex."),Object(o.b)("p",null,"\u8f93\u5165\u63a7\u5236\u5668\u7c7b\u540d\uff0c\u627e\u5230\u63a7\u5236\u5668\u5730\u5740"),Object(o.b)("p",null,Object(o.b)("img",{parentName:"p",src:"http://wiso.liwenhui520.com/20200827159849885986380.png",alt:"20200827159849885986380.png"})),Object(o.b)("h2",{id:"showhide"},"show/hide"),Object(o.b)("p",null,"Show or hide the given view or layer. You don't even have to continue the process to see the changes!"),Object(o.b)("p",null,"\u663e\u793a\u548c\u9690\u85cf\u67d0\u4e2aView\u6216\u8005\u5c42\u7ea7\u3002"),Object(o.b)("p",null,Object(o.b)("img",{parentName:"p",src:"http://wiso.liwenhui520.com/2020082715984990742805.png",alt:"2020082715984990742805.png"})),Object(o.b)("p",null,Object(o.b)("img",{parentName:"p",src:"http://wiso.liwenhui520.com/20200827159850279827645.png",alt:"20200827159850279827645.png"})),Object(o.b)("p",null,Object(o.b)("img",{parentName:"p",src:"http://wiso.liwenhui520.com/20200827159850277820145.png",alt:"20200827159850277820145.png"})),Object(o.b)("p",null,Object(o.b)("img",{parentName:"p",src:"http://wiso.liwenhui520.com/20200827159850282842225.png",alt:"20200827159850282842225.png"})),Object(o.b)("p",null,"\u5c55\u793a\u51fa\u6765\u4e86"),Object(o.b)("p",null,Object(o.b)("img",{parentName:"p",src:"http://wiso.liwenhui520.com/2020082715984990742805.png",alt:"2020082715984990742805.png"})),Object(o.b)("h2",{id:"maskunmask"},"mask/unmask"),Object(o.b)("p",null,"Overlay a view or layer with a transparent rectangle to visualize where it is."),Object(o.b)("p",null,"mask\uff1a\u628a\u67d0\u4e2aView\u6216\u8005layer\u7528\u8499\u7248\u6807\u8bc6\u51fa\u6765/unmask\uff1a\u53bb\u9664\u8499\u7248"),Object(o.b)("p",null,Object(o.b)("img",{parentName:"p",src:"http://wiso.liwenhui520.com/20200827159850310720544.png",alt:"20200827159850310720544.png"})),Object(o.b)("p",null,Object(o.b)("img",{parentName:"p",src:"http://wiso.liwenhui520.com/202008271598502974531.png",alt:"202008271598502974531.png"})),Object(o.b)("h2",{id:"borderunborder"},"border/unborder"),Object(o.b)("p",null,"Add a border to a view or layer to visualize where it is."),Object(o.b)("p",null,"border\uff1a\u6dfb\u52a0\u63cf\u8fb9/ unborder: \u53bb\u9664\u63cf\u8fb9"),Object(o.b)("p",null,Object(o.b)("img",{parentName:"p",src:"http://wiso.liwenhui520.com/20200827159850318996496.png",alt:"20200827159850318996496.png"})),Object(o.b)("h2",{id:"\u5b9e\u6218\u573a\u666f\u6848\u4f8b\uff1a"},"\u5b9e\u6218\u573a\u666f\u6848\u4f8b\uff1a"),Object(o.b)("h3",{id:"\u5e03\u5c40\u9650\u5236\u62a5\u9519"},"\u5e03\u5c40\u9650\u5236\u62a5\u9519"),Object(o.b)("p",null,"1.\u53d1\u73b0\u9650\u5236\u62a5\u9519"),Object(o.b)("p",null,Object(o.b)("img",{parentName:"p",src:"http://wiso.liwenhui520.com/20200827159849734160142.png",alt:"20200827159849734160142.png"})),Object(o.b)("ol",{start:2},Object(o.b)("li",{parentName:"ol"},"\u67e5\u770b\u754c\u9762\u7ed3\u6784pviews\uff1a\u4e3b\u8981\u76ee\u7684\u662f\u6839\u7edd\u5bf9\u8c61\u5730\u5740\u5b9a\u4f4d\u62a5\u9519\u4fe1\u606f\u76f8\u5173\u5bf9\u8c61")),Object(o.b)("p",null,Object(o.b)("img",{parentName:"p",src:"http://wiso.liwenhui520.com/20200827159849746734137.png",alt:"20200827159849746734137.png"})),Object(o.b)("ol",{start:3},Object(o.b)("li",{parentName:"ol"},"\u5206\u6790\u62a5\u9519\u4fe1\u606f\u7ed3\u5408UI\u56fe\u5206\u6790\uff0c\u53bb\u6389View\u7684bottom\u9650\u5236\u5373\u53ef\u3002")),Object(o.b)("p",null,Object(o.b)("img",{parentName:"p",src:"http://wiso.liwenhui520.com/20200827159849750783378.png",alt:"20200827159849750783378.png"})),Object(o.b)("p",null,Object(o.b)("img",{parentName:"p",src:"http://wiso.liwenhui520.com/20200827159849754375787.png",alt:"20200827159849754375787.png"})),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"2020-08-27 10:53:34.146698+0800 GoldWallet[36335:725792] \nsetValue:((__NSCFString)2020-08-27 10:10:56) forUndefinedKey:(investTime) ofEntity:(APIAccountQueryUserEasyInvestListItemModel)\n2020-08-27 10:53:34.164949+0800 GoldWallet[36335:725792] [LayoutConstraints] Unable to simultaneously satisfy constraints.\n    Probably at least one of the constraints in the following list is one you don't want. \n    Try this: \n        (1) look at each constraint and try to figure out which you don't expect; \n        (2) find the code that added the unwanted constraint or constraints and fix it. \n(\n    \"<NSLayoutConstraint:0x600000889060 CVGFormView:0x7fa7f3d52b10.height == 44>\",\n    \"<NSLayoutConstraint:0x600000891a30 UIView:0x7fa7f3d5b9b0.height == 80>\",\n    \"<NSLayoutConstraint:0x600000891e90 CVGFormView:0x7fa7f3d52b10.top == UITableViewCellContentView:0x7fa7f3d279a0.top>\",\n    \"<NSLayoutConstraint:0x6000008904a0 UIView:0x7fa7f3d5b9b0.top == CVGFormView:0x7fa7f3d52b10.bottom>\",\n    \"<NSLayoutConstraint:0x600000891d00 UITableViewCellContentView:0x7fa7f3d279a0.bottom == UIView:0x7fa7f3d5b9b0.bottom>\",\n    \"<NSLayoutConstraint:0x604000e872b0 UITableViewCellContentView:0x7fa7f3d279a0.height == 134>\"\n)\n\nWill attempt to recover by breaking constraint \n<NSLayoutConstraint:0x600000891a30 UIView:0x7fa7f3d5b9b0.height == 80>\n\nMake a symbolic breakpoint at UIViewAlertForUnsatisfiableConstraints to catch this in the debugger.\nThe methods in the UIConstraintBasedLayoutDebugging category on UIView listed in <UIKit/UIView.h> may also be helpful.\n(lldb) pvc\n<RootNavigationController 0x7fa7ef065800>, state: appeared, view: <UILayoutContainerView 0x7fa7ee420020>\n   | <RootTabBarController 0x7fa7ef064200>, state: disappeared, view: <UILayoutContainerView 0x7fa7ee530ec0> not in the window\n   |    | <YYIRnIndexViewController 0x7fa7ee551fc0>, state: disappeared, view: <RCTRootView 0x7fa7ee54f7c0> not in the window\n   |    | <YYIRNFinancingProductListViewController 0x7fa7ee441660>, state: disappeared, view: (view not loaded)\n   |    | <YYIRNAccountViewController 0x7fa7ee46cab0>, state: disappeared, view: <RCTRootView 0x7fa7ee41bab0> not in the window\n   | <YYIRNBaseViewController 0x7fa7f3c0c370>, state: disappeared, view: <RCTRootView 0x7fa7ee74d2e0> not in the window\n   | <YYIEasyInvestViewController 0x7fa7ef132000>, state: appeared, view: <UIView 0x7fa7f3d30d60>\n(lldb) pv\nAmbiguous command 'pv'. Possible matches:\n    pvc\n    pviews\n(lldb) pviews\n<UIWindow: 0x7fa7ee46c520; frame = (0 0; 375 812); autoresize = W+H; gestureRecognizers = <NSArray: 0x600000457010>; layer = <UIWindowLayer: 0x600000820fa0>>\n   | <UILayoutContainerView: 0x7fa7ee420020; frame = (0 0; 375 812); autoresize = W+H; gestureRecognizers = <NSArray: 0x604000654820>; layer = <CALayer: 0x600000824aa0>>\n   |    | <UINavigationTransitionView: 0x7fa7ee62bed0; frame = (0 0; 375 812); clipsToBounds = YES; autoresize = W+H; layer = <CALayer: 0x600000828d60>>\n   |    |    | <UIViewControllerWrapperView: 0x7fa7ee50b200; frame = (0 0; 375 812); autoresize = W+H; layer = <CALayer: 0x60400063a960>>\n   |    |    |    | <UIView: 0x7fa7f3d30d60; frame = (0 88; 375 724); autoresize = W+H; layer = <CALayer: 0x600000c28fe0>>\n   |    |    |    |    | <CVGFormView: 0x7fa7f3d4ba10; baseClass = UIControl; frame = (0 656; 375 68); autoresize = RM+BM; layer = <CALayer: 0x600000c33240>>\n   |    |    |    |    |    | <UIButton: 0x7fa7f3d3f200; frame = (10 10; 355 48); clipsToBounds = YES; opaque = NO; autoresize = RM+BM; layer = <CALayer: 0x600000c33280>>\n   |    |    |    |    |    |    | <UIImageView: 0x7fa7f3d3dbe0; frame = (0 0; 355 48); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = <CALayer: 0x600000c2a540>> - (null)\n   |    |    |    |    |    |    | <UIButtonLabel: 0x7fa7f3d3de10; frame = (143 14; 69.3333 20.3333); text = ''; opaque = NO; userInteractionEnabled = NO; layer = <_UILabelLayer: 0x60000088a1e0>>\n   |    |    |    |    |    |    |    | <_UILabelContentLayer: 0x600000a3be20> (layer)\n   |    |    |    |    | <UIView: 0x7fa7ee4e09f0; frame = (0 0; 375 49); autoresize = RM+BM; layer = <CALayer: 0x600000c208c0>>\n   |    |    |    |    |    | <CVGScrollTabBarItemView: 0x7fa7ee4be7a0; frame = (0 0; 375 49); autoresize = RM+BM; layer = <CALayer: 0x600000c2a2a0>>\n   |    |    |    |    |    |    | <UIScrollView: 0x7fa7ef34b800; frame = (0 0; 375 49); clipsToBounds = YES; gestureRecognizers = <NSArray: 0x600000a51130>; layer = <CALayer: 0x600000c25de0>; contentOffset: {0, 0}; contentSize: {375, 49}; adjustedContentInset: {0, 0, 0, 0}>\n   |    |    |    |    |    |    |    | <UIView: 0x7fa7ee4fa830; frame = (0 0; 375 49); layer = <CALayer: 0x600000c32ae0>>\n   |    |    |    |    |    |    |    |    | <UIButton: 0x7fa7ee4bc0f0; frame = (57 8.66667; 49 32); opaque = NO; tag = 100; layer = <CALayer: 0x600000a3e9a0>>\n   |    |    |    |    |    |    |    |    |    | <UIButtonLabel: 0x7fa7ee4d67c0; frame = (0 6.33333; 49 19.3333); text = ''; opaque = NO; userInteractionEnabled = NO; layer = <_UILabelLayer: 0x600000898880>>\n   |    |    |    |    |    |    |    |    |    |    | <_UILabelContentLayer: 0x600000c28e20> (layer)\n   |    |    |    |    |    |    |    |    | <UIButton: 0x7fa7ee4c90a0; frame = (163 8.66667; 49 32); opaque = NO; tag = 101; layer = <CALayer: 0x600000c252a0>>\n   |    |    |    |    |    |    |    |    |    | <UIButtonLabel: 0x7fa7f3d3d2c0; frame = (0 6.33333; 49 19.3333); text = ''; opaque = NO; userInteractionEnabled = NO; layer = <_UILabelLayer: 0x600000899780>>\n   |    |    |    |    |    |    |    |    |    |    | <_UILabelContentLayer: 0x600000c35e80> (layer)\n   |    |    |    |    |    |    |    |    | <UIButton: 0x7fa7f3d3d5c0; frame = (269 8.66667; 49 32); opaque = NO; tag = 102; layer = <CALayer: 0x600000a345c0>>\n   |    |    |    |    |    |    |    |    |    | <UIButtonLabel: 0x7fa7f3d3d8e0; frame = (0 6.33333; 49 19.3333); text = ''; opaque = NO; userInteractionEnabled = NO; layer = <_UILabelLayer: 0x60000088a0f0>>\n   |    |    |    |    |    |    |    |    |    |    | <_UILabelContentLayer: 0x600000c278c0> (layer)\n   |    |    |    |    |    |    |    |    | <UIView: 0x7fa7f3d2dbc0; frame = (57 45.6667; 49 3); layer = <CALayer: 0x600000c2d860>>\n   |    |    |    |    |    | <UIView: 0x7fa7ee417bd0; frame = (0 48.6667; 375 0.333333); autoresize = RM+BM; layer = <CALayer: 0x600000c2aca0>>\n   |    |    |    |    | <CVGScrollContainerView: 0x7fa7f3d5eda0; frame = (0 49; 375 675); autoresize = RM+BM; layer = <CALayer: 0x600000c32a40>>\n   |    |    |    |    |    | <UIScrollView: 0x7fa7ef14be00; frame = (0 0; 375 675); clipsToBounds = YES; gestureRecognizers = <NSArray: 0x600000a4f360>; layer = <CALayer: 0x600000c34fe0>; contentOffset: {0, 0}; contentSize: {1125, 675}; adjustedContentInset: {0, 0, 0, 0}>\n   |    |    |    |    |    |    | <UIView: 0x7fa7f3d353c0; frame = (0 0; 1125 675); layer = <CALayer: 0x600000c2cf00>>\n   |    |    |    |    |    |    |    | <UIView: 0x7fa7f3d32600; frame = (0 0; 375 675); layer = <CALayer: 0x600000827d80>>\n   |    |    |    |    |    |    |    |    | <UIImageView: 0x7fa7f3d29260; frame = (117.667 10; 140 20); opaque = NO; userInteractionEnabled = NO; layer = <CALayer: 0x600000a2d0e0>> - (null)\n   |    |    |    |    |    |    |    |    | <CVGRefreshTableView: 0x7fa7ef00e800; baseClass = UITableView; frame = (0 40; 375 635); clipsToBounds = YES; gestureRecognizers = <NSArray: 0x600000a5a670>; layer = <CALayer: 0x600000a3dfa0>; contentOffset: {0, 0}; contentSize: {375, 134}; adjustedContentInset: {0, 0, 78, 0}>\n   |    |    |    |    |    |    |    |    |    | <YYIEasyInvestListCell: 0x7fa7ef34c800; baseClass = UITableViewCell; frame = (0 0; 375 134); autoresize = W; layer = <CALayer: 0x600000c2bc20>>\n   |    |    |    |    |    |    |    |    |    |    | <UITableViewCellContentView: 0x7fa7f3d279a0; frame = (0 0; 375 134); opaque = NO; gestureRecognizers = <NSArray: 0x600000a5a220>; layer = <CALayer: 0x600000a3ffc0>>\n   |    |    |    |    |    |    |    |    |    |    |    | <CVGFormView: 0x7fa7f3d52b10; baseClass = UIControl; frame = (0 0; 375 44); autoresize = RM+BM; userInteractionEnabled = NO; layer = <CALayer: 0x600000c344e0>>\n   |    |    |    |    |    |    |    |    |    |    |    |    | <UIView: 0x7fa7f3d28990; frame = (20 13; 0 18); clipsToBounds = YES; autoresize = RM+BM; layer = <CALayer: 0x600000a3b600>>\n   |    |    |    |    |    |    |    |    |    |    |    |    |    | <UIView: 0x7fa7ee40b3c0; frame = (0 0; 22 18); autoresize = RM+BM; layer = <CALayer: 0x600000828020>>\n   |    |    |    |    |    |    |    |    |    |    |    |    |    |    | <UIImageView: 0x7fa7ee4e4b60; frame = (0 0; 18 18); clipsToBounds = YES; autoresize = RM+BM; userInteractionEnabled = NO; layer = <CALayer: 0x600000c34ae0>> - (null)\n   |    |    |    |    |    |    |    |    |    |    |    |    | <UIView: 0x7fa7ee4beb00; frame = (20 13; 0 18); clipsToBounds = YES; autoresize = RM+BM; layer = <CALayer: 0x600000827c20>>\n   |    |    |    |    |    |    |    |    |    |    |    |    |    | <UIView: 0x7fa7ee4c1a20; frame = (0 0; 22 18); autoresize = RM+BM; layer = <CALayer: 0x600000c34f80>>\n   |    |    |    |    |    |    |    |    |    |    |    |    |    |    | <UIImageView: 0x7fa7ee4c8cf0; frame = (0 0; 18 18); clipsToBounds = YES; autoresize = RM+BM; userInteractionEnabled = NO; layer = <CALayer: 0x600000c36220>> - (null)\n   |    |    |    |    |    |    |    |    |    |    |    |    | <UILabel: 0x7fa7ee4e8f50; frame = (20 12.3333; 233.667 19.3333); text = '_0001 20200921-1'; opaque = NO; autoresize = RM+BM; userInteractionEnabled = NO; layer = <_UILabelLayer: 0x60000088b0e0>>\n   |    |    |    |    |    |    |    |    |    |    |    |    |    | <_UILabelContentLayer: 0x604000e26840> (layer)\n   |    |    |    |    |    |    |    |    |    |    |    |    | <UIView: 0x7fa7ee4bc8a0; frame = (253.667 14; 0 16); clipsToBounds = YES; autoresize = RM+BM; layer = <CALayer: 0x600000c2cb40>>\n   |    |    |    |    |    |    |    |    |    |    |    |    |    | <UIView: 0x7fa7f3d42c60; frame = (0 0; 42 16); autoresize = RM+BM; layer = <CALayer: 0x600000a31540>>\n   |    |    |    |    |    |    |    |    |    |    |    |    |    |    | <UIImageView: 0x7fa7ee4e6c70; frame = (4 0; 38 16); clipsToBounds = YES; autoresize = RM+BM; userInteractionEnabled = NO; layer = <CALayer: 0x600000a3ab20>> - (null)\n   |    |    |    |    |    |    |    |    |    |    |    |    | <UIView: 0x7fa7f3d0b2e0; frame = (253.667 14; 0 16); clipsToBounds = YES; autoresize = RM+BM; layer = <CALayer: 0x600000c27580>>\n   |    |    |    |    |    |    |    |    |    |    |    |    |    | <UIView: 0x7fa7ee4d5240; frame = (0 0; 42 16); autoresize = RM+BM; layer = <CALayer: 0x600000c28ca0>>\n   |    |    |    |    |    |    |    |    |    |    |    |    |    |    | <UIImageView: 0x7fa7ee4c4700; frame = (4 0; 38 16); clipsToBounds = YES; autoresize = RM+BM; userInteractionEnabled = NO; layer = <CALayer: 0x600000c2b580>> - (null)\n   |    |    |    |    |    |    |    |    |    |    |    | <UIView: 0x7fa7f3d5b9b0; frame = (0 44; 375 90); autoresize = RM+BM; layer = <CALayer: 0x600000c205a0>>\n   |    |    |    |    |    |    |    |    |    |    |    |    | <UILabel: 0x7fa7f3d3f720; frame = (20 14; 51.3333 21.6667); text = '8.30%'; opaque = NO; autoresize = RM+BM; userInteractionEnabled = NO; layer = <_UILabelLayer: 0x60000089a0e0>>\n   |    |    |    |    |    |    |    |    |    |    |    |    | <UILabel: 0x7fa7ee676b10; frame = (20 57; 100 17); text = ''; opaque = NO; autoresize = RM+BM; userInteractionEnabled = NO; layer = <_UILabelLayer: 0x600000895d10>>\n   |    |    |    |    |    |    |    |    |    |    |    |    |    | <_UILabelContentLayer: 0x604000c22380> (layer)\n   |    |    |    |    |    |    |    |    |    |    |    |    | <UILabel: 0x7fa7ee6b3d60; frame = (178 14; 19 21.6667); text = '10'; opaque = NO; autoresize = RM+BM; userInteractionEnabled = NO; layer = <_UILabelLayer: 0x600000898a10>>\n   |    |    |    |    |    |    |    |    |    |    |    |    | <UILabel: 0x7fa7ee6b4040; frame = (146.667 57; 82 17); text = '()'; opaque = NO; autoresize = RM+BM; userInteractionEnabled = NO; layer = <_UILabelLayer: 0x6000008846a0>>\n   |    |    |    |    |    |    |    |    |    |    |    |    |    | <_UILabelContentLayer: 0x604000c2e6e0> (layer)\n   |    |    |    |    |    |    |    |    |    |    |    |    | <UILabel: 0x7fa7ee6b4320; frame = (299.667 14; 55.3333 21.6667); text = '412.00'; opaque = NO; autoresize = RM+BM; userInteractionEnabled = NO; layer = <_UILabelLayer: 0x600000890cc0>>\n   |    |    |    |    |    |    |    |    |    |    |    |    | <UILabel: 0x7fa7ee6b4600; frame = (273 57; 82 17); text = '()'; opaque = NO; autoresize = RM+BM; userInteractionEnabled = NO; layer = <_UILabelLayer: 0x6000008996e0>>\n   |    |    |    |    |    |    |    |    |    |    |    |    |    | <_UILabelContentLayer: 0x604000e259a0> (layer)\n   |    |    |    |    |    |    |    |    |    |    | <_UITableViewCellSeparatorView: 0x7fa7ee6aa420; frame = (15 133; 396 1); layer = <CALayer: 0x600000c2c8e0>>\n   |    |    |    |    |    |    |    |    |    | <MJRefreshAutoNormalFooter: 0x7fa7ee68f650; frame = (0 134; 375 44); autoresize = W; layer = <CALayer: 0x600000a3dbc0>>\n   |    |    |    |    |    |    |    |    |    |    | <UILabel: 0x7fa7ee6aa140; frame = (0 0; 375 44); text = 'No more data'; autoresize = W; gestureRecognizers = <NSArray: 0x60000085b270>; layer = <_UILabelLayer: 0x60000069e7d0>>\n   |    |    |    |    |    |    |    |    |    |    | <UIActivityIndicatorView: 0x7fa7ee679a40; frame = (107.222 12; 20 20); hidden = YES; layer = <CALayer: 0x600000c37140>>\n   |    |    |    |    |    |    |    |    |    |    |    | <UIImageView: 0x7fa7ee67ed00; frame = (0 0; 20 20); opaque = NO; userInteractionEnabled = NO; layer = <CALayer: 0x600000a3da20>> - (null)\n   |    |    |    |    |    |    |    |    |    | <CVGRefreshHeader: 0x7fa7ee630120; frame = (0 -84; 375 84); autoresize = W; layer = <CALayer: 0x600000a3ec20>>\n   |    |    |    |    |    |    |    |    |    |    | <UIImageView: 0x7fa7ee686990; frame = (178.5 45.6667; 18 18); opaque = NO; userInteractionEnabled = NO; layer = <CALayer: 0x600000c2b4a0>> - (null)\n   |    |    |    |    |    |    |    |    |    |    | <UILabel: 0x7fa7f3c344d0; frame = (0 20; 375 15.6667); text = ''; userInteractionEnabled = NO; layer = <_UILabelLayer: 0x604000e8b310>>\n   |    |    |    |    |    |    |    |    |    |    |    | <_UILabelContentLayer: 0x600000c32c80> (layer)\n   |    |    |    |    |    |    |    |    |    | <UIImageView: 0x7fa7f3d5b780; frame = (161.667 265.667; 52 52); hidden = YES; opaque = NO; userInteractionEnabled = NO; layer = <CALayer: 0x600000c205e0>> - (null)\n   |    |    |    |    |    |    |    |    |    | <UILabel: 0x7fa7ee6916a0; frame = (10 327.667; 355 20.3333); text = ''; hidden = YES; autoresize = W+H; userInteractionEnabled = NO; layer = <_UILabelLayer: 0x6000008804b0>>\n   |    |    |    |    |    |    |    |    |    |    | <_UILabelContentLayer: 0x604000c329e0> (layer)\n   |    |    |    |    |    |    |    |    |    | <UIImageView: 0x7fa7ee6544a0; frame = (161.667 265.667; 52 52); hidden = YES; opaque = NO; userInteractionEnabled = NO; layer = <CALayer: 0x600000c28de0>> - (null)\n   |    |    |    |    |    |    |    |    |    | <UILabel: 0x7fa7ee68f370; frame = (10 327.667; 355 20.3333); text = ''; hidden = YES; autoresize = W+H; userInteractionEnabled = NO; layer = <_UILabelLayer: 0x60000088fe60>>\n   |    |    |    |    |    |    |    |    |    |    | <_UILabelContentLayer: 0x604000c26d80> (layer)\n   |    |    |    |    |    |    |    |    |    | <UIImageView: 0x7fa7f3c867b0; frame = (31.6667 629.667; 311.333 2.33333); alpha = 0; opaque = NO; autoresize = TM; userInteractionEnabled = NO; layer = <CALayer: 0x604000c3f160>> - (null)\n   |    |    |    |    |    |    | <UIImageView: 0x7fa7f3c5a900; frame = (369.667 636; 2.33333 7); alpha = 0; opaque = NO; autoresize = LM; userInteractionEnabled = NO; layer = <CALayer: 0x604000e25580>> - (null)\n   |    | <UIToolbar: 0x7fa7ee424390; frame = (0 812; 375 44); hidden = YES; autoresize = W+TM; layer = <CALayer: 0x60000083b420>>\n   |    |    | <_UIBarBackground: 0x7fa7ee64e890; frame = (0 0; 375 78); userInteractionEnabled = NO; layer = <CALayer: 0x60000083b8a0>>\n   |    |    |    | <UIImageView: 0x7fa7ee656150; frame = (0 -0.333333; 375 0.333333); userInteractionEnabled = NO; layer = <CALayer: 0x600000836f20>> - (null)\n   |    |    |    | <UIVisualEffectView: 0x7fa7ee64bba0; frame = (0 0; 375 78); layer = <CALayer: 0x6040008357a0>>\n   |    |    |    |    | <_UIVisualEffectBackdropView: 0x7fa7ee596670; frame = (0 0; 375 78); autoresize = W+H; userInteractionEnabled = NO; layer = <UICABackdropLayer: 0x604000a22f40>>\n   |    |    |    |    | <_UIVisualEffectSubview: 0x7fa7ee5a3c20; frame = (0 0; 375 78); autoresize = W+H; userInteractionEnabled = NO; layer = <CALayer: 0x604000638ec0>>\n   |    |    | <_UIToolbarContentView: 0x7fa7ee50f240; frame = (0 0; 375 44); autoresize = W+H; layer = <CALayer: 0x6040008312e0>>\n   |    |    |    | <_UIButtonBarStackView: 0x7fa7ee59dd70; frame = (0 0; 375 44); layer = <CALayer: 0x604000824540>>\n   |    | <UINavigationBar: 0x7fa7ee71dad0; frame = (0 44; 375 44); opaque = NO; autoresize = W; layer = <CALayer: 0x60400063be00>>\n   |    |    | <_UIBarBackground: 0x7fa7ee54c550; frame = (0 -44; 375 88); userInteractionEnabled = NO; layer = <CALayer: 0x60400063bda0>>\n   |    |    |    | <UIImageView: 0x7fa7ee55c6f0; frame = (0 0; 375 88); opaque = NO; userInteractionEnabled = NO; layer = <CALayer: 0x60400063bc60>> - (null)\n   |    |    |    | <UIImageView: 0x7fa7ee533790; frame = (0 88; 375 1); opaque = NO; userInteractionEnabled = NO; layer = <CALayer: 0x60400063c620>> - (null)\n   |    |    | <_UINavigationBarLargeTitleView: 0x7fa7ee72aa00; frame = (0 0; 0 0); clipsToBounds = YES; alpha = 0; hidden = YES; layer = <CALayer: 0x6040002295c0>>\n   |    |    |    | <UILabel: 0x7fa7f3d67430; frame = (0 0; 0 0); userInteractionEnabled = NO; layer = <_UILabelLayer: 0x600000895d60>>\n   |    |    | <_UINavigationBarContentView: 0x7fa7ee54cc60; frame = (0 0; 375 44); clipsToBounds = YES; layer = <CALayer: 0x60400003ce00>>\n   |    |    |    | <_UIButtonBarStackView: 0x7fa7f3c37a30; frame = (16 0; 44 44); layer = <CALayer: 0x604000c363e0>>\n   |    |    |    |    | <_UITAMICAdaptorView: 0x7fa7f3c92ad0; frame = (0 0; 44 44); autoresizesSubviews = NO; layer = <CALayer: 0x604000e23440>>\n   |    |    |    |    |    | <UIButton: 0x7fa7ee4f7c40; frame = (0 0; 44 44); opaque = NO; layer = <CALayer: 0x600000a3f5e0>>\n   |    |    |    |    |    |    | <UIImageView: 0x7fa7f3c3a050; frame = (0 13.3333; 9.5 17); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = <CALayer: 0x604000c3c680>> - (null)\n   |    |    |    | <_UIButtonBarStackView: 0x7fa7f3d68520; frame = (329 0; 30 44); layer = <CALayer: 0x600000c370e0>>\n   |    |    |    |    | <_UITAMICAdaptorView: 0x7fa7f3c458c0; frame = (0 5; 30 34); autoresizesSubviews = NO; layer = <CALayer: 0x604000e29ec0>>\n   |    |    |    |    |    | <UIButton: 0x7fa7f3d10db0; frame = (0 0; 30 34); opaque = NO; layer = <CALayer: 0x600000a35be0>>\n   |    |    |    | <UILabel: 0x7fa7f3c40950; frame = (119.333 11; 136.667 21.6667); text = '-'; userInteractionEnabled = NO; layer = <_UILabelLayer: 0x604000c8c2b0>>\n   |    |    |    |    | <_UILabelContentLayer: 0x604000c23ca0> (layer)\n   |    |    | <_UINavigationBarModernPromptView: 0x7fa7ee627ef0; frame = (0 0; 0 0); alpha = 0; hidden = YES; layer = <CALayer: 0x6000008275c0>>\n   |    |    |    | <UILabel: 0x7fa7ee53ee50; frame = (0 25.3333; 0 0); text = ''; userInteractionEnabled = NO; layer = <_UILabelLayer: 0x604000a91e40>>\n   | <UIView: 0x7fa7ee549950; frame = (0 0; 375 812); alpha = 0; gestureRecognizers = <NSArray: 0x6040006569e0>; layer = <CALayer: 0x60400082ade0>>\n   | <UIView: 0x7fa7ee574390; frame = (0 812; 375 293); layer = <CALayer: 0x604000829ca0>>\n   |    | <UIButton: 0x7fa7ee5748e0; frame = (0 214; 375 45); opaque = NO; layer = <CALayer: 0x604000829160>>\n   |    |    | <UIButtonLabel: 0x7fa7ee5797a0; frame = (172.333 13.6667; 30.6667 18); text = ''; opaque = NO; userInteractionEnabled = NO; layer = <_UILabelLayer: 0x604000a9dd80>>\n   |    |    |    | <_UILabelContentLayer: 0x60000063db40> (layer)\n   |    | <UIView: 0x7fa7ee573200; frame = (0 214; 375 1); layer = <CALayer: 0x60400082a240>>\n   |    | <UIView: 0x7fa7ee57c470; frame = (33.75 20; 80 80); tag = 200; gestureRecognizers = <NSArray: 0x60000065a070>; layer = <CALayer: 0x60400082af20>>\n   |    |    | <UIImageView: 0x7fa7ee57c660; frame = (16.5 10; 47 47); opaque = NO; userInteractionEnabled = NO; layer = <CALayer: 0x60400082bd20>> - (null)\n   |    |    | <UILabel: 0x7fa7ee57c890; frame = (5 57; 70 30); text = ''; userInteractionEnabled = NO; layer = <_UILabelLayer: 0x604000a9df60>>\n   |    |    |    | <_UILabelContentLayer: 0x60000042aca0> (layer)\n   |    | <UIView: 0x7fa7ee635e70; frame = (147.5 20; 80 80); tag = 201; gestureRecognizers = <NSArray: 0x60000065a580>; layer = <CALayer: 0x60000082a480>>\n   |    |    | <UIImageView: 0x7fa7ee636060; frame = (16.5 10; 47 47); opaque = NO; userInteractionEnabled = NO; layer = <CALayer: 0x60000082a520>> - (null)\n   |    |    | <UILabel: 0x7fa7ee636290; frame = (5 57; 70 30); text = ''; userInteractionEnabled = NO; layer = <_UILabelLayer: 0x60000068c3a0>>\n   |    |    |    | <_UILabelContentLayer: 0x600000431de0> (layer)\n   |    | <UIView: 0x7fa7ee636710; frame = (261.25 20; 80 80); tag = 202; gestureRecognizers = <NSArray: 0x604000656170>; layer = <CALayer: 0x60000082a840>>\n   |    |    | <UIImageView: 0x7fa7ee636900; frame = (16.5 10; 47 47); opaque = NO; userInteractionEnabled = NO; layer = <CALayer: 0x60000082a8e0>> - (null)\n   |    |    | <UILabel: 0x7fa7ee637120; frame = (5 57; 70 30); text = 'QQ'; userInteractionEnabled = NO; layer = <_UILabelLayer: 0x60000068ce90>>\n   |    | <UIView: 0x7fa7ee57b960; frame = (33.75 110; 80 80); tag = 203; gestureRecognizers = <NSArray: 0x604000656500>; layer = <CALayer: 0x604000828f20>>\n   |    |    | <UIImageView: 0x7fa7ee57bb50; frame = (16.5 10; 47 47); opaque = NO; userInteractionEnabled = NO; layer = <CALayer: 0x60400082be80>> - (null)\n   |    |    | <UILabel: 0x7fa7ee54b470; frame = (5 57; 70 30); text = 'QQ'; userInteractionEnabled = NO; layer = <_UILabelLayer: 0x604000a9e2d0>>\n   |    |    |    | <_UILabelContentLayer: 0x600000429940> (layer)\n   |    | <UIView: 0x7fa7ee54b8f0; frame = (147.5 110; 80 80); tag = 204; gestureRecognizers = <NSArray: 0x604000656890>; layer = <CALayer: 0x60400082ab40>>\n   |    |    | <UIImageView: 0x7fa7ee54a2b0; frame = (16.5 10; 47 47); opaque = NO; userInteractionEnabled = NO; layer = <CALayer: 0x604000829f80>> - (null)\n   |    |    | <UILabel: 0x7fa7ee54a4e0; frame = (5 57; 70 30); text = ''; userInteractionEnabled = NO; layer = <_UILabelLayer: 0x604000a9e460>>\n   |    |    |    | <_UILabelContentLayer: 0x60000042ab00> (layer)\n   | <UIView: 0x7fa7ee5a7a60; frame = (147.5 692; 80 40); hidden = YES; layer = <CALayer: 0x604000826ce0>>\n   |    | <UILabel: 0x7fa7ee5a7f90; frame = (15 10; 355 20); text = 'fp'; userInteractionEnabled = NO; layer = <_UILabelLayer: 0x604000c863b0>>\n   |    |    | <_UILabelContentLayer: 0x600000428c60> (layer)\n(lldb) \n")),Object(o.b)("h3",{id:"\u754c\u9762bug"},"\u754c\u9762bug"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"\u6253\u5f00\u56fe\u5c42\u6811\uff08pviews\uff09")),Object(o.b)("p",null,Object(o.b)("img",{parentName:"p",src:"http://wiso.liwenhui520.com/20200827159851518213431.png",alt:"20200827159851518213431.png"})),Object(o.b)("ol",{start:2},Object(o.b)("li",{parentName:"ol"},"mask\u5c55\u793a\u786e\u5b9a\u95ee\u9898")),Object(o.b)("p",null,Object(o.b)("img",{parentName:"p",src:"http://wiso.liwenhui520.com/20200827159851515122499.png",alt:"20200827159851515122499.png"})),Object(o.b)("p",null,Object(o.b)("img",{parentName:"p",src:"http://wiso.liwenhui520.com/20200827159851511373001.png",alt:"20200827159851511373001.png"})),Object(o.b)("h1",{id:"\u6545\u4e8b"},"\u6545\u4e8b"),Object(o.b)("p",null,"Apple\uff08\u5305\u62ec\u4e2d\u540e\u671f\u7684NeXT\uff09 \u4e00\u76f4\u4f7f\u7528GCC\u4f5c\u4e3a\u5b98\u65b9\u7684\u7f16\u8bd1\u5668\u3002GCC\u4f5c\u4e3a\u5f00\u6e90\u4e16\u754c\u7684\u7f16\u8bd1\u5668\u6807\u51c6\u4e00\u76f4\u505a\u5f97\u4e0d\u9519\uff0c\u4f46Apple\u5bf9\u7f16\u8bd1\u5de5\u5177\u4f1a\u63d0\u51fa\u66f4\u9ad8\u7684\u8981\u6c42\u3002\u4e00\u65b9\u9762\uff0c\u662fApple\u5bf9Objective-C\u8bed\u8a00\uff08\u751a\u81f3\u540e\u6765\u5bf9C\u8bed\u8a00\uff09\u65b0\u589e\u5f88\u591a\u7279\u6027\uff0c\u4f46GCC\u5f00\u53d1\u8005\u5e76\u4e0d\u4e70Apple\u7684\u5e10\u2014\u2014\u4e0d\u7ed9\u5b9e\u73b0\uff0c\u56e0\u6b64\u7d22\u6027\u540e\u6765\u4e24\u8005\u5206\u6210\u4e24\u6761\u5206\u652f\u5206\u522b\u5f00\u53d1\uff0c\u8fd9\u4e5f\u9020\u6210Apple\u7684\u7f16\u8bd1\u5668\u7248\u672c\u8fdc\u843d\u540e\u4e8eGCC\u7684\u5b98\u65b9\u7248\u672c\u3002\u53e6\u4e00\u65b9\u9762\uff0cGCC\u7684\u4ee3\u7801\u8026\u5408\u5ea6\u592a\u9ad8\uff0c\u4e0d\u597d\u72ec\u7acb\uff0c\u800c\u4e14\u8d8a\u662f\u540e\u671f\u7684\u7248\u672c\uff0c\u4ee3\u7801\u8d28\u91cf\u8d8a\u5dee\u3002"),Object(o.b)("p",null,"\u4f46Apple\u60f3\u505a\u7684\u5f88\u591a\u529f\u80fd\uff08\u6bd4\u5982\u66f4\u597d\u7684IDE\u652f\u6301\uff09\u9700\u8981\u6a21\u5757\u5316\u7684\u65b9\u5f0f\u6765\u8c03\u7528GCC\uff0c\u4f46GCC\u4e00\u76f4\u4e0d\u7ed9\u505a\u3002 \u6240\u4ee5\uff0c\u8fd9\u79cd\u4e0d\u548c\u8ba9Apple\u4e00\u76f4\u5728\u5bfb\u627e\u4e00\u4e2a\u9ad8\u6548\u7684\u3001\u6a21\u5757\u5316\u7684\u3001\u534f\u8bae\u66f4\u653e\u677e\u7684\u5f00\u6e90\u66ff\u4ee3\u54c1\u3002\nLLVM "),Object(o.b)("p",null,"Chris Lattner\u7684LLVM\u663e\u7136\u662f\u4e00\u4e2a\u5f88\u68d2\u7684\u9009\u62e9\u3002\u968f\u7740 Mac OS X 10.6 Snow Leopard \u767b\u4e0a\u821e\u53f0\uff0cLLVM\u663e\u9732\u51fa\u4e86\u771f\u8eab\u3002\u53ef\u4ee5\u8bf4\uff0c Snow Leopard\u7684\u65b0\u529f\u80fd\uff0c\u5b8c\u5168\u5f97\u76ca\u4e8eLLVM\u7684\u6280\u672f\u3002\u800c\u8fd9\u4e9b\u9700\u6c42\u5f97\u4ee5\u5b9e\u73b0\uff0c\u5f52\u529f\u4e8eLLVM\u81ea\u8eab\u7684\u65b0\u524d\u7aef\u2014\u2014Clang\u3002\u800c\u8fd9\u4e00\u4e2a\u7248\u672c\uff0c\u4e5f\u662f\u5c06LLVM\u63a8\u5411\u771f\u6b63\u6210\u719f\u7684\u91cd\u5927\u673a\u9047\u3002"),Object(o.b)("p",null,"Clang"),Object(o.b)("p",null,"GCC\u7cfb\u7edf\u5e9e\u5927\u800c\u7b28\u91cd\uff0c\u800cApple\u5927\u91cf\u4f7f\u7528\u7684Objective-C\u5728GCC\u4e2d\u4f18\u5148\u7ea7\u5f88\u4f4e\u3002\u6b64\u5916GCC\u4f5c\u4e3a\u4e00\u4e2a\u7eaf\u7cb9\u7684\u7f16\u8bd1\u7cfb\u7edf\uff0c\u4e0eIDE\u914d\u5408\u5f97\u5f88\u5dee\u3002\u751a\u81f3\u6700\u8fd1\uff0c\u300aGCC\u8fd0\u884c\u73af\u5883\u8c41\u514d\u6761\u6b3e \uff08\u82f1\u6587\u7248\uff09\u300b\u4ece\u6839\u672c\u4e0a\u9650\u5236\u4e86LLVM-GCC\u7684\u5f00\u53d1\u3002\u52a0\u4e4b\u8bb8\u53ef\u8bc1\u65b9\u9762\u7684\u8981\u6c42\uff0cApple\u65e0\u6cd5\u4f7f\u7528LLVM \u7ee7\u7eed\u6539\u8fdbGCC\u7684\u4ee3\u7801\u8d28\u91cf\u3002\u4e8e\u662f\uff0cApple\u51b3\u5b9a\u4ece\u96f6\u5f00\u59cb\u5199 C\u3001C++\u3001Objective-C\u8bed\u8a00\u7684\u524d\u7aef Clang\uff0c\u5b8c\u5168\u66ff\u4ee3\u6389GCC\u3002"),Object(o.b)("p",null,"\u7531\u4e8e\u53d7\u5230Clang\u9879\u76ee\u7684\u5a01\u80c1\uff0cGCC\u4e5f\u4e0d\u5f97\u4e0d\u8f6f\u4e0b\u6765\uff0c\u8ba9\u81ea\u5df1\u53d8\u5f97\u7a0d\u5fae\u6a21\u5757\u5316\u4e00\u4e9b\uff0c\u63a8\u51fa\u63d2\u4ef6\u7684\u652f\u6301\uff0c\u800cLLVM\u9879\u76ee\u5219\u987a\u6c34\u63a8\u821f\uff0c\u7d22\u6027\u5e9f\u6389\u4e86\u51fa\u9053\u65f6\u5c31\u4e00\u76f4\u4f5c\u4e3a\u770b\u5bb6\u672c\u9886\u7684LLVM-GCC\uff0c\u6539\u4e3a\u4e00\u4e2aGCC\u7684\u63d2\u4ef6DragonEgg\u3002 Apple\u4e5f\u4e8eXcode 4.2\u5f7b\u5e95\u629b\u5f03\u4e86GCC\u5de5\u5177\u94fe\u3002"),Object(o.b)("p",null,"\u9664LLVM\u6838\u5fc3\u548cClang\u4ee5\u5916\uff0cLLVM\u8fd8\u5305\u62ec\u4e00\u4e9b\u91cd\u8981\u7684\u5b50\u9879\u76ee\uff0c\u6bd4\u5982\u4e00\u4e2a\u539f\u751f\u652f\u6301\u8c03\u8bd5\u591a\u7ebf\u7a0b\u7a0b\u5e8f\u7684\u8c03\u8bd5\u5668LLDB\uff0c\u548c\u4e00\u4e2aC++\u7684\u6807\u51c6\u5e93libc++\uff0c\u8fd9\u4e9b\u9879\u76ee\u7531\u4e8e\u662f\u4ece\u96f6\u91cd\u5199\u7684\uff0c\u56e0\u6b64\u8981\u6bd4\u5148\u524d\u7684\u5f88\u591a\u9879\u76ee\u7ad9\u5f97\u66f4\u9ad8\uff0c\u6bd4\u5982\u5148\u524dGNU\u3001Apache\u3001STLport\u7b49C++\u6807\u51c6\u5e93\u5728\u8bbe\u8ba1\u65f6\uff0cC++0x\u6807\u51c6\u8fd8\u672a\u516c\u5e03\uff0c\u6240\u4ee5\u5927\u591a\u4e0d\u652f\u6301\u8fd9\u4e9b\u65b0\u6807\u51c6\u6216\u8005\u9700\u8981\u901a\u8fc7\u4e00\u4e9b\u7e41\u6742\u7684\u6539\u52a8\u624d\u80fd\u652f\u6301\uff0c\u800clibc++\u5219\u539f\u751f\u652f\u6301C++0x\u3002"),Object(o.b)("p",null,"\u800c\u4e14\u5728\u73b0\u4ee3\u67b6\u6784\u4e0a\uff0c\u8fd9\u4e9b\u9879\u76ee\u80fd\u52a8\u7528\u591a\u6838\u628a\u4e8b\u60c5\u5904\u7406\u5f97\u66f4\u597d\u3002"),Object(o.b)("p",null,"FreeBSD\nLLVM\u7684\u6210\u719f\u4e5f\u7ed9\u5176\u4ed6\u75db\u6068GCC\u7684\u5f00\u53d1\u9879\u76ee\u51fa\u4e86\u4e00\u53e3\u6076\u6c14\u3002\u5176\u4e2d\u6700\u91cd\u8981\u7684\uff0c\u6050\u6015\u662f\u4ee5FreeBSD\u4e3a\u4ee3\u8868\u7684BSD\u793e\u533a\u3002BSD\u793e\u533a\u548cApple\u7684\u8054\u7cfb\u4e00\u5411\u5f88\u7d27\u5bc6\uff0c\u800c\u4e14\u7531\u4e8e\u4ee3\u7801\u76f8\u4f3c\uff0c\u5f88\u591aApple\u7684\u6280\u672f\u5982Grand Central Dispatch\u4e5f\u662f\u6700\u65e9\u79fb\u690d\u5230FreeBSD\u4e0a\u3002BSD\u793e\u533a\u5f88\u65e9\u5c31\u5728\u627eGCC\u7684\u66ff\u4ee3\u54c1\uff0c\u65e0\u5948\u5927\u591a\u90fd\u5f88\u5dee\uff08\u5982Portable C Compiler\u4ea7\u751f\u7684\u4ee3\u7801\u8d28\u91cf\u548cgcc\u4e0d\u80fd\u540c\u65e5\u800c\u8bed\uff09\u3002"),Object(o.b)("p",null,"BSD\u5f00\u53d1\u8005\u6709\u6d01\u7656\u7684\u5c45\u591a\uff0c\u5927\u591a\u90fd\u4e0d\u559c\u6b22GPL\u4ee3\u7801\uff0c\u5c24\u5176\u662fGPL\u534f\u8bae\u7b2c\u4e09\u7248\u53d1\u5e03\u65f6\uff0c\u548cFreeBSD\u7684\u534f\u8bae\u751a\u81f3\u662f\u51b2\u7a81\u7684\u3002\u8fd9\u4e5f\u6b63\u662f\u4e3a\u4ec0\u4e48FreeBSD\u4e2d\u5305\u542b\u7684GNU\u7684C++\u8fd0\u884c\u5e93\u8fd8\u662f2007\u5e74\u4ee5GPLv2\u53d1\u5e03\u7684\u8001\u7248\u672c\uff0c\u800c\u4e0d\u662f\u652f\u6301C++0x\u7684\u4f46\u4f9dGPLv3\u534f\u8bae\u53d1\u5e03\u7684\u65b0\u7248\u672c\u3002"),Object(o.b)("p",null," \u56e0\u6b64\u5386\u65f6\u4e24\u5e74\u7684\u5f00\u53d1\u540e\uff0c2012\u5e74\u521d\u53d1\u5e03\u7684FreeBSD 9.0\u4e2d\uff0cClang\u88ab\u52a0\u5165\u5230FreeBSD\u7684\u57fa\u7840\u7cfb\u7edf\u3002 \u4f46\u8fd9\u53ea\u662f\u7b2c\u4e00\u6b65\uff0c\u56e0\u4e3aFreeBSD\u4e2d\u4f9d\u7136\u4f7f\u7528GNU\u7684C++ STL \u5e93\u3001C++\u8fd0\u884c\u5e93\u3001GDB\u8c03\u8bd5\u5668\u3001libgcc/libgcc_s\u7f16\u8bd1\u5e93\u90fd\u662f\u548c\u7f16\u8bd1\u76f8\u5173\u7684\u91cd\u8981\u5e95\u5c42\u6280\u672f\uff0c\u5148\u524d\u5168\u88abGNU\u5784\u65ad\uff0c\u800c\u73b0\u5728LLVM\u5b50\u9879\u76eelldb\u3001libc++\u3001compiler-rt\u7b49\u9879\u76ee\u7684\u51fa\u73b0\uff0c\u4f7fBSD\u793e\u533a\u6709\u673a\u4f1a\u5411GNU\u8bf4\u201c\u4e0d\u201d\uff0c\u56e0\u6b64\u4e00\u4e2a\u628aGNU\u7ec4\u4ef6\u79fb\u51faFreeBSD\u7684\u8ba1\u5212\u88ab\u6784\u60f3\u51fa\u6765\uff0c\u5e76\u5b8c\u6210\u4e86\u5f88\u5927\u4e00\u90e8\u5206\u3002 \u9884\u8ba1\u5728FreeBSD 10\u53d1\u5e03\u65f6\uff0c\u5c06\u4e0d\u518d\u5305\u542bGNU\u4ee3\u7801\u3002"),Object(o.b)("h3",{id:"\u754c\u9762\u5f02\u5e38"},"\u754c\u9762\u5f02\u5e38"),Object(o.b)("h2",{id:"gun-\u548c-llvm"},"GUN \u548c LLVM"),Object(o.b)("p",null,Object(o.b)("a",{parentName:"p",href:"https://www.gnu.org/"},"https://www.gnu.org/")),Object(o.b)("p",null,Object(o.b)("a",{parentName:"p",href:"https://llvm.org/"},"https://llvm.org/")),Object(o.b)("h3",{id:"gun"},"GUN"),Object(o.b)("p",null,Object(o.b)("a",{parentName:"p",href:"https://www.gnu.org/software/software.html"},"https://www.gnu.org/software/software.html")," GUN\u5173\u952e\u5305 \u5f88\u591a\u5f88\u591a"),Object(o.b)("p",null,"\u5305\u542b\u4e86 \u5e38\u89c1\u7684 gcc gdb\u7b49"),Object(o.b)("p",null,"clang"),Object(o.b)("p",null,Object(o.b)("a",{parentName:"p",href:"https://clang.llvm.org/docs/UsersManual.html#basic-usage"},"https://clang.llvm.org/docs/UsersManual.html#basic-usage")),Object(o.b)("h3",{id:"llvm"},"LLVM"),Object(o.b)("p",null,Object(o.b)("img",{alt:"image-20210201101118977",src:t(914).default})),Object(o.b)("h2",{id:"xcode-44\u4e2dllvm-compiler-40\u5e26\u6765\u7684objective-c\u65b0\u8bed\u6cd5\u7279\u6027"},"Xcode 4.4\u4e2dLLVM compiler 4.0\u5e26\u6765\u7684Objective-C\u65b0\u8bed\u6cd5\u7279\u6027"),Object(o.b)("p",null,"FreeBSD\u7528Clang\u53d6\u4ee3\u4e86GCC\uff0c\u5728\u8fc7\u53bb\u7684\u51e0\u5e74\u91cc\uff0c\u6211\u4eec\u4e00\u76f4\u81f4\u529b\u4e8e\u7528Clang\u53d6\u4ee3GCC\uff0c\u6210\u4e3a\u9ed8\u8ba4\u7f16\u8bd1\u5668\u3002\u5e76\u6253\u7b97\u5728i386\u548camd64\u5e73\u53f0\u4e0a\uff0c\u628aClang\u4f5c\u4e3aFreeBSD 10.0\u7684\u9ed8\u8ba4\u7f16\u8bd1\u5668\u3002\u4e3a\u6b64\uff0c\u5c06\u572810\u67084\u65e5\u4e3ai386\u548camd64\u5e73\u53f0\u4e0a\u7684\u201dWITH_CLANG_IS_CC\u201c\u8bbe\u7f6e\u9ed8\u8ba4\u503c\u3002"),Object(o.b)("p",null,"\u4eca\u5e74WWDC 2012\u82f9\u679c\u5168\u7403\u5f00\u53d1\u8005\u5927\u4f1a\u4e0a\uff0c\u82f9\u679c\u9488\u5bf9LLVM\u7f16\u8bd1\u5668\u90fd\u505a\u4e86\u91cd\u5927\u6539\u8fdb\uff0c\u65b0\u7248\u7684Xcode 4.4\u4e2d\u7684LLVM\u7f16\u8bd1\u5668\u5347\u7ea7\u5230\u4e864.0\uff0c\u7ed9Objective-C\u5e26\u6765\u4e86\u5f88\u591a\u4ee4\u4eba\u60ca\u559c\u7684\u7279\u6027\u3002"),Object(o.b)("p",null,"1\u3001\u679a\u4e3e\u7c7b\u578b\u7684\u6539\u53d8"),Object(o.b)("p",null,"\u8001\u5199\u6cd5\uff1a"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"typedef enum Week{  \n    Moday,  \n    Tuesday,  \n    Wednesday,  \n    Thursday,  \n    Friday,  \n    Saturday,  \n    Sunday      \n}Week;  \n")),Object(o.b)("p",null,"\u65b0\u5199\u6cd5\uff1a"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"typedef enum Week:NSUInteger{  \n    Moday,  \n    Tuesday,  \n    Wednesday,  \n    Thursday,  \n    Friday,  \n    Saturday,  \n    Sunday      \n}Week;  \n")),Object(o.b)("p",null,"2\u3001\u4f7f\u7528\u7684\u65b9\u6cd5\u4ee3\u7801\u653e\u7f6e\u7684\u4f4d\u7f6e\u987a\u5e8f\u65e0\u5173\n\u6ca1\u5728.h\u6587\u4ef6\u4e2d\u58f0\u660e\u7684\u65b9\u6cd5\uff0c\u6709\u7684\u65f6\u5019\u5982\u679c\u65b9\u6cd5\u4e0d\u5728\u524d\u9762\uff0c\u53ef\u80fd\u4f1a\u6709\u8b66\u544a\u3002"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"@interface MyClass : NSObject  \n-(void)doSomething:(NSString *) print;  \n@end  \n")),Object(o.b)("p",null,"\u5b9e\u73b0\uff1a"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'@implementation MyClass  \n-(void)doSomething:(NSString *)print{  \n    NSLog(@"%@", [print stringByAppendingFormat:[self getString]]);  \n}  \n-(NSString *)getString{  \n    return@"string for something";  \n}  \n')),Object(o.b)("p",null,"@end  "),Object(o.b)("p",null,"\u65e9\u671f\u7f16\u8bd1\u5668\u7f16\u8bd1\u65f6\u4f1a\u51fa\u73b0\uff1a",Object(o.b)("inlineCode",{parentName:"p"},"warning: instance method \u2018-getString:\u2019 not found\u2026"),"\n\u65b0\u7684\u7f16\u8bd1\u5668\u4f1a\u5148\u626b\u63cf\u4ee3\u7801\u4e2d\u7684\u65b9\u6cd5\uff0c\u7136\u540e\u518d\u7f16\u8bd1\uff0c\u8fd9\u6837\u5c31\u907f\u514d\u4e86\u627e\u4e0d\u5230\u65b9\u6cd5\u8fd9\u79cd\u60c5\u51b5\u4e86"),Object(o.b)("p",null,"3\u3001property\u5c5e\u6027\u7b80\u5316"),Object(o.b)("p",null,"@property\u5bf9\u4e8e\u4f7f\u7528Objective-C\u7684\u7a0b\u5e8f\u5458\u6765\u8bf4\u662f\u76f8\u5f53\u719f\u6089\u7684\uff0cproperty\u65b9\u4fbf\u81ea\u52a8\u751f\u6210\u53d8\u91cf\u7684getter \u548csetter\u3002\u5728.h\u6587\u4ef6\u4e2d\u58f0\u660e\u4e4b\u540e\uff0c\u8fd8\u8981\u5728.m\u6587\u4ef6\u4e2d\u52a0\u4e0a@synthesize\u5173\u952e\u5b57\uff0c\u8fd9\u6837\u624d\u80fd\u5b8c\u6210\u81ea\u52a8getter \u548csetter\u7684\u8fc7\u7a0b\u3002"),Object(o.b)("p",null,"\u6bd4\u5982\u8bf4\uff0c\u6211\u5728.h\u6587\u4ef6\u4e2d\u5199\u4e86"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"@property (strong, nonatomic) NSDictionary *order;"),"\n\u6211\u8fd8\u8981\u53bb\u5bf9\u4e8e\u7684.m\u6587\u4ef6\u4e2d\u5199\u4e0a\n",Object(o.b)("inlineCode",{parentName:"p"},"@synthesize order;"),"\n\u662f\u4e0d\u662f\u611f\u89c9\u5f88\u591a\u4f59\u554a\uff1f\u73b0\u5728\u5728\u8bed\u6cd5\u65b0\u7279\u6027\u4e2d\u4e0d\u7528\u5199\u8fd9\u884c\u4ee3\u7801\u4e86\uff0c\u65b0\u7248\u7684\u7f16\u8bd1\u5668\u5e2e\u4f60\u5b9e\u73b0\u8fd9\u884c\u4ee3\u7801\uff0c\u8fd9\u53eb\u5e2e\u4eba\u5e2e\u5230\u5e95\u3002\n\u4e5f\u662f\u8bf4\uff0c\u4f60\u5728.h\u6587\u4ef6\u4e2d\u58f0\u660eorder\u5c5e\u6027\u540e\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u5728\u5b9e\u73b0\u6587\u4ef6\u4e2d\u4f7f\u7528\u8be5\u5c5e\u6027\u7684getter\u548csetter\u65b9\u6cd5,\u7f16\u8bd1\u5668\u8fd8\u4f1a\u6839\u636e\u5c5e\u6027"),Object(o.b)("p",null,"\u7684\u53ef\u8bfb\u548c\u53ef\u5199\u81ea\u52a8\u5224\u65ad\u662f\u5426\u63d0\u4f9bsetter\u65b9\u6cd5\u3002\u667a\u80fd\u591a\u4e86\u3002"),Object(o.b)("p",null,"4\u3001\u8bed\u6cd5\u7684\u7b80\u5316\n\u505a\u8fc7java \u6216C#\u5f00\u53d1\u7684\u90fd\u77e5\u9053\uff0c\u521d\u59cb\u5316\u6216\u8d4b\u503c\u4e00\u4e2a\u53d8\u91cf\u4e00\u822c\u7528\u4e00\u4e2a\u201c=\u201d\u53f7\u5c31\u641e\u5b9a\u4e86\uff0c\u5230\u4e86Objective-C\u540e\uff0c\u6bcf\u6b21\u90fd\u8981\u7528\u4e00\u4e2a\u5f88\u957f\u7684\u51fd\u6570\u624d\u80fd\u8d4b\u503c\u6d3b\u521d\u59cb\u5316\u3002\u73b0\u5728\u7b80\u5316\u591a\u4e86\u3002"),Object(o.b)("p",null,"\u54b1\u4eec\u770b\u770b\u5404\u4e2a\u6570\u636e\u7c7b\u578b\u7b80\u5316\u524d\u540e\u7684\u5bf9\u6bd4\u3002"),Object(o.b)("p",null,"4.1\u3001NSNumber \u7c7b\u578b\n\u8001\u5199\u6cd5\uff1a"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"NSNumber *number;  \nnumber = [NSNumber numberWithChar:'X'];  \nnumber = [NSNumber numberWithInt:12345];  \nnumber = [NSNumber numberWithUnsignedLong:12345ul];  \nnumber = [NSNumber numberWithLongLong:12345ll];  \nnumber = [NSNumber numberWithFloat:123.45f];  \nnumber = [NSNumber numberWithDouble:123.45];  \nnumber = [NSNumber numberWithBool:YES]; \n")),Object(o.b)("p",null,"\u65b0\u5199\u6cd5\uff1a"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"NSNumber *number;  \nnumber = @'X';  \nnumber = @12345;  \nnumber = @12345ul;  \nnumber = @12345ll;  \nnumber = @123.45f;  \nnumber = @123.45;  \nnumber = @YES;  \n")),Object(o.b)("p",null,"4.2\u3001NSArray\u7c7b\u578b\n\u8001\u5199\u6cd5\uff1a"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'NSArray *array;  \narray = [NSArray arrayWithObjects:@"object1", @"object2", @"object3", nil];  \n')),Object(o.b)("p",null,"\u65b0\u5199\u6cd5\uff1a"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'NSArray *array = @[ @"object1", @"object2", @"object3" ];  \n')),Object(o.b)("p",null,"\u65b0\u7684\u5199\u6cd5\u53bb\u6389\u4e86\u540e\u9762\u8ba8\u538c\u7684nil\u3002"),Object(o.b)("p",null,"4.3\u3001NSDictionary\u7c7b\u578b\n\u8001\u5199\u6cd5"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'NSDictionary *dict = [NSDictionary dictionaryWithObjects:@[@"value1", @"value2", @"value3"] forKeys:@[@"key1", @"key2", @"key3"]];  \n')),Object(o.b)("p",null,"\u65b0\u5199\u6cd5"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'NSDictionary *dict = @{@"key1": @"value1",@"key2": @"value2",@"key3": @"value3" };  \nNSLog(@"%@", dict);  \n')),Object(o.b)("p",null,"\u8fd0\u884c\u7ed3\u679c\u6b63\u5e38\uff1a"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{\n    key1 = value1;\n    key2 = value2;\n    key3 = value3;\n}\n")),Object(o.b)("p",null,"5\u3001\u5feb\u901f\u901a\u8fc7\u4e0b\u6807\u5b9a\u4f4d\u5bf9\u8c61"),Object(o.b)("p",null,"\u4ed6\u4eec\u8bf4\u65b0\u7684\u8bed\u6cd5\u8fd9\u6837\u662f\u53ef\u4ee5\u7684\uff0c\u6570\u7ec4\u548c\u5b57\u5178\u90fd\u53ef\u4ee5\u901a\u8fc7\u4e0b\u6807\u8bbf\u95ee\uff0c"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'NSArray *array =@[ @"object1", @"object2", @"object3" ];  \n\nid obj = array[0]; //\u901a\u8fc7\u4e0b\u6807\u65b9\u5f0f\u83b7\u53d6\u6570\u7ec4\u5bf9\u8c61\uff0c\u66ff\u6362\u539f\u6709\u5199\u6cd5\uff1aarray objectAtIndex:i];  \nNSString *obj1  = @"oooo";  \narray[0]  = obj1; //\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4e3a\u6570\u7ec4\u5bf9\u8c61\u8d4b\u503c\u3002\u66ff\u6362\u539f\u6709\u5199\u6cd5\uff1a[array replaceObjectAtIndex:i withObject:newObj];  \n\nNSDictionary *dict = @{@"key1": @"value1",@"key2": @"value2",@"key3": @"value3" };  \nid obj2 = dict[@"key1"];//\u83b7\u53d6o2\u5bf9\u8c61\uff0c\u66ff\u6362\u539f\u6709\u5199\u6cd5\uff1a[dic objectForKey:k2];  \ndict[@"key2"] = obj;  //\u91cd\u65b0\u4e3a\u952e\u4e3ak2\u7684\u5bf9\u8c61\u8d4b\u503c\uff0c\u66ff\u6362\u539f\u6709\u5199\u6cd5\uff1a[dic setObject:newObj forKey:k2\n')),Object(o.b)("h2",{id:"\u8c03\u8bd5helloworld"},"\u8c03\u8bd5HelloWorld"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"\u279c  base01 git:(master) \u2717 lldb -f a.out\n(lldb) target create \"a.out\"\nCurrent executable set to '/Users/dingyusong/mine/gitee/clab/assembly/base01/a.out' (x86_64).\n(lldb) b main\nBreakpoint 1: where = a.out`main, address = 0x0000000100003f20\n(lldb) r\nProcess 42391 launched: '/Users/dingyusong/mine/gitee/clab/assembly/base01/a.out' (x86_64)\nProcess 42391 stopped\n* thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1\n    frame #0: 0x0000000100003f20 a.out`main\na.out`main:\n->  0x100003f20 <+0>: pushq  %rbp\n    0x100003f21 <+1>: movq   %rsp, %rbp\n    0x100003f24 <+4>: subq   $0x20, %rsp\n    0x100003f28 <+8>: movl   %edi, -0x4(%rbp)\nTarget 0: (a.out) stopped.\n(lldb) si\nProcess 42391 stopped\n* thread #1, queue = 'com.apple.main-thread', stop reason = instruction step into\n    frame #0: 0x0000000100003f21 a.out`main + 1\na.out`main:\n->  0x100003f21 <+1>:  movq   %rsp, %rbp\n    0x100003f24 <+4>:  subq   $0x20, %rsp\n    0x100003f28 <+8>:  movl   %edi, -0x4(%rbp)\n    0x100003f2b <+11>: movq   %rsi, -0x10(%rbp)\nTarget 0: (a.out) stopped.\n(lldb) \nProcess 42391 stopped\n* thread #1, queue = 'com.apple.main-thread', stop reason = instruction step into\n    frame #0: 0x0000000100003f24 a.out`main + 4\na.out`main:\n->  0x100003f24 <+4>:  subq   $0x20, %rsp\n    0x100003f28 <+8>:  movl   %edi, -0x4(%rbp)\n    0x100003f2b <+11>: movq   %rsi, -0x10(%rbp)\n    0x100003f2f <+15>: movl   $0x8, -0x14(%rbp)\n")),Object(o.b)("p",null,"\u53c2\u8003\uff1a ",Object(o.b)("a",{parentName:"p",href:"https://jameshfisher.com/2017/09/25/lldb-hello-world/"},"https://jameshfisher.com/2017/09/25/lldb-hello-world/")),Object(o.b)("h2",{id:"\u8c03\u8bd5\u6700\u7b80\u5355\u7684\u7a0b\u5e8f"},"\u8c03\u8bd5\u6700\u7b80\u5355\u7684\u7a0b\u5e8f"),Object(o.b)("p",null,"clang \u7f16\u8bd1\u7684\u65f6\u5019\u9700\u8981\u5e26 ",Object(o.b)("inlineCode",{parentName:"p"},"-g"),"\u53c2\u6570\uff0c\u7f16\u8bd1\u5b8c\u6210\u4f1a\u591a\u4e00\u4e2a ",Object(o.b)("inlineCode",{parentName:"p"},"helloworld.dSYM")," \u6587\u4ef6\u5939\u3002"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"\u279c  03-clang git:(master) \u2717 clang -g -o helloworld helloworld.c\n\u279c  03-clang git:(master) \u2717 ll\ntotal 112\n-rwxr-xr-x  1 dingyusong  staff    49K 10  6 20:14 helloworld\n-rw-r--r--  1 dingyusong  staff    94B 10  6 20:13 helloworld.c\ndrwxr-xr-x  3 dingyusong  staff    96B 10  6 20:14 helloworld.dSYM\n\u279c  03-clang git:(master) \u2717 lldb helloworld\n(lldb) target create \"helloworld\"\nCurrent executable set to '/Users/dingyusong/mine/gitee/clab/compile-as-ld/03-clang/helloworld' (x86_64).\n(lldb) b main\nBreakpoint 1: where = helloworld`main + 22 at helloworld.c:5:2, address = 0x0000000100003f66\n(lldb) r\nProcess 11941 launched: '/Users/dingyusong/mine/gitee/clab/compile-as-ld/03-clang/helloworld' (x86_64)\nProcess 11941 stopped\n* thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1\n    frame #0: 0x0000000100003f66 helloworld`main(argc=1, argv=0x00007ffeefbfeeb8) at helloworld.c:5:2\n   2\n   3    int main(int argc, char *argv[]) {\n   4\n-> 5        printf(\"hello world\");\n   6\n   7        return 0;\n   8    }\nTarget 0: (helloworld) stopped.\n(lldb) n\nProcess 11941 stopped\n* thread #1, queue = 'com.apple.main-thread', stop reason = step over\n    frame #0: 0x0000000100003f76 helloworld`main(argc=1, argv=0x00007ffeefbfeeb8) at helloworld.c:7:2\n   4\n   5        printf(\"hello world\");\n   6\n-> 7        return 0;\n   8    }\nTarget 0: (helloworld) stopped.\n(lldb) c\nProcess 11941 resuming\nhello worldProcess 11941 exited with status = 0 (0x00000000)\n(lldb) exit\n")),Object(o.b)("p",null,"mac\u4e0b\u7684helloworld.dSYM\u8c03\u8bd5\u4fe1\u606f\uff0clldb\u9700\u8981\u7528\u5b83\u5b9a\u4f4d\u4ee3\u7801\u3002"),Object(o.b)("p",null,Object(o.b)("img",{alt:"image-20211006202005078",src:t(915).default})),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'\u279c  DWARF git:(master) \u2717 pwd\n/Users/dingyusong/mine/gitee/clab/compile-as-ld/03-clang/helloworld.dSYM/Contents/Resources/DWARF\n\u279c  DWARF git:(master) \u2717 vi helloworld\n\u279c  DWARF git:(master) \u2717 dwarfdump helloworld\nhelloworld: file format Mach-O 64-bit x86-64\n\n.debug_info contents:\n0x00000000: Compile Unit: length = 0x0000007d, format = DWARF32, version = 0x0004, abbr_offset = 0x0000, addr_size = 0x08 (next unit at 0x00000081)\n\n0x0000000b: DW_TAG_compile_unit\n              DW_AT_producer    ("Apple clang version 13.0.0 (clang-1300.0.29.3)")\n              DW_AT_language    (DW_LANG_C99)\n              DW_AT_name    ("helloworld.c")\n              DW_AT_LLVM_sysroot    ("/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk")\n              DW_AT_APPLE_sdk   ("MacOSX.sdk")\n              DW_AT_stmt_list   (0x00000000)\n              DW_AT_comp_dir    ("/Users/dingyusong/mine/gitee/clab/compile-as-ld/03-clang")\n              DW_AT_low_pc  (0x0000000100003f50)\n              DW_AT_high_pc (0x0000000100003f7c)\n\n0x00000032:   DW_TAG_subprogram\n                DW_AT_low_pc    (0x0000000100003f50)\n                DW_AT_high_pc   (0x0000000100003f7c)\n                DW_AT_frame_base    (DW_OP_reg6 RBP)\n                DW_AT_name  ("main")\n                DW_AT_decl_file ("/Users/dingyusong/mine/gitee/clab/compile-as-ld/03-clang/helloworld.c")\n                DW_AT_decl_line (3)\n                DW_AT_prototyped    (true)\n                DW_AT_type  (0x00000068 "int")\n                DW_AT_external  (true)\n\n0x0000004b:     DW_TAG_formal_parameter\n                  DW_AT_location    (DW_OP_fbreg -8)\n                  DW_AT_name    ("argc")\n                  DW_AT_decl_file   ("/Users/dingyusong/mine/gitee/clab/compile-as-ld/03-clang/helloworld.c")\n                  DW_AT_decl_line   (3)\n                  DW_AT_type    (0x00000068 "int")\n\n0x00000059:     DW_TAG_formal_parameter\n                  DW_AT_location    (DW_OP_fbreg -16)\n                  DW_AT_name    ("argv")\n                  DW_AT_decl_file   ("/Users/dingyusong/mine/gitee/clab/compile-as-ld/03-clang/helloworld.c")\n                  DW_AT_decl_line   (3)\n                  DW_AT_type    (0x0000006f "char**")\n\n0x00000067:     NULL\n\n0x00000068:   DW_TAG_base_type\n                DW_AT_name  ("int")\n                DW_AT_encoding  (DW_ATE_signed)\n                DW_AT_byte_size (0x04)\n\n0x0000006f:   DW_TAG_pointer_type\n                DW_AT_type  (0x00000074 "char*")\n\n0x00000074:   DW_TAG_pointer_type\n                DW_AT_type  (0x00000079 "char")\n\n0x00000079:   DW_TAG_base_type\n                DW_AT_name  ("char")\n                DW_AT_encoding  (DW_ATE_signed_char)\n                DW_AT_byte_size (0x01)\n\n0x00000080:   NULL\n\u279c  DWARF git:(master) \u2717\n')))}u.isMDXComponent=!0},356:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return h}));var a=t(0),r=t.n(a);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=r.a.createContext({}),c=function(e){var n=r.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=c(e.components);return r.a.createElement(p.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},d=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(t),d=a,h=u["".concat(i,".").concat(d)]||u[d]||b[d]||o;return t?r.a.createElement(h,l(l({ref:n},p),{},{components:t})):r.a.createElement(h,l({ref:n},p))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},913:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/image-20211006215342553-f7b7e31d2c7758543944051e7d7f6e2d.png"},914:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/image-20210201101118977-b2fd913c98afb4e18a8d16a2ea87cd88.png"},915:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/image-20211006202005078-2bf5f49dfd4abf9e99051c0d9975694f.png"}}]);